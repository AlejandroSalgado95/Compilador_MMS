Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    global

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
Rule 2     PROGRAMA -> program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL
Rule 3     PROGRAMA_OPTS -> DEC_V FUNCS
Rule 4     PROGRAMA_OPTS -> DEC_V
Rule 5     PROGRAMA_OPTS -> FUNCS
Rule 6     PRINCIPAL -> SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
Rule 7     DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ;
Rule 8     DEC_V -> var TIPO_SIMPLE : LISTA_VAR ;
Rule 9     LISTA_VAR -> LISTA_VAR , VARIABLE_FIX
Rule 10    LISTA_VAR -> VARIABLE_FIX
Rule 11    TIPO_SIMPLE -> int
Rule 12    TIPO_SIMPLE -> float
Rule 13    TIPO_SIMPLE -> char
Rule 14    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
Rule 15    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
Rule 16    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
Rule 17    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
Rule 18    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
Rule 19    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
Rule 20    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
Rule 21    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
Rule 22    FUNC_TYPES -> char
Rule 23    FUNC_TYPES -> float
Rule 24    FUNC_TYPES -> int
Rule 25    FUNC_TYPES -> void
Rule 26    PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME
Rule 27    PARAMS -> TIPO_SIMPLE PARAM_NAME
Rule 28    PARAM_NAME -> id
Rule 29    VARIABLE_FIX -> id [ cte_i ]
Rule 30    VARIABLE_FIX -> id
Rule 31    VARIABLE -> id [ EXPRESION ]
Rule 32    VARIABLE -> id
Rule 33    BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; }
Rule 34    BLOQUE -> { LOOP_ESTATUTO }
Rule 35    BLOQUE -> { return EXPRESION ; }
Rule 36    BLOQUE -> { }
Rule 37    LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO
Rule 38    LOOP_ESTATUTO -> ESTATUTO
Rule 39    EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
Rule 40    EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
Rule 41    EXPRESION -> EXP_R
Rule 42    EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
Rule 43    EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
Rule 44    EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
Rule 45    EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
Rule 46    EXP_R -> EXP_A
Rule 47    EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
Rule 48    EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
Rule 49    EXP_A -> TERMINO
Rule 50    TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
Rule 51    TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
Rule 52    TERMINO -> FACTOR
Rule 53    ESTATUTO -> ASIGNACION ;
Rule 54    ESTATUTO -> CONDICION
Rule 55    ESTATUTO -> WHILE
Rule 56    ESTATUTO -> FOR
Rule 57    ESTATUTO -> LLAMADA ;
Rule 58    ESTATUTO -> LECTURA ;
Rule 59    ESTATUTO -> ESCRITURA ;
Rule 60    ESTATUTO -> LLAMADA_BI ;
Rule 61    FACTOR -> LLAMADA
Rule 62    FACTOR -> CTE
Rule 63    FACTOR -> VARIABLE
Rule 64    FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
Rule 65    CTE -> cte_i
Rule 66    CTE -> cte_f
Rule 67    CTE -> cte_c
Rule 68    LLAMADA -> id ( LLAMADA_OPTS )
Rule 69    LLAMADA -> id ( )
Rule 70    LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION
Rule 71    LLAMADA_OPTS -> EXPRESION
Rule 72    ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
Rule 73    CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF
Rule 74    CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF
Rule 75    WHILE -> while ( EXPRESION ) do BLOQUE
Rule 76    FOR -> for ASIGNACION to EXPRESION do BLOQUE
Rule 77    LECTURA -> read ( LECTURA_OPTS )
Rule 78    LECTURA_OPTS -> LECTURA_OPTS , id
Rule 79    LECTURA_OPTS -> id
Rule 80    ESCRITURA -> write ( ESCRITURA_OPTS )
Rule 81    ESCRITURA_OPTS -> ESCRITURA_OPTS , cte_s
Rule 82    ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION
Rule 83    ESCRITURA_OPTS -> cte_s
Rule 84    ESCRITURA_OPTS -> EXPRESION
Rule 85    LLAMADA_BI -> POINT
Rule 86    LLAMADA_BI -> CIRCLE
Rule 87    LLAMADA_BI -> PENUP
Rule 88    LLAMADA_BI -> PENDOWN
Rule 89    LLAMADA_BI -> COLOR
Rule 90    LLAMADA_BI -> SIZE
Rule 91    LLAMADA_BI -> CLEAR
Rule 92    CLEAR -> clear ( )
Rule 93    POINT -> point ( EXPRESION , EXPRESION )
Rule 94    CIRCLE -> circle ( EXPRESION )
Rule 95    PENUP -> penup ( )
Rule 96    PENDOWN -> pendown ( )
Rule 97    COLOR -> color ( cte_s )
Rule 98    SIZE -> size ( EXPRESION )
Rule 99    SEM_GLOBAL_NAME -> id
Rule 100   SEM_MAIN_NAME -> main
Rule 101   SEM_FUNC_NAME -> id
Rule 102   SEM_ADD_FUNC -> <empty>
Rule 103   SEM_ADD_GLOBAL_VARIABLES -> <empty>
Rule 104   SEM_ADD_PLUS -> <empty>
Rule 105   SEM_ADD_MINUS -> <empty>
Rule 106   SEM_ADD_TIMES -> <empty>
Rule 107   SEM_ADD_DIVISION -> <empty>
Rule 108   SEM_ADD_EQUALS -> <empty>
Rule 109   SEM_ADD_FONDO_FALSO -> <empty>
Rule 110   SEM_REMOVE_FONDO_FALSO -> <empty>
Rule 111   SEM_ADD_GREATER_THAN -> <empty>
Rule 112   SEM_ADD_LESS_THAN -> <empty>
Rule 113   SEM_ADD_EQUALS_TO -> <empty>
Rule 114   SEM_ADD_NOT_EQUALS_TO -> <empty>
Rule 115   SEM_ADD_AND -> <empty>
Rule 116   SEM_ADD_OR -> <empty>
Rule 117   SEM_ADD_GOTOF -> <empty>
Rule 118   SEM_FILL_GOTOF -> <empty>
Rule 119   SEM_PENDING_EXPA_OP -> <empty>
Rule 120   SEM_PENDING_TERMINO_OP -> <empty>
Rule 121   SEM_PENDING_ASSIGNATION_OP -> <empty>
Rule 122   SEM_PENDING_REL_OP -> <empty>
Rule 123   SEM_PENDING_LOGIC_OP -> <empty>

Terminals, with rules where they appear

(                    : 6 14 15 16 17 18 19 20 21 64 68 69 73 74 75 77 80 92 93 94 95 96 97 98
)                    : 6 14 15 16 17 18 19 20 21 64 68 69 73 74 75 77 80 92 93 94 95 96 97 98
*                    : 50
+                    : 47
,                    : 9 26 70 78 81 82 93
/                    : 51
:                    : 7 8
;                    : 1 2 7 8 33 35 53 57 58 59 60
<                    : 43
=                    : 72
>                    : 42
[                    : 29 31
]                    : 29 31
and                  : 39
char                 : 13 22
circle               : 94
clear                : 92
color                : 97
cte_c                : 67
cte_f                : 66
cte_i                : 29 65
cte_s                : 81 83 97
do                   : 75 76
else                 : 74
equals               : 44
error                : 
float                : 12 23
for                  : 76
global               : 
id                   : 28 29 30 31 32 68 69 78 79 99 101
if                   : 73 74
int                  : 11 24
main                 : 100
minus                : 48
module               : 14 15 16 17 18 19 20 21
not_equals           : 45
or                   : 40
pendown              : 96
penup                : 95
point                : 93
program              : 1 2
read                 : 77
return               : 33 35
size                 : 98
then                 : 73 74
to                   : 76
var                  : 7 8
void                 : 25
while                : 75
write                : 80
{                    : 33 34 35 36
}                    : 33 34 35 36

Nonterminals, with rules where they appear

ASIGNACION           : 53 76
BLOQUE               : 6 14 15 16 17 18 19 20 21 73 74 74 75 76
CIRCLE               : 86
CLEAR                : 91
COLOR                : 89
CONDICION            : 54
CTE                  : 62
DEC_V                : 3 4 7 16 17 20 21
ESCRITURA            : 59
ESCRITURA_OPTS       : 80 81 82
ESTATUTO             : 37 38
EXPRESION            : 31 33 35 39 40 64 70 71 72 73 74 75 76 82 84 93 93 94 98
EXP_A                : 42 42 43 43 44 44 45 45 46 47 48
EXP_R                : 39 40 41
FACTOR               : 50 51 52
FOR                  : 56
FUNCS                : 3 5 14 15 16 17
FUNC_TYPES           : 14 15 16 17 18 19 20 21
LECTURA              : 58
LECTURA_OPTS         : 77 78
LISTA_VAR            : 7 8 9
LLAMADA              : 57 61
LLAMADA_BI           : 60
LLAMADA_OPTS         : 68 70
LOOP_ESTATUTO        : 33 34 37
PARAMS               : 15 16 19 20 26
PARAM_NAME           : 26 27
PENDOWN              : 88
PENUP                : 87
POINT                : 85
PRINCIPAL            : 1 2
PROGRAMA             : 0
PROGRAMA_OPTS        : 1
SEM_ADD_AND          : 39
SEM_ADD_DIVISION     : 51
SEM_ADD_EQUALS       : 72
SEM_ADD_EQUALS_TO    : 44
SEM_ADD_FONDO_FALSO  : 64
SEM_ADD_FUNC         : 1 2 6 14 15 16 17 18 19 20 21
SEM_ADD_GLOBAL_VARIABLES : 6 14 15 16 17 18 19 20 21
SEM_ADD_GOTOF        : 73 74
SEM_ADD_GREATER_THAN : 42
SEM_ADD_LESS_THAN    : 43
SEM_ADD_MINUS        : 48
SEM_ADD_NOT_EQUALS_TO : 45
SEM_ADD_OR           : 40
SEM_ADD_PLUS         : 47
SEM_ADD_TIMES        : 50
SEM_FILL_GOTOF       : 73 74
SEM_FUNC_NAME        : 14 15 16 17 18 19 20 21
SEM_GLOBAL_NAME      : 1 2
SEM_MAIN_NAME        : 6
SEM_PENDING_ASSIGNATION_OP : 72
SEM_PENDING_EXPA_OP  : 47 47 48 48
SEM_PENDING_LOGIC_OP : 39 39 40 40
SEM_PENDING_REL_OP   : 42 43 44 45
SEM_PENDING_TERMINO_OP : 50 50 51 51
SEM_REMOVE_FONDO_FALSO : 64
SIZE                 : 90
TERMINO              : 47 48 49 50 51
TIPO_SIMPLE          : 7 8 26 27
VARIABLE             : 63 72
VARIABLE_FIX         : 9 10
WHILE                : 55

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> . program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL

    program         shift and go to state 2

    PROGRAMA                       shift and go to state 1

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> program . SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> program . SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL
    (99) SEM_GLOBAL_NAME -> . id

    id              shift and go to state 4

    SEM_GLOBAL_NAME                shift and go to state 3

state 3

    (1) PROGRAMA -> program SEM_GLOBAL_NAME . SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> program SEM_GLOBAL_NAME . SEM_ADD_FUNC ; PRINCIPAL
    (102) SEM_ADD_FUNC -> .

    ;               reduce using rule 102 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 5

state 4

    (99) SEM_GLOBAL_NAME -> id .

    ;               reduce using rule 99 (SEM_GLOBAL_NAME -> id .)


state 5

    (1) PROGRAMA -> program SEM_GLOBAL_NAME SEM_ADD_FUNC . ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> program SEM_GLOBAL_NAME SEM_ADD_FUNC . ; PRINCIPAL

    ;               shift and go to state 6


state 6

    (1) PROGRAMA -> program SEM_GLOBAL_NAME SEM_ADD_FUNC ; . PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> program SEM_GLOBAL_NAME SEM_ADD_FUNC ; . PRINCIPAL
    (3) PROGRAMA_OPTS -> . DEC_V FUNCS
    (4) PROGRAMA_OPTS -> . DEC_V
    (5) PROGRAMA_OPTS -> . FUNCS
    (6) PRINCIPAL -> . SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;
    (14) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (15) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (16) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (17) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (18) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (19) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (20) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (21) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (100) SEM_MAIN_NAME -> . main
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    var             shift and go to state 12
    main            shift and go to state 14
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    PROGRAMA_OPTS                  shift and go to state 7
    PRINCIPAL                      shift and go to state 8
    DEC_V                          shift and go to state 9
    FUNCS                          shift and go to state 10
    SEM_MAIN_NAME                  shift and go to state 11
    FUNC_TYPES                     shift and go to state 13

state 7

    (1) PROGRAMA -> program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS . PRINCIPAL
    (6) PRINCIPAL -> . SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (100) SEM_MAIN_NAME -> . main

    main            shift and go to state 14

    PRINCIPAL                      shift and go to state 19
    SEM_MAIN_NAME                  shift and go to state 11

state 8

    (2) PROGRAMA -> program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL .

    $end            reduce using rule 2 (PROGRAMA -> program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL .)


state 9

    (3) PROGRAMA_OPTS -> DEC_V . FUNCS
    (4) PROGRAMA_OPTS -> DEC_V .
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (14) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (15) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (16) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (17) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (18) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (19) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (20) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (21) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    main            reduce using rule 4 (PROGRAMA_OPTS -> DEC_V .)
    var             shift and go to state 21
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    FUNCS                          shift and go to state 20
    FUNC_TYPES                     shift and go to state 13

state 10

    (5) PROGRAMA_OPTS -> FUNCS .
    (14) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (15) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (16) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (17) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    main            reduce using rule 5 (PROGRAMA_OPTS -> FUNCS .)
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    FUNC_TYPES                     shift and go to state 22

state 11

    (6) PRINCIPAL -> SEM_MAIN_NAME . SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (102) SEM_ADD_FUNC -> .

    (               reduce using rule 102 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 23

state 12

    (8) DEC_V -> var . TIPO_SIMPLE : LISTA_VAR ;
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    int             shift and go to state 25
    float           shift and go to state 26
    char            shift and go to state 27

    TIPO_SIMPLE                    shift and go to state 24

state 13

    (18) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (19) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (20) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (21) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE

    module          shift and go to state 28


state 14

    (100) SEM_MAIN_NAME -> main .

    (               reduce using rule 100 (SEM_MAIN_NAME -> main .)


state 15

    (22) FUNC_TYPES -> char .

    module          reduce using rule 22 (FUNC_TYPES -> char .)


state 16

    (23) FUNC_TYPES -> float .

    module          reduce using rule 23 (FUNC_TYPES -> float .)


state 17

    (24) FUNC_TYPES -> int .

    module          reduce using rule 24 (FUNC_TYPES -> int .)


state 18

    (25) FUNC_TYPES -> void .

    module          reduce using rule 25 (FUNC_TYPES -> void .)


state 19

    (1) PROGRAMA -> program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL .

    $end            reduce using rule 1 (PROGRAMA -> program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL .)


state 20

    (3) PROGRAMA_OPTS -> DEC_V FUNCS .
    (14) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (15) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (16) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (17) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    main            reduce using rule 3 (PROGRAMA_OPTS -> DEC_V FUNCS .)
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    FUNC_TYPES                     shift and go to state 22

state 21

    (7) DEC_V -> DEC_V var . TIPO_SIMPLE : LISTA_VAR ;
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    int             shift and go to state 25
    float           shift and go to state 26
    char            shift and go to state 27

    TIPO_SIMPLE                    shift and go to state 29

state 22

    (14) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (15) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (16) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (17) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE

    module          shift and go to state 30


state 23

    (6) PRINCIPAL -> SEM_MAIN_NAME SEM_ADD_FUNC . ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE

    (               shift and go to state 31


state 24

    (8) DEC_V -> var TIPO_SIMPLE . : LISTA_VAR ;

    :               shift and go to state 32


state 25

    (11) TIPO_SIMPLE -> int .

    :               reduce using rule 11 (TIPO_SIMPLE -> int .)
    id              reduce using rule 11 (TIPO_SIMPLE -> int .)


state 26

    (12) TIPO_SIMPLE -> float .

    :               reduce using rule 12 (TIPO_SIMPLE -> float .)
    id              reduce using rule 12 (TIPO_SIMPLE -> float .)


state 27

    (13) TIPO_SIMPLE -> char .

    :               reduce using rule 13 (TIPO_SIMPLE -> char .)
    id              reduce using rule 13 (TIPO_SIMPLE -> char .)


state 28

    (18) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (19) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (20) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (21) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (101) SEM_FUNC_NAME -> . id

    id              shift and go to state 34

    SEM_FUNC_NAME                  shift and go to state 33

state 29

    (7) DEC_V -> DEC_V var TIPO_SIMPLE . : LISTA_VAR ;

    :               shift and go to state 35


state 30

    (14) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (15) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (16) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (17) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (101) SEM_FUNC_NAME -> . id

    id              shift and go to state 34

    SEM_FUNC_NAME                  shift and go to state 36

state 31

    (6) PRINCIPAL -> SEM_MAIN_NAME SEM_ADD_FUNC ( . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE

    )               shift and go to state 37


state 32

    (8) DEC_V -> var TIPO_SIMPLE : . LISTA_VAR ;
    (9) LISTA_VAR -> . LISTA_VAR , VARIABLE_FIX
    (10) LISTA_VAR -> . VARIABLE_FIX
    (29) VARIABLE_FIX -> . id [ cte_i ]
    (30) VARIABLE_FIX -> . id

    id              shift and go to state 40

    LISTA_VAR                      shift and go to state 38
    VARIABLE_FIX                   shift and go to state 39

state 33

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (102) SEM_ADD_FUNC -> .

    (               reduce using rule 102 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 41

state 34

    (101) SEM_FUNC_NAME -> id .

    (               reduce using rule 101 (SEM_FUNC_NAME -> id .)


state 35

    (7) DEC_V -> DEC_V var TIPO_SIMPLE : . LISTA_VAR ;
    (9) LISTA_VAR -> . LISTA_VAR , VARIABLE_FIX
    (10) LISTA_VAR -> . VARIABLE_FIX
    (29) VARIABLE_FIX -> . id [ cte_i ]
    (30) VARIABLE_FIX -> . id

    id              shift and go to state 40

    LISTA_VAR                      shift and go to state 42
    VARIABLE_FIX                   shift and go to state 39

state 36

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (102) SEM_ADD_FUNC -> .

    (               reduce using rule 102 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 43

state 37

    (6) PRINCIPAL -> SEM_MAIN_NAME SEM_ADD_FUNC ( ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (103) SEM_ADD_GLOBAL_VARIABLES -> .

    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 44

state 38

    (8) DEC_V -> var TIPO_SIMPLE : LISTA_VAR . ;
    (9) LISTA_VAR -> LISTA_VAR . , VARIABLE_FIX

    ;               shift and go to state 45
    ,               shift and go to state 46


state 39

    (10) LISTA_VAR -> VARIABLE_FIX .

    ;               reduce using rule 10 (LISTA_VAR -> VARIABLE_FIX .)
    ,               reduce using rule 10 (LISTA_VAR -> VARIABLE_FIX .)


state 40

    (29) VARIABLE_FIX -> id . [ cte_i ]
    (30) VARIABLE_FIX -> id .

    [               shift and go to state 47
    ;               reduce using rule 30 (VARIABLE_FIX -> id .)
    ,               reduce using rule 30 (VARIABLE_FIX -> id .)


state 41

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE

    (               shift and go to state 48


state 42

    (7) DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR . ;
    (9) LISTA_VAR -> LISTA_VAR . , VARIABLE_FIX

    ;               shift and go to state 49
    ,               shift and go to state 46


state 43

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE

    (               shift and go to state 50


state 44

    (6) PRINCIPAL -> SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 51

state 45

    (8) DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .

    var             reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    char            reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    float           reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    int             reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    void            reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    main            reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    {               reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)


state 46

    (9) LISTA_VAR -> LISTA_VAR , . VARIABLE_FIX
    (29) VARIABLE_FIX -> . id [ cte_i ]
    (30) VARIABLE_FIX -> . id

    id              shift and go to state 40

    VARIABLE_FIX                   shift and go to state 53

state 47

    (29) VARIABLE_FIX -> id [ . cte_i ]

    cte_i           shift and go to state 54


state 48

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (26) PARAMS -> . PARAMS , TIPO_SIMPLE PARAM_NAME
    (27) PARAMS -> . TIPO_SIMPLE PARAM_NAME
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    )               shift and go to state 55
    int             shift and go to state 25
    float           shift and go to state 26
    char            shift and go to state 27

    PARAMS                         shift and go to state 56
    TIPO_SIMPLE                    shift and go to state 57

state 49

    (7) DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .

    var             reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    char            reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    float           reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    int             reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    void            reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    main            reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    {               reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)


state 50

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (26) PARAMS -> . PARAMS , TIPO_SIMPLE PARAM_NAME
    (27) PARAMS -> . TIPO_SIMPLE PARAM_NAME
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    )               shift and go to state 58
    int             shift and go to state 25
    float           shift and go to state 26
    char            shift and go to state 27

    PARAMS                         shift and go to state 59
    TIPO_SIMPLE                    shift and go to state 57

state 51

    (6) PRINCIPAL -> SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .

    $end            reduce using rule 6 (PRINCIPAL -> SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)


state 52

    (33) BLOQUE -> { . LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> { . LOOP_ESTATUTO }
    (35) BLOQUE -> { . return EXPRESION ; }
    (36) BLOQUE -> { . }
    (37) LOOP_ESTATUTO -> . LOOP_ESTATUTO ESTATUTO
    (38) LOOP_ESTATUTO -> . ESTATUTO
    (53) ESTATUTO -> . ASIGNACION ;
    (54) ESTATUTO -> . CONDICION
    (55) ESTATUTO -> . WHILE
    (56) ESTATUTO -> . FOR
    (57) ESTATUTO -> . LLAMADA ;
    (58) ESTATUTO -> . LECTURA ;
    (59) ESTATUTO -> . ESCRITURA ;
    (60) ESTATUTO -> . LLAMADA_BI ;
    (72) ASIGNACION -> . VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (73) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF
    (74) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF
    (75) WHILE -> . while ( EXPRESION ) do BLOQUE
    (76) FOR -> . for ASIGNACION to EXPRESION do BLOQUE
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (77) LECTURA -> . read ( LECTURA_OPTS )
    (80) ESCRITURA -> . write ( ESCRITURA_OPTS )
    (85) LLAMADA_BI -> . POINT
    (86) LLAMADA_BI -> . CIRCLE
    (87) LLAMADA_BI -> . PENUP
    (88) LLAMADA_BI -> . PENDOWN
    (89) LLAMADA_BI -> . COLOR
    (90) LLAMADA_BI -> . SIZE
    (91) LLAMADA_BI -> . CLEAR
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (93) POINT -> . point ( EXPRESION , EXPRESION )
    (94) CIRCLE -> . circle ( EXPRESION )
    (95) PENUP -> . penup ( )
    (96) PENDOWN -> . pendown ( )
    (97) COLOR -> . color ( cte_s )
    (98) SIZE -> . size ( EXPRESION )
    (92) CLEAR -> . clear ( )

    return          shift and go to state 61
    }               shift and go to state 62
    if              shift and go to state 73
    while           shift and go to state 74
    for             shift and go to state 75
    id              shift and go to state 76
    read            shift and go to state 77
    write           shift and go to state 78
    point           shift and go to state 86
    circle          shift and go to state 87
    penup           shift and go to state 88
    pendown         shift and go to state 89
    color           shift and go to state 90
    size            shift and go to state 91
    clear           shift and go to state 92

    LOOP_ESTATUTO                  shift and go to state 60
    ESTATUTO                       shift and go to state 63
    ASIGNACION                     shift and go to state 64
    CONDICION                      shift and go to state 65
    WHILE                          shift and go to state 66
    FOR                            shift and go to state 67
    LLAMADA                        shift and go to state 68
    LECTURA                        shift and go to state 69
    ESCRITURA                      shift and go to state 70
    LLAMADA_BI                     shift and go to state 71
    VARIABLE                       shift and go to state 72
    POINT                          shift and go to state 79
    CIRCLE                         shift and go to state 80
    PENUP                          shift and go to state 81
    PENDOWN                        shift and go to state 82
    COLOR                          shift and go to state 83
    SIZE                           shift and go to state 84
    CLEAR                          shift and go to state 85

state 53

    (9) LISTA_VAR -> LISTA_VAR , VARIABLE_FIX .

    ;               reduce using rule 9 (LISTA_VAR -> LISTA_VAR , VARIABLE_FIX .)
    ,               reduce using rule 9 (LISTA_VAR -> LISTA_VAR , VARIABLE_FIX .)


state 54

    (29) VARIABLE_FIX -> id [ cte_i . ]

    ]               shift and go to state 93


state 55

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (103) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 12

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 94
    DEC_V                          shift and go to state 95

state 56

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (26) PARAMS -> PARAMS . , TIPO_SIMPLE PARAM_NAME

    )               shift and go to state 96
    ,               shift and go to state 97


state 57

    (27) PARAMS -> TIPO_SIMPLE . PARAM_NAME
    (28) PARAM_NAME -> . id

    id              shift and go to state 99

    PARAM_NAME                     shift and go to state 98

state 58

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (103) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 12

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 100
    DEC_V                          shift and go to state 101

state 59

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (26) PARAMS -> PARAMS . , TIPO_SIMPLE PARAM_NAME

    )               shift and go to state 102
    ,               shift and go to state 97


state 60

    (33) BLOQUE -> { LOOP_ESTATUTO . return EXPRESION ; }
    (34) BLOQUE -> { LOOP_ESTATUTO . }
    (37) LOOP_ESTATUTO -> LOOP_ESTATUTO . ESTATUTO
    (53) ESTATUTO -> . ASIGNACION ;
    (54) ESTATUTO -> . CONDICION
    (55) ESTATUTO -> . WHILE
    (56) ESTATUTO -> . FOR
    (57) ESTATUTO -> . LLAMADA ;
    (58) ESTATUTO -> . LECTURA ;
    (59) ESTATUTO -> . ESCRITURA ;
    (60) ESTATUTO -> . LLAMADA_BI ;
    (72) ASIGNACION -> . VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (73) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF
    (74) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF
    (75) WHILE -> . while ( EXPRESION ) do BLOQUE
    (76) FOR -> . for ASIGNACION to EXPRESION do BLOQUE
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (77) LECTURA -> . read ( LECTURA_OPTS )
    (80) ESCRITURA -> . write ( ESCRITURA_OPTS )
    (85) LLAMADA_BI -> . POINT
    (86) LLAMADA_BI -> . CIRCLE
    (87) LLAMADA_BI -> . PENUP
    (88) LLAMADA_BI -> . PENDOWN
    (89) LLAMADA_BI -> . COLOR
    (90) LLAMADA_BI -> . SIZE
    (91) LLAMADA_BI -> . CLEAR
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (93) POINT -> . point ( EXPRESION , EXPRESION )
    (94) CIRCLE -> . circle ( EXPRESION )
    (95) PENUP -> . penup ( )
    (96) PENDOWN -> . pendown ( )
    (97) COLOR -> . color ( cte_s )
    (98) SIZE -> . size ( EXPRESION )
    (92) CLEAR -> . clear ( )

    return          shift and go to state 103
    }               shift and go to state 104
    if              shift and go to state 73
    while           shift and go to state 74
    for             shift and go to state 75
    id              shift and go to state 76
    read            shift and go to state 77
    write           shift and go to state 78
    point           shift and go to state 86
    circle          shift and go to state 87
    penup           shift and go to state 88
    pendown         shift and go to state 89
    color           shift and go to state 90
    size            shift and go to state 91
    clear           shift and go to state 92

    ESTATUTO                       shift and go to state 105
    ASIGNACION                     shift and go to state 64
    CONDICION                      shift and go to state 65
    WHILE                          shift and go to state 66
    FOR                            shift and go to state 67
    LLAMADA                        shift and go to state 68
    LECTURA                        shift and go to state 69
    ESCRITURA                      shift and go to state 70
    LLAMADA_BI                     shift and go to state 71
    VARIABLE                       shift and go to state 72
    POINT                          shift and go to state 79
    CIRCLE                         shift and go to state 80
    PENUP                          shift and go to state 81
    PENDOWN                        shift and go to state 82
    COLOR                          shift and go to state 83
    SIZE                           shift and go to state 84
    CLEAR                          shift and go to state 85

state 61

    (35) BLOQUE -> { return . EXPRESION ; }
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 106
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 62

    (36) BLOQUE -> { } .

    $end            reduce using rule 36 (BLOQUE -> { } .)
    char            reduce using rule 36 (BLOQUE -> { } .)
    float           reduce using rule 36 (BLOQUE -> { } .)
    int             reduce using rule 36 (BLOQUE -> { } .)
    void            reduce using rule 36 (BLOQUE -> { } .)
    main            reduce using rule 36 (BLOQUE -> { } .)
    return          reduce using rule 36 (BLOQUE -> { } .)
    }               reduce using rule 36 (BLOQUE -> { } .)
    if              reduce using rule 36 (BLOQUE -> { } .)
    while           reduce using rule 36 (BLOQUE -> { } .)
    for             reduce using rule 36 (BLOQUE -> { } .)
    id              reduce using rule 36 (BLOQUE -> { } .)
    read            reduce using rule 36 (BLOQUE -> { } .)
    write           reduce using rule 36 (BLOQUE -> { } .)
    point           reduce using rule 36 (BLOQUE -> { } .)
    circle          reduce using rule 36 (BLOQUE -> { } .)
    penup           reduce using rule 36 (BLOQUE -> { } .)
    pendown         reduce using rule 36 (BLOQUE -> { } .)
    color           reduce using rule 36 (BLOQUE -> { } .)
    size            reduce using rule 36 (BLOQUE -> { } .)
    clear           reduce using rule 36 (BLOQUE -> { } .)
    else            reduce using rule 36 (BLOQUE -> { } .)


state 63

    (38) LOOP_ESTATUTO -> ESTATUTO .

    return          reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    }               reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    for             reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    read            reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    write           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    point           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    circle          reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    penup           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    pendown         reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    color           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    size            reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    clear           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)


state 64

    (53) ESTATUTO -> ASIGNACION . ;

    ;               shift and go to state 118


state 65

    (54) ESTATUTO -> CONDICION .

    return          reduce using rule 54 (ESTATUTO -> CONDICION .)
    }               reduce using rule 54 (ESTATUTO -> CONDICION .)
    if              reduce using rule 54 (ESTATUTO -> CONDICION .)
    while           reduce using rule 54 (ESTATUTO -> CONDICION .)
    for             reduce using rule 54 (ESTATUTO -> CONDICION .)
    id              reduce using rule 54 (ESTATUTO -> CONDICION .)
    read            reduce using rule 54 (ESTATUTO -> CONDICION .)
    write           reduce using rule 54 (ESTATUTO -> CONDICION .)
    point           reduce using rule 54 (ESTATUTO -> CONDICION .)
    circle          reduce using rule 54 (ESTATUTO -> CONDICION .)
    penup           reduce using rule 54 (ESTATUTO -> CONDICION .)
    pendown         reduce using rule 54 (ESTATUTO -> CONDICION .)
    color           reduce using rule 54 (ESTATUTO -> CONDICION .)
    size            reduce using rule 54 (ESTATUTO -> CONDICION .)
    clear           reduce using rule 54 (ESTATUTO -> CONDICION .)


state 66

    (55) ESTATUTO -> WHILE .

    return          reduce using rule 55 (ESTATUTO -> WHILE .)
    }               reduce using rule 55 (ESTATUTO -> WHILE .)
    if              reduce using rule 55 (ESTATUTO -> WHILE .)
    while           reduce using rule 55 (ESTATUTO -> WHILE .)
    for             reduce using rule 55 (ESTATUTO -> WHILE .)
    id              reduce using rule 55 (ESTATUTO -> WHILE .)
    read            reduce using rule 55 (ESTATUTO -> WHILE .)
    write           reduce using rule 55 (ESTATUTO -> WHILE .)
    point           reduce using rule 55 (ESTATUTO -> WHILE .)
    circle          reduce using rule 55 (ESTATUTO -> WHILE .)
    penup           reduce using rule 55 (ESTATUTO -> WHILE .)
    pendown         reduce using rule 55 (ESTATUTO -> WHILE .)
    color           reduce using rule 55 (ESTATUTO -> WHILE .)
    size            reduce using rule 55 (ESTATUTO -> WHILE .)
    clear           reduce using rule 55 (ESTATUTO -> WHILE .)


state 67

    (56) ESTATUTO -> FOR .

    return          reduce using rule 56 (ESTATUTO -> FOR .)
    }               reduce using rule 56 (ESTATUTO -> FOR .)
    if              reduce using rule 56 (ESTATUTO -> FOR .)
    while           reduce using rule 56 (ESTATUTO -> FOR .)
    for             reduce using rule 56 (ESTATUTO -> FOR .)
    id              reduce using rule 56 (ESTATUTO -> FOR .)
    read            reduce using rule 56 (ESTATUTO -> FOR .)
    write           reduce using rule 56 (ESTATUTO -> FOR .)
    point           reduce using rule 56 (ESTATUTO -> FOR .)
    circle          reduce using rule 56 (ESTATUTO -> FOR .)
    penup           reduce using rule 56 (ESTATUTO -> FOR .)
    pendown         reduce using rule 56 (ESTATUTO -> FOR .)
    color           reduce using rule 56 (ESTATUTO -> FOR .)
    size            reduce using rule 56 (ESTATUTO -> FOR .)
    clear           reduce using rule 56 (ESTATUTO -> FOR .)


state 68

    (57) ESTATUTO -> LLAMADA . ;

    ;               shift and go to state 119


state 69

    (58) ESTATUTO -> LECTURA . ;

    ;               shift and go to state 120


state 70

    (59) ESTATUTO -> ESCRITURA . ;

    ;               shift and go to state 121


state 71

    (60) ESTATUTO -> LLAMADA_BI . ;

    ;               shift and go to state 122


state 72

    (72) ASIGNACION -> VARIABLE . = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP

    =               shift and go to state 123


state 73

    (73) CONDICION -> if . ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF
    (74) CONDICION -> if . ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF

    (               shift and go to state 124


state 74

    (75) WHILE -> while . ( EXPRESION ) do BLOQUE

    (               shift and go to state 125


state 75

    (76) FOR -> for . ASIGNACION to EXPRESION do BLOQUE
    (72) ASIGNACION -> . VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    id              shift and go to state 127

    ASIGNACION                     shift and go to state 126
    VARIABLE                       shift and go to state 72

state 76

    (68) LLAMADA -> id . ( LLAMADA_OPTS )
    (69) LLAMADA -> id . ( )
    (31) VARIABLE -> id . [ EXPRESION ]
    (32) VARIABLE -> id .

    (               shift and go to state 128
    [               shift and go to state 129
    =               reduce using rule 32 (VARIABLE -> id .)
    *               reduce using rule 32 (VARIABLE -> id .)
    /               reduce using rule 32 (VARIABLE -> id .)
    >               reduce using rule 32 (VARIABLE -> id .)
    <               reduce using rule 32 (VARIABLE -> id .)
    equals          reduce using rule 32 (VARIABLE -> id .)
    not_equals      reduce using rule 32 (VARIABLE -> id .)
    +               reduce using rule 32 (VARIABLE -> id .)
    minus           reduce using rule 32 (VARIABLE -> id .)
    ;               reduce using rule 32 (VARIABLE -> id .)
    and             reduce using rule 32 (VARIABLE -> id .)
    or              reduce using rule 32 (VARIABLE -> id .)
    )               reduce using rule 32 (VARIABLE -> id .)
    ,               reduce using rule 32 (VARIABLE -> id .)
    ]               reduce using rule 32 (VARIABLE -> id .)
    to              reduce using rule 32 (VARIABLE -> id .)
    do              reduce using rule 32 (VARIABLE -> id .)


state 77

    (77) LECTURA -> read . ( LECTURA_OPTS )

    (               shift and go to state 130


state 78

    (80) ESCRITURA -> write . ( ESCRITURA_OPTS )

    (               shift and go to state 131


state 79

    (85) LLAMADA_BI -> POINT .

    ;               reduce using rule 85 (LLAMADA_BI -> POINT .)


state 80

    (86) LLAMADA_BI -> CIRCLE .

    ;               reduce using rule 86 (LLAMADA_BI -> CIRCLE .)


state 81

    (87) LLAMADA_BI -> PENUP .

    ;               reduce using rule 87 (LLAMADA_BI -> PENUP .)


state 82

    (88) LLAMADA_BI -> PENDOWN .

    ;               reduce using rule 88 (LLAMADA_BI -> PENDOWN .)


state 83

    (89) LLAMADA_BI -> COLOR .

    ;               reduce using rule 89 (LLAMADA_BI -> COLOR .)


state 84

    (90) LLAMADA_BI -> SIZE .

    ;               reduce using rule 90 (LLAMADA_BI -> SIZE .)


state 85

    (91) LLAMADA_BI -> CLEAR .

    ;               reduce using rule 91 (LLAMADA_BI -> CLEAR .)


state 86

    (93) POINT -> point . ( EXPRESION , EXPRESION )

    (               shift and go to state 132


state 87

    (94) CIRCLE -> circle . ( EXPRESION )

    (               shift and go to state 133


state 88

    (95) PENUP -> penup . ( )

    (               shift and go to state 134


state 89

    (96) PENDOWN -> pendown . ( )

    (               shift and go to state 135


state 90

    (97) COLOR -> color . ( cte_s )

    (               shift and go to state 136


state 91

    (98) SIZE -> size . ( EXPRESION )

    (               shift and go to state 137


state 92

    (92) CLEAR -> clear . ( )

    (               shift and go to state 138


state 93

    (29) VARIABLE_FIX -> id [ cte_i ] .

    ;               reduce using rule 29 (VARIABLE_FIX -> id [ cte_i ] .)
    ,               reduce using rule 29 (VARIABLE_FIX -> id [ cte_i ] .)


state 94

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 139

state 95

    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (103) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 140

state 96

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (103) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 12

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 141
    DEC_V                          shift and go to state 142

state 97

    (26) PARAMS -> PARAMS , . TIPO_SIMPLE PARAM_NAME
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    int             shift and go to state 25
    float           shift and go to state 26
    char            shift and go to state 27

    TIPO_SIMPLE                    shift and go to state 143

state 98

    (27) PARAMS -> TIPO_SIMPLE PARAM_NAME .

    )               reduce using rule 27 (PARAMS -> TIPO_SIMPLE PARAM_NAME .)
    ,               reduce using rule 27 (PARAMS -> TIPO_SIMPLE PARAM_NAME .)


state 99

    (28) PARAM_NAME -> id .

    )               reduce using rule 28 (PARAM_NAME -> id .)
    ,               reduce using rule 28 (PARAM_NAME -> id .)


state 100

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 144

state 101

    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (103) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 145

state 102

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (103) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 12

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 146
    DEC_V                          shift and go to state 147

state 103

    (33) BLOQUE -> { LOOP_ESTATUTO return . EXPRESION ; }
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 148
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 104

    (34) BLOQUE -> { LOOP_ESTATUTO } .

    $end            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    char            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    float           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    int             reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    void            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    main            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    return          reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    }               reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    if              reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    while           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    for             reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    id              reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    read            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    write           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    point           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    circle          reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    penup           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    pendown         reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    color           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    size            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    clear           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    else            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)


state 105

    (37) LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .

    return          reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    }               reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    if              reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    while           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    for             reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    id              reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    read            reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    write           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    point           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    circle          reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    penup           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    pendown         reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    color           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    size            reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    clear           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)


state 106

    (35) BLOQUE -> { return EXPRESION . ; }
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    ;               shift and go to state 149
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 107

    (41) EXPRESION -> EXP_R .

    ;               reduce using rule 41 (EXPRESION -> EXP_R .)
    and             reduce using rule 41 (EXPRESION -> EXP_R .)
    or              reduce using rule 41 (EXPRESION -> EXP_R .)
    )               reduce using rule 41 (EXPRESION -> EXP_R .)
    ,               reduce using rule 41 (EXPRESION -> EXP_R .)
    ]               reduce using rule 41 (EXPRESION -> EXP_R .)
    to              reduce using rule 41 (EXPRESION -> EXP_R .)
    do              reduce using rule 41 (EXPRESION -> EXP_R .)


state 108

    (42) EXP_R -> EXP_A . > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> EXP_A . < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> EXP_A . equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> EXP_A . not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> EXP_A .
    (47) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (119) SEM_PENDING_EXPA_OP -> .

    >               shift and go to state 151
    <               shift and go to state 152
    equals          shift and go to state 153
    not_equals      shift and go to state 154
    ;               reduce using rule 46 (EXP_R -> EXP_A .)
    and             reduce using rule 46 (EXP_R -> EXP_A .)
    or              reduce using rule 46 (EXP_R -> EXP_A .)
    )               reduce using rule 46 (EXP_R -> EXP_A .)
    ,               reduce using rule 46 (EXP_R -> EXP_A .)
    ]               reduce using rule 46 (EXP_R -> EXP_A .)
    to              reduce using rule 46 (EXP_R -> EXP_A .)
    do              reduce using rule 46 (EXP_R -> EXP_A .)
    +               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_EXPA_OP            shift and go to state 155

state 109

    (49) EXP_A -> TERMINO .
    (50) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (120) SEM_PENDING_TERMINO_OP -> .

    >               reduce using rule 49 (EXP_A -> TERMINO .)
    <               reduce using rule 49 (EXP_A -> TERMINO .)
    equals          reduce using rule 49 (EXP_A -> TERMINO .)
    not_equals      reduce using rule 49 (EXP_A -> TERMINO .)
    +               reduce using rule 49 (EXP_A -> TERMINO .)
    minus           reduce using rule 49 (EXP_A -> TERMINO .)
    ;               reduce using rule 49 (EXP_A -> TERMINO .)
    and             reduce using rule 49 (EXP_A -> TERMINO .)
    or              reduce using rule 49 (EXP_A -> TERMINO .)
    )               reduce using rule 49 (EXP_A -> TERMINO .)
    ,               reduce using rule 49 (EXP_A -> TERMINO .)
    ]               reduce using rule 49 (EXP_A -> TERMINO .)
    to              reduce using rule 49 (EXP_A -> TERMINO .)
    do              reduce using rule 49 (EXP_A -> TERMINO .)
    *               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_TERMINO_OP         shift and go to state 156

state 110

    (52) TERMINO -> FACTOR .

    *               reduce using rule 52 (TERMINO -> FACTOR .)
    /               reduce using rule 52 (TERMINO -> FACTOR .)
    >               reduce using rule 52 (TERMINO -> FACTOR .)
    <               reduce using rule 52 (TERMINO -> FACTOR .)
    equals          reduce using rule 52 (TERMINO -> FACTOR .)
    not_equals      reduce using rule 52 (TERMINO -> FACTOR .)
    +               reduce using rule 52 (TERMINO -> FACTOR .)
    minus           reduce using rule 52 (TERMINO -> FACTOR .)
    ;               reduce using rule 52 (TERMINO -> FACTOR .)
    and             reduce using rule 52 (TERMINO -> FACTOR .)
    or              reduce using rule 52 (TERMINO -> FACTOR .)
    )               reduce using rule 52 (TERMINO -> FACTOR .)
    ,               reduce using rule 52 (TERMINO -> FACTOR .)
    ]               reduce using rule 52 (TERMINO -> FACTOR .)
    to              reduce using rule 52 (TERMINO -> FACTOR .)
    do              reduce using rule 52 (TERMINO -> FACTOR .)


state 111

    (61) FACTOR -> LLAMADA .

    *               reduce using rule 61 (FACTOR -> LLAMADA .)
    /               reduce using rule 61 (FACTOR -> LLAMADA .)
    >               reduce using rule 61 (FACTOR -> LLAMADA .)
    <               reduce using rule 61 (FACTOR -> LLAMADA .)
    equals          reduce using rule 61 (FACTOR -> LLAMADA .)
    not_equals      reduce using rule 61 (FACTOR -> LLAMADA .)
    +               reduce using rule 61 (FACTOR -> LLAMADA .)
    minus           reduce using rule 61 (FACTOR -> LLAMADA .)
    ;               reduce using rule 61 (FACTOR -> LLAMADA .)
    and             reduce using rule 61 (FACTOR -> LLAMADA .)
    or              reduce using rule 61 (FACTOR -> LLAMADA .)
    )               reduce using rule 61 (FACTOR -> LLAMADA .)
    ,               reduce using rule 61 (FACTOR -> LLAMADA .)
    ]               reduce using rule 61 (FACTOR -> LLAMADA .)
    to              reduce using rule 61 (FACTOR -> LLAMADA .)
    do              reduce using rule 61 (FACTOR -> LLAMADA .)


state 112

    (62) FACTOR -> CTE .

    *               reduce using rule 62 (FACTOR -> CTE .)
    /               reduce using rule 62 (FACTOR -> CTE .)
    >               reduce using rule 62 (FACTOR -> CTE .)
    <               reduce using rule 62 (FACTOR -> CTE .)
    equals          reduce using rule 62 (FACTOR -> CTE .)
    not_equals      reduce using rule 62 (FACTOR -> CTE .)
    +               reduce using rule 62 (FACTOR -> CTE .)
    minus           reduce using rule 62 (FACTOR -> CTE .)
    ;               reduce using rule 62 (FACTOR -> CTE .)
    and             reduce using rule 62 (FACTOR -> CTE .)
    or              reduce using rule 62 (FACTOR -> CTE .)
    )               reduce using rule 62 (FACTOR -> CTE .)
    ,               reduce using rule 62 (FACTOR -> CTE .)
    ]               reduce using rule 62 (FACTOR -> CTE .)
    to              reduce using rule 62 (FACTOR -> CTE .)
    do              reduce using rule 62 (FACTOR -> CTE .)


state 113

    (63) FACTOR -> VARIABLE .

    *               reduce using rule 63 (FACTOR -> VARIABLE .)
    /               reduce using rule 63 (FACTOR -> VARIABLE .)
    >               reduce using rule 63 (FACTOR -> VARIABLE .)
    <               reduce using rule 63 (FACTOR -> VARIABLE .)
    equals          reduce using rule 63 (FACTOR -> VARIABLE .)
    not_equals      reduce using rule 63 (FACTOR -> VARIABLE .)
    +               reduce using rule 63 (FACTOR -> VARIABLE .)
    minus           reduce using rule 63 (FACTOR -> VARIABLE .)
    ;               reduce using rule 63 (FACTOR -> VARIABLE .)
    and             reduce using rule 63 (FACTOR -> VARIABLE .)
    or              reduce using rule 63 (FACTOR -> VARIABLE .)
    )               reduce using rule 63 (FACTOR -> VARIABLE .)
    ,               reduce using rule 63 (FACTOR -> VARIABLE .)
    ]               reduce using rule 63 (FACTOR -> VARIABLE .)
    to              reduce using rule 63 (FACTOR -> VARIABLE .)
    do              reduce using rule 63 (FACTOR -> VARIABLE .)


state 114

    (64) FACTOR -> ( . SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (109) SEM_ADD_FONDO_FALSO -> .

    (               reduce using rule 109 (SEM_ADD_FONDO_FALSO -> .)
    id              reduce using rule 109 (SEM_ADD_FONDO_FALSO -> .)
    cte_i           reduce using rule 109 (SEM_ADD_FONDO_FALSO -> .)
    cte_f           reduce using rule 109 (SEM_ADD_FONDO_FALSO -> .)
    cte_c           reduce using rule 109 (SEM_ADD_FONDO_FALSO -> .)

    SEM_ADD_FONDO_FALSO            shift and go to state 157

state 115

    (65) CTE -> cte_i .

    *               reduce using rule 65 (CTE -> cte_i .)
    /               reduce using rule 65 (CTE -> cte_i .)
    >               reduce using rule 65 (CTE -> cte_i .)
    <               reduce using rule 65 (CTE -> cte_i .)
    equals          reduce using rule 65 (CTE -> cte_i .)
    not_equals      reduce using rule 65 (CTE -> cte_i .)
    +               reduce using rule 65 (CTE -> cte_i .)
    minus           reduce using rule 65 (CTE -> cte_i .)
    ;               reduce using rule 65 (CTE -> cte_i .)
    and             reduce using rule 65 (CTE -> cte_i .)
    or              reduce using rule 65 (CTE -> cte_i .)
    )               reduce using rule 65 (CTE -> cte_i .)
    ,               reduce using rule 65 (CTE -> cte_i .)
    ]               reduce using rule 65 (CTE -> cte_i .)
    to              reduce using rule 65 (CTE -> cte_i .)
    do              reduce using rule 65 (CTE -> cte_i .)


state 116

    (66) CTE -> cte_f .

    *               reduce using rule 66 (CTE -> cte_f .)
    /               reduce using rule 66 (CTE -> cte_f .)
    >               reduce using rule 66 (CTE -> cte_f .)
    <               reduce using rule 66 (CTE -> cte_f .)
    equals          reduce using rule 66 (CTE -> cte_f .)
    not_equals      reduce using rule 66 (CTE -> cte_f .)
    +               reduce using rule 66 (CTE -> cte_f .)
    minus           reduce using rule 66 (CTE -> cte_f .)
    ;               reduce using rule 66 (CTE -> cte_f .)
    and             reduce using rule 66 (CTE -> cte_f .)
    or              reduce using rule 66 (CTE -> cte_f .)
    )               reduce using rule 66 (CTE -> cte_f .)
    ,               reduce using rule 66 (CTE -> cte_f .)
    ]               reduce using rule 66 (CTE -> cte_f .)
    to              reduce using rule 66 (CTE -> cte_f .)
    do              reduce using rule 66 (CTE -> cte_f .)


state 117

    (67) CTE -> cte_c .

    *               reduce using rule 67 (CTE -> cte_c .)
    /               reduce using rule 67 (CTE -> cte_c .)
    >               reduce using rule 67 (CTE -> cte_c .)
    <               reduce using rule 67 (CTE -> cte_c .)
    equals          reduce using rule 67 (CTE -> cte_c .)
    not_equals      reduce using rule 67 (CTE -> cte_c .)
    +               reduce using rule 67 (CTE -> cte_c .)
    minus           reduce using rule 67 (CTE -> cte_c .)
    ;               reduce using rule 67 (CTE -> cte_c .)
    and             reduce using rule 67 (CTE -> cte_c .)
    or              reduce using rule 67 (CTE -> cte_c .)
    )               reduce using rule 67 (CTE -> cte_c .)
    ,               reduce using rule 67 (CTE -> cte_c .)
    ]               reduce using rule 67 (CTE -> cte_c .)
    to              reduce using rule 67 (CTE -> cte_c .)
    do              reduce using rule 67 (CTE -> cte_c .)


state 118

    (53) ESTATUTO -> ASIGNACION ; .

    return          reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    }               reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    if              reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    while           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    for             reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    id              reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    read            reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    write           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    point           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    circle          reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    penup           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    pendown         reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    color           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    size            reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    clear           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)


state 119

    (57) ESTATUTO -> LLAMADA ; .

    return          reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    }               reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    if              reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    while           reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    for             reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    id              reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    read            reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    write           reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    point           reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    circle          reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    penup           reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    pendown         reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    color           reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    size            reduce using rule 57 (ESTATUTO -> LLAMADA ; .)
    clear           reduce using rule 57 (ESTATUTO -> LLAMADA ; .)


state 120

    (58) ESTATUTO -> LECTURA ; .

    return          reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    }               reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    if              reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    while           reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    for             reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    id              reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    read            reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    write           reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    point           reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    circle          reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    penup           reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    pendown         reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    color           reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    size            reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    clear           reduce using rule 58 (ESTATUTO -> LECTURA ; .)


state 121

    (59) ESTATUTO -> ESCRITURA ; .

    return          reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    }               reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    if              reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    while           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    for             reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    id              reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    read            reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    write           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    point           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    circle          reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    penup           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    pendown         reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    color           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    size            reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    clear           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)


state 122

    (60) ESTATUTO -> LLAMADA_BI ; .

    return          reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    }               reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    if              reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    while           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    for             reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    id              reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    read            reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    write           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    point           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    circle          reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    penup           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    pendown         reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    color           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    size            reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    clear           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)


state 123

    (72) ASIGNACION -> VARIABLE = . SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (108) SEM_ADD_EQUALS -> .

    (               reduce using rule 108 (SEM_ADD_EQUALS -> .)
    id              reduce using rule 108 (SEM_ADD_EQUALS -> .)
    cte_i           reduce using rule 108 (SEM_ADD_EQUALS -> .)
    cte_f           reduce using rule 108 (SEM_ADD_EQUALS -> .)
    cte_c           reduce using rule 108 (SEM_ADD_EQUALS -> .)

    SEM_ADD_EQUALS                 shift and go to state 158

state 124

    (73) CONDICION -> if ( . EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF
    (74) CONDICION -> if ( . EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 159
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 125

    (75) WHILE -> while ( . EXPRESION ) do BLOQUE
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 160
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 126

    (76) FOR -> for ASIGNACION . to EXPRESION do BLOQUE

    to              shift and go to state 161


state 127

    (31) VARIABLE -> id . [ EXPRESION ]
    (32) VARIABLE -> id .

    [               shift and go to state 129
    =               reduce using rule 32 (VARIABLE -> id .)


state 128

    (68) LLAMADA -> id ( . LLAMADA_OPTS )
    (69) LLAMADA -> id ( . )
    (70) LLAMADA_OPTS -> . LLAMADA_OPTS , EXPRESION
    (71) LLAMADA_OPTS -> . EXPRESION
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    )               shift and go to state 163
    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    LLAMADA_OPTS                   shift and go to state 162
    EXPRESION                      shift and go to state 164
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 129

    (31) VARIABLE -> id [ . EXPRESION ]
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 165
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 130

    (77) LECTURA -> read ( . LECTURA_OPTS )
    (78) LECTURA_OPTS -> . LECTURA_OPTS , id
    (79) LECTURA_OPTS -> . id

    id              shift and go to state 167

    LECTURA_OPTS                   shift and go to state 166

state 131

    (80) ESCRITURA -> write ( . ESCRITURA_OPTS )
    (81) ESCRITURA_OPTS -> . ESCRITURA_OPTS , cte_s
    (82) ESCRITURA_OPTS -> . ESCRITURA_OPTS , EXPRESION
    (83) ESCRITURA_OPTS -> . cte_s
    (84) ESCRITURA_OPTS -> . EXPRESION
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    cte_s           shift and go to state 169
    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    ESCRITURA_OPTS                 shift and go to state 168
    EXPRESION                      shift and go to state 170
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 132

    (93) POINT -> point ( . EXPRESION , EXPRESION )
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 171
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 133

    (94) CIRCLE -> circle ( . EXPRESION )
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 172
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 134

    (95) PENUP -> penup ( . )

    )               shift and go to state 173


state 135

    (96) PENDOWN -> pendown ( . )

    )               shift and go to state 174


state 136

    (97) COLOR -> color ( . cte_s )

    cte_s           shift and go to state 175


state 137

    (98) SIZE -> size ( . EXPRESION )
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 176
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 138

    (92) CLEAR -> clear ( . )

    )               shift and go to state 177


state 139

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .

    char            reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    float           reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    int             reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    void            reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    main            reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)


state 140

    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 178

state 141

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 179

state 142

    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (103) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 180

state 143

    (26) PARAMS -> PARAMS , TIPO_SIMPLE . PARAM_NAME
    (28) PARAM_NAME -> . id

    id              shift and go to state 99

    PARAM_NAME                     shift and go to state 181

state 144

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .

    char            reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    float           reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    int             reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    void            reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    main            reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)


state 145

    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 182

state 146

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 183

state 147

    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (103) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 184

state 148

    (33) BLOQUE -> { LOOP_ESTATUTO return EXPRESION . ; }
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    ;               shift and go to state 185
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 149

    (35) BLOQUE -> { return EXPRESION ; . }

    }               shift and go to state 186


state 150

    (39) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP . and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP . or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP

    and             shift and go to state 187
    or              shift and go to state 188


state 151

    (42) EXP_R -> EXP_A > . SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (111) SEM_ADD_GREATER_THAN -> .

    (               reduce using rule 111 (SEM_ADD_GREATER_THAN -> .)
    id              reduce using rule 111 (SEM_ADD_GREATER_THAN -> .)
    cte_i           reduce using rule 111 (SEM_ADD_GREATER_THAN -> .)
    cte_f           reduce using rule 111 (SEM_ADD_GREATER_THAN -> .)
    cte_c           reduce using rule 111 (SEM_ADD_GREATER_THAN -> .)

    SEM_ADD_GREATER_THAN           shift and go to state 189

state 152

    (43) EXP_R -> EXP_A < . SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (112) SEM_ADD_LESS_THAN -> .

    (               reduce using rule 112 (SEM_ADD_LESS_THAN -> .)
    id              reduce using rule 112 (SEM_ADD_LESS_THAN -> .)
    cte_i           reduce using rule 112 (SEM_ADD_LESS_THAN -> .)
    cte_f           reduce using rule 112 (SEM_ADD_LESS_THAN -> .)
    cte_c           reduce using rule 112 (SEM_ADD_LESS_THAN -> .)

    SEM_ADD_LESS_THAN              shift and go to state 190

state 153

    (44) EXP_R -> EXP_A equals . SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (113) SEM_ADD_EQUALS_TO -> .

    (               reduce using rule 113 (SEM_ADD_EQUALS_TO -> .)
    id              reduce using rule 113 (SEM_ADD_EQUALS_TO -> .)
    cte_i           reduce using rule 113 (SEM_ADD_EQUALS_TO -> .)
    cte_f           reduce using rule 113 (SEM_ADD_EQUALS_TO -> .)
    cte_c           reduce using rule 113 (SEM_ADD_EQUALS_TO -> .)

    SEM_ADD_EQUALS_TO              shift and go to state 191

state 154

    (45) EXP_R -> EXP_A not_equals . SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (114) SEM_ADD_NOT_EQUALS_TO -> .

    (               reduce using rule 114 (SEM_ADD_NOT_EQUALS_TO -> .)
    id              reduce using rule 114 (SEM_ADD_NOT_EQUALS_TO -> .)
    cte_i           reduce using rule 114 (SEM_ADD_NOT_EQUALS_TO -> .)
    cte_f           reduce using rule 114 (SEM_ADD_NOT_EQUALS_TO -> .)
    cte_c           reduce using rule 114 (SEM_ADD_NOT_EQUALS_TO -> .)

    SEM_ADD_NOT_EQUALS_TO          shift and go to state 192

state 155

    (47) EXP_A -> EXP_A SEM_PENDING_EXPA_OP . + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A SEM_PENDING_EXPA_OP . minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP

    +               shift and go to state 193
    minus           shift and go to state 194


state 156

    (50) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP . * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP . / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP

    *               shift and go to state 195
    /               shift and go to state 196


state 157

    (64) FACTOR -> ( SEM_ADD_FONDO_FALSO . EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 197
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 158

    (72) ASIGNACION -> VARIABLE = SEM_ADD_EQUALS . EXPRESION SEM_PENDING_ASSIGNATION_OP
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    VARIABLE                       shift and go to state 113
    EXPRESION                      shift and go to state 198
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112

state 159

    (73) CONDICION -> if ( EXPRESION . ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF
    (74) CONDICION -> if ( EXPRESION . ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 199
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 160

    (75) WHILE -> while ( EXPRESION . ) do BLOQUE
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 200
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 161

    (76) FOR -> for ASIGNACION to . EXPRESION do BLOQUE
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 201
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 162

    (68) LLAMADA -> id ( LLAMADA_OPTS . )
    (70) LLAMADA_OPTS -> LLAMADA_OPTS . , EXPRESION

    )               shift and go to state 202
    ,               shift and go to state 203


state 163

    (69) LLAMADA -> id ( ) .

    ;               reduce using rule 69 (LLAMADA -> id ( ) .)
    *               reduce using rule 69 (LLAMADA -> id ( ) .)
    /               reduce using rule 69 (LLAMADA -> id ( ) .)
    >               reduce using rule 69 (LLAMADA -> id ( ) .)
    <               reduce using rule 69 (LLAMADA -> id ( ) .)
    equals          reduce using rule 69 (LLAMADA -> id ( ) .)
    not_equals      reduce using rule 69 (LLAMADA -> id ( ) .)
    +               reduce using rule 69 (LLAMADA -> id ( ) .)
    minus           reduce using rule 69 (LLAMADA -> id ( ) .)
    and             reduce using rule 69 (LLAMADA -> id ( ) .)
    or              reduce using rule 69 (LLAMADA -> id ( ) .)
    )               reduce using rule 69 (LLAMADA -> id ( ) .)
    ,               reduce using rule 69 (LLAMADA -> id ( ) .)
    ]               reduce using rule 69 (LLAMADA -> id ( ) .)
    to              reduce using rule 69 (LLAMADA -> id ( ) .)
    do              reduce using rule 69 (LLAMADA -> id ( ) .)


state 164

    (71) LLAMADA_OPTS -> EXPRESION .
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    )               reduce using rule 71 (LLAMADA_OPTS -> EXPRESION .)
    ,               reduce using rule 71 (LLAMADA_OPTS -> EXPRESION .)
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 165

    (31) VARIABLE -> id [ EXPRESION . ]
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    ]               shift and go to state 204
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 166

    (77) LECTURA -> read ( LECTURA_OPTS . )
    (78) LECTURA_OPTS -> LECTURA_OPTS . , id

    )               shift and go to state 205
    ,               shift and go to state 206


state 167

    (79) LECTURA_OPTS -> id .

    )               reduce using rule 79 (LECTURA_OPTS -> id .)
    ,               reduce using rule 79 (LECTURA_OPTS -> id .)


state 168

    (80) ESCRITURA -> write ( ESCRITURA_OPTS . )
    (81) ESCRITURA_OPTS -> ESCRITURA_OPTS . , cte_s
    (82) ESCRITURA_OPTS -> ESCRITURA_OPTS . , EXPRESION

    )               shift and go to state 207
    ,               shift and go to state 208


state 169

    (83) ESCRITURA_OPTS -> cte_s .

    )               reduce using rule 83 (ESCRITURA_OPTS -> cte_s .)
    ,               reduce using rule 83 (ESCRITURA_OPTS -> cte_s .)


state 170

    (84) ESCRITURA_OPTS -> EXPRESION .
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    )               reduce using rule 84 (ESCRITURA_OPTS -> EXPRESION .)
    ,               reduce using rule 84 (ESCRITURA_OPTS -> EXPRESION .)
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 171

    (93) POINT -> point ( EXPRESION . , EXPRESION )
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    ,               shift and go to state 209
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 172

    (94) CIRCLE -> circle ( EXPRESION . )
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 210
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 173

    (95) PENUP -> penup ( ) .

    ;               reduce using rule 95 (PENUP -> penup ( ) .)


state 174

    (96) PENDOWN -> pendown ( ) .

    ;               reduce using rule 96 (PENDOWN -> pendown ( ) .)


state 175

    (97) COLOR -> color ( cte_s . )

    )               shift and go to state 211


state 176

    (98) SIZE -> size ( EXPRESION . )
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 212
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 177

    (92) CLEAR -> clear ( ) .

    ;               reduce using rule 92 (CLEAR -> clear ( ) .)


state 178

    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .

    char            reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    float           reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    int             reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    void            reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    main            reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)


state 179

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .

    char            reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    float           reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    int             reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    void            reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    main            reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)


state 180

    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 213

state 181

    (26) PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME .

    )               reduce using rule 26 (PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME .)
    ,               reduce using rule 26 (PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME .)


state 182

    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .

    char            reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    float           reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    int             reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    void            reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    main            reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)


state 183

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .

    char            reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    float           reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    int             reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    void            reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    main            reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)


state 184

    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 214

state 185

    (33) BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; . }

    }               shift and go to state 215


state 186

    (35) BLOQUE -> { return EXPRESION ; } .

    $end            reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    char            reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    float           reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    int             reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    void            reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    main            reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    return          reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    }               reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    if              reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    while           reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    for             reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    id              reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    read            reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    write           reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    point           reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    circle          reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    penup           reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    pendown         reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    color           reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    size            reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    clear           reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)
    else            reduce using rule 35 (BLOQUE -> { return EXPRESION ; } .)


state 187

    (39) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and . SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (115) SEM_ADD_AND -> .

    (               reduce using rule 115 (SEM_ADD_AND -> .)
    id              reduce using rule 115 (SEM_ADD_AND -> .)
    cte_i           reduce using rule 115 (SEM_ADD_AND -> .)
    cte_f           reduce using rule 115 (SEM_ADD_AND -> .)
    cte_c           reduce using rule 115 (SEM_ADD_AND -> .)

    SEM_ADD_AND                    shift and go to state 216

state 188

    (40) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or . SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (116) SEM_ADD_OR -> .

    (               reduce using rule 116 (SEM_ADD_OR -> .)
    id              reduce using rule 116 (SEM_ADD_OR -> .)
    cte_i           reduce using rule 116 (SEM_ADD_OR -> .)
    cte_f           reduce using rule 116 (SEM_ADD_OR -> .)
    cte_c           reduce using rule 116 (SEM_ADD_OR -> .)

    SEM_ADD_OR                     shift and go to state 217

state 189

    (42) EXP_R -> EXP_A > SEM_ADD_GREATER_THAN . EXP_A SEM_PENDING_REL_OP
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXP_A                          shift and go to state 218
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 190

    (43) EXP_R -> EXP_A < SEM_ADD_LESS_THAN . EXP_A SEM_PENDING_REL_OP
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXP_A                          shift and go to state 219
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 191

    (44) EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO . EXP_A SEM_PENDING_REL_OP
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXP_A                          shift and go to state 220
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 192

    (45) EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO . EXP_A SEM_PENDING_REL_OP
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXP_A                          shift and go to state 221
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 193

    (47) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + . SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (104) SEM_ADD_PLUS -> .

    (               reduce using rule 104 (SEM_ADD_PLUS -> .)
    id              reduce using rule 104 (SEM_ADD_PLUS -> .)
    cte_i           reduce using rule 104 (SEM_ADD_PLUS -> .)
    cte_f           reduce using rule 104 (SEM_ADD_PLUS -> .)
    cte_c           reduce using rule 104 (SEM_ADD_PLUS -> .)

    SEM_ADD_PLUS                   shift and go to state 222

state 194

    (48) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus . SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (105) SEM_ADD_MINUS -> .

    (               reduce using rule 105 (SEM_ADD_MINUS -> .)
    id              reduce using rule 105 (SEM_ADD_MINUS -> .)
    cte_i           reduce using rule 105 (SEM_ADD_MINUS -> .)
    cte_f           reduce using rule 105 (SEM_ADD_MINUS -> .)
    cte_c           reduce using rule 105 (SEM_ADD_MINUS -> .)

    SEM_ADD_MINUS                  shift and go to state 223

state 195

    (50) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * . SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (106) SEM_ADD_TIMES -> .

    (               reduce using rule 106 (SEM_ADD_TIMES -> .)
    id              reduce using rule 106 (SEM_ADD_TIMES -> .)
    cte_i           reduce using rule 106 (SEM_ADD_TIMES -> .)
    cte_f           reduce using rule 106 (SEM_ADD_TIMES -> .)
    cte_c           reduce using rule 106 (SEM_ADD_TIMES -> .)

    SEM_ADD_TIMES                  shift and go to state 224

state 196

    (51) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / . SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (107) SEM_ADD_DIVISION -> .

    (               reduce using rule 107 (SEM_ADD_DIVISION -> .)
    id              reduce using rule 107 (SEM_ADD_DIVISION -> .)
    cte_i           reduce using rule 107 (SEM_ADD_DIVISION -> .)
    cte_f           reduce using rule 107 (SEM_ADD_DIVISION -> .)
    cte_c           reduce using rule 107 (SEM_ADD_DIVISION -> .)

    SEM_ADD_DIVISION               shift and go to state 225

state 197

    (64) FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION . ) SEM_REMOVE_FONDO_FALSO
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 226
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 198

    (72) ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION . SEM_PENDING_ASSIGNATION_OP
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (121) SEM_PENDING_ASSIGNATION_OP -> .
    (123) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 121 (SEM_PENDING_ASSIGNATION_OP -> .)
    to              reduce using rule 121 (SEM_PENDING_ASSIGNATION_OP -> .)
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_ASSIGNATION_OP     shift and go to state 227
    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 199

    (73) CONDICION -> if ( EXPRESION ) . SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF
    (74) CONDICION -> if ( EXPRESION ) . SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF
    (117) SEM_ADD_GOTOF -> .

    then            reduce using rule 117 (SEM_ADD_GOTOF -> .)

    SEM_ADD_GOTOF                  shift and go to state 228

state 200

    (75) WHILE -> while ( EXPRESION ) . do BLOQUE

    do              shift and go to state 229


state 201

    (76) FOR -> for ASIGNACION to EXPRESION . do BLOQUE
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    do              shift and go to state 230
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 202

    (68) LLAMADA -> id ( LLAMADA_OPTS ) .

    ;               reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    *               reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    /               reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    >               reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    <               reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    equals          reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    not_equals      reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    +               reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    minus           reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    and             reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    or              reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    )               reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    ,               reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    ]               reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    to              reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)
    do              reduce using rule 68 (LLAMADA -> id ( LLAMADA_OPTS ) .)


state 203

    (70) LLAMADA_OPTS -> LLAMADA_OPTS , . EXPRESION
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 231
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 204

    (31) VARIABLE -> id [ EXPRESION ] .

    =               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    *               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    /               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    >               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    <               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    equals          reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    not_equals      reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    +               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    minus           reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    ;               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    and             reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    or              reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    )               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    ,               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    ]               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    to              reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    do              reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)


state 205

    (77) LECTURA -> read ( LECTURA_OPTS ) .

    ;               reduce using rule 77 (LECTURA -> read ( LECTURA_OPTS ) .)


state 206

    (78) LECTURA_OPTS -> LECTURA_OPTS , . id

    id              shift and go to state 232


state 207

    (80) ESCRITURA -> write ( ESCRITURA_OPTS ) .

    ;               reduce using rule 80 (ESCRITURA -> write ( ESCRITURA_OPTS ) .)


state 208

    (81) ESCRITURA_OPTS -> ESCRITURA_OPTS , . cte_s
    (82) ESCRITURA_OPTS -> ESCRITURA_OPTS , . EXPRESION
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    cte_s           shift and go to state 233
    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 234
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 209

    (93) POINT -> point ( EXPRESION , . EXPRESION )
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXPRESION                      shift and go to state 235
    EXP_R                          shift and go to state 107
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 210

    (94) CIRCLE -> circle ( EXPRESION ) .

    ;               reduce using rule 94 (CIRCLE -> circle ( EXPRESION ) .)


state 211

    (97) COLOR -> color ( cte_s ) .

    ;               reduce using rule 97 (COLOR -> color ( cte_s ) .)


state 212

    (98) SIZE -> size ( EXPRESION ) .

    ;               reduce using rule 98 (SIZE -> size ( EXPRESION ) .)


state 213

    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .

    char            reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    float           reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    int             reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    void            reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    main            reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)


state 214

    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .

    char            reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    float           reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    int             reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    void            reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)
    main            reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE .)


state 215

    (33) BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .

    $end            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    char            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    float           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    int             reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    void            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    main            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    return          reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    }               reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    if              reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    while           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    for             reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    id              reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    read            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    write           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    point           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    circle          reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    penup           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    pendown         reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    color           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    size            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    clear           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)
    else            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION ; } .)


state 216

    (39) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND . EXP_R SEM_PENDING_LOGIC_OP
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXP_R                          shift and go to state 236
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 217

    (40) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR . EXP_R SEM_PENDING_LOGIC_OP
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    EXP_R                          shift and go to state 237
    EXP_A                          shift and go to state 108
    TERMINO                        shift and go to state 109
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 218

    (42) EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A . SEM_PENDING_REL_OP
    (47) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (122) SEM_PENDING_REL_OP -> .
    (119) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 238
    SEM_PENDING_EXPA_OP            shift and go to state 155

state 219

    (43) EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A . SEM_PENDING_REL_OP
    (47) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (122) SEM_PENDING_REL_OP -> .
    (119) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 239
    SEM_PENDING_EXPA_OP            shift and go to state 155

state 220

    (44) EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A . SEM_PENDING_REL_OP
    (47) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (122) SEM_PENDING_REL_OP -> .
    (119) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 240
    SEM_PENDING_EXPA_OP            shift and go to state 155

state 221

    (45) EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A . SEM_PENDING_REL_OP
    (47) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (122) SEM_PENDING_REL_OP -> .
    (119) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 122 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 241
    SEM_PENDING_EXPA_OP            shift and go to state 155

state 222

    (47) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS . TERMINO SEM_PENDING_EXPA_OP
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    TERMINO                        shift and go to state 242
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 223

    (48) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS . TERMINO SEM_PENDING_EXPA_OP
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    TERMINO                        shift and go to state 243
    FACTOR                         shift and go to state 110
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 224

    (50) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES . FACTOR SEM_PENDING_TERMINO_OP
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    FACTOR                         shift and go to state 244
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 225

    (51) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION . FACTOR SEM_PENDING_TERMINO_OP
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . id ( LLAMADA_OPTS )
    (69) LLAMADA -> . id ( )
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    (               shift and go to state 114
    id              shift and go to state 76
    cte_i           shift and go to state 115
    cte_f           shift and go to state 116
    cte_c           shift and go to state 117

    FACTOR                         shift and go to state 245
    LLAMADA                        shift and go to state 111
    CTE                            shift and go to state 112
    VARIABLE                       shift and go to state 113

state 226

    (64) FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) . SEM_REMOVE_FONDO_FALSO
    (110) SEM_REMOVE_FONDO_FALSO -> .

    *               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    /               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    >               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    <               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    equals          reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    not_equals      reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    +               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    minus           reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    ;               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    and             reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    or              reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    )               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    ,               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    ]               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    to              reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    do              reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)

    SEM_REMOVE_FONDO_FALSO         shift and go to state 246

state 227

    (72) ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP .

    ;               reduce using rule 72 (ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP .)
    to              reduce using rule 72 (ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP .)


state 228

    (73) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF . then BLOQUE SEM_FILL_GOTOF
    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF . then BLOQUE else BLOQUE SEM_FILL_GOTOF

    then            shift and go to state 247


state 229

    (75) WHILE -> while ( EXPRESION ) do . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 248

state 230

    (76) FOR -> for ASIGNACION to EXPRESION do . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 249

state 231

    (70) LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION .
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    )               reduce using rule 70 (LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION .)
    ,               reduce using rule 70 (LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION .)
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 232

    (78) LECTURA_OPTS -> LECTURA_OPTS , id .

    )               reduce using rule 78 (LECTURA_OPTS -> LECTURA_OPTS , id .)
    ,               reduce using rule 78 (LECTURA_OPTS -> LECTURA_OPTS , id .)


state 233

    (81) ESCRITURA_OPTS -> ESCRITURA_OPTS , cte_s .

    )               reduce using rule 81 (ESCRITURA_OPTS -> ESCRITURA_OPTS , cte_s .)
    ,               reduce using rule 81 (ESCRITURA_OPTS -> ESCRITURA_OPTS , cte_s .)


state 234

    (82) ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION .
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    )               reduce using rule 82 (ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION .)
    ,               reduce using rule 82 (ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION .)
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 235

    (93) POINT -> point ( EXPRESION , EXPRESION . )
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 250
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 150

state 236

    (39) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R . SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    )               reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    ,               reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    ]               reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    to              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    do              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 251

state 237

    (40) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R . SEM_PENDING_LOGIC_OP
    (123) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    and             reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    )               reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    ,               reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    ]               reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    to              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)
    do              reduce using rule 123 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 252

state 238

    (42) EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)


state 239

    (43) EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)


state 240

    (44) EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)


state 241

    (45) EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)


state 242

    (47) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO . SEM_PENDING_EXPA_OP
    (50) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (119) SEM_PENDING_EXPA_OP -> .
    (120) SEM_PENDING_TERMINO_OP -> .

    >               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    <               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    equals          reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    not_equals      reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    +               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    ;               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    and             reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    or              reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    )               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    ,               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    ]               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    to              reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    do              reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    *               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_EXPA_OP            shift and go to state 253
    SEM_PENDING_TERMINO_OP         shift and go to state 156

state 243

    (48) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO . SEM_PENDING_EXPA_OP
    (50) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (119) SEM_PENDING_EXPA_OP -> .
    (120) SEM_PENDING_TERMINO_OP -> .

    >               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    <               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    equals          reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    not_equals      reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    +               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    ;               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    and             reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    or              reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    )               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    ,               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    ]               reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    to              reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    do              reduce using rule 119 (SEM_PENDING_EXPA_OP -> .)
    *               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_EXPA_OP            shift and go to state 254
    SEM_PENDING_TERMINO_OP         shift and go to state 156

state 244

    (50) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR . SEM_PENDING_TERMINO_OP
    (120) SEM_PENDING_TERMINO_OP -> .

    *               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    >               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    <               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    equals          reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    not_equals      reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    +               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    minus           reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    ;               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    and             reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    or              reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    )               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    ,               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    ]               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    to              reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    do              reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_TERMINO_OP         shift and go to state 255

state 245

    (51) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR . SEM_PENDING_TERMINO_OP
    (120) SEM_PENDING_TERMINO_OP -> .

    *               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    >               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    <               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    equals          reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    not_equals      reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    +               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    minus           reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    ;               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    and             reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    or              reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    )               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    ,               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    ]               reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    to              reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)
    do              reduce using rule 120 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_TERMINO_OP         shift and go to state 256

state 246

    (64) FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .

    *               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    /               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    >               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    <               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    equals          reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    not_equals      reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    +               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    minus           reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    ;               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    and             reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    or              reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    )               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    ,               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    ]               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    to              reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    do              reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)


state 247

    (73) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then . BLOQUE SEM_FILL_GOTOF
    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then . BLOQUE else BLOQUE SEM_FILL_GOTOF
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 257

state 248

    (75) WHILE -> while ( EXPRESION ) do BLOQUE .

    return          reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    }               reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    if              reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    while           reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    for             reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    id              reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    read            reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    write           reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    point           reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    circle          reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    penup           reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    pendown         reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    color           reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    size            reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)
    clear           reduce using rule 75 (WHILE -> while ( EXPRESION ) do BLOQUE .)


state 249

    (76) FOR -> for ASIGNACION to EXPRESION do BLOQUE .

    return          reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    }               reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    if              reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    while           reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    for             reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    id              reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    read            reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    write           reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    point           reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    circle          reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    penup           reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    pendown         reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    color           reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    size            reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)
    clear           reduce using rule 76 (FOR -> for ASIGNACION to EXPRESION do BLOQUE .)


state 250

    (93) POINT -> point ( EXPRESION , EXPRESION ) .

    ;               reduce using rule 93 (POINT -> point ( EXPRESION , EXPRESION ) .)


state 251

    (39) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .

    ;               reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    and             reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    or              reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    )               reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    ,               reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    ]               reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    to              reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    do              reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)


state 252

    (40) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .

    ;               reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    and             reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    or              reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    )               reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    ,               reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    ]               reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    to              reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    do              reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)


state 253

    (47) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .

    >               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    <               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    equals          reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    not_equals      reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    +               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    minus           reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    ;               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    and             reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    or              reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    )               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    ,               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    ]               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    to              reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    do              reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)


state 254

    (48) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .

    >               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    <               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    equals          reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    not_equals      reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    +               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    minus           reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    ;               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    and             reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    or              reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    )               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    ,               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    ]               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    to              reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    do              reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)


state 255

    (50) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .

    *               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    /               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    >               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    <               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    equals          reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    not_equals      reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    +               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    minus           reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    ;               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    and             reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    or              reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    )               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    ,               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    ]               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    to              reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    do              reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)


state 256

    (51) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .

    *               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    /               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    >               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    <               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    equals          reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    not_equals      reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    +               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    minus           reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    ;               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    and             reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    or              reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    )               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    ,               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    ]               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    to              reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    do              reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)


state 257

    (73) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE . SEM_FILL_GOTOF
    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE . else BLOQUE SEM_FILL_GOTOF
    (118) SEM_FILL_GOTOF -> .

    else            shift and go to state 259
    return          reduce using rule 118 (SEM_FILL_GOTOF -> .)
    }               reduce using rule 118 (SEM_FILL_GOTOF -> .)
    if              reduce using rule 118 (SEM_FILL_GOTOF -> .)
    while           reduce using rule 118 (SEM_FILL_GOTOF -> .)
    for             reduce using rule 118 (SEM_FILL_GOTOF -> .)
    id              reduce using rule 118 (SEM_FILL_GOTOF -> .)
    read            reduce using rule 118 (SEM_FILL_GOTOF -> .)
    write           reduce using rule 118 (SEM_FILL_GOTOF -> .)
    point           reduce using rule 118 (SEM_FILL_GOTOF -> .)
    circle          reduce using rule 118 (SEM_FILL_GOTOF -> .)
    penup           reduce using rule 118 (SEM_FILL_GOTOF -> .)
    pendown         reduce using rule 118 (SEM_FILL_GOTOF -> .)
    color           reduce using rule 118 (SEM_FILL_GOTOF -> .)
    size            reduce using rule 118 (SEM_FILL_GOTOF -> .)
    clear           reduce using rule 118 (SEM_FILL_GOTOF -> .)

    SEM_FILL_GOTOF                 shift and go to state 258

state 258

    (73) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .

    return          reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    }               reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    if              reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    while           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    for             reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    id              reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    read            reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    write           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    point           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    circle          reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    penup           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    pendown         reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    color           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    size            reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)
    clear           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTOF .)


state 259

    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else . BLOQUE SEM_FILL_GOTOF
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 52

    BLOQUE                         shift and go to state 260

state 260

    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE . SEM_FILL_GOTOF
    (118) SEM_FILL_GOTOF -> .

    return          reduce using rule 118 (SEM_FILL_GOTOF -> .)
    }               reduce using rule 118 (SEM_FILL_GOTOF -> .)
    if              reduce using rule 118 (SEM_FILL_GOTOF -> .)
    while           reduce using rule 118 (SEM_FILL_GOTOF -> .)
    for             reduce using rule 118 (SEM_FILL_GOTOF -> .)
    id              reduce using rule 118 (SEM_FILL_GOTOF -> .)
    read            reduce using rule 118 (SEM_FILL_GOTOF -> .)
    write           reduce using rule 118 (SEM_FILL_GOTOF -> .)
    point           reduce using rule 118 (SEM_FILL_GOTOF -> .)
    circle          reduce using rule 118 (SEM_FILL_GOTOF -> .)
    penup           reduce using rule 118 (SEM_FILL_GOTOF -> .)
    pendown         reduce using rule 118 (SEM_FILL_GOTOF -> .)
    color           reduce using rule 118 (SEM_FILL_GOTOF -> .)
    size            reduce using rule 118 (SEM_FILL_GOTOF -> .)
    clear           reduce using rule 118 (SEM_FILL_GOTOF -> .)

    SEM_FILL_GOTOF                 shift and go to state 261

state 261

    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .

    return          reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    }               reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    if              reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    while           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    for             reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    id              reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    read            reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    write           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    point           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    circle          reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    penup           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    pendown         reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    color           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    size            reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)
    clear           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else BLOQUE SEM_FILL_GOTOF .)

