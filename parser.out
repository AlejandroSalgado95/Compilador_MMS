Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    global

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
Rule 2     PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL
Rule 3     PROGRAMA_OPTS -> DEC_V FUNCS
Rule 4     PROGRAMA_OPTS -> DEC_V
Rule 5     PROGRAMA_OPTS -> FUNCS
Rule 6     PRINCIPAL -> SEM_FILL_MAIN_GOTO SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
Rule 7     DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ;
Rule 8     DEC_V -> var TIPO_SIMPLE : LISTA_VAR ;
Rule 9     LISTA_VAR -> LISTA_VAR , VARIABLE_FIX
Rule 10    LISTA_VAR -> VARIABLE_FIX
Rule 11    TIPO_SIMPLE -> int
Rule 12    TIPO_SIMPLE -> float
Rule 13    TIPO_SIMPLE -> char
Rule 14    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 15    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 16    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 17    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 18    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 19    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 20    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 21    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 22    FUNC_TYPES -> char
Rule 23    FUNC_TYPES -> float
Rule 24    FUNC_TYPES -> int
Rule 25    FUNC_TYPES -> void
Rule 26    PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME
Rule 27    PARAMS -> TIPO_SIMPLE PARAM_NAME
Rule 28    PARAM_NAME -> id
Rule 29    VARIABLE_FIX -> id [ cte_i ]
Rule 30    VARIABLE_FIX -> id
Rule 31    VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
Rule 32    VARIABLE -> id
Rule 33    SEM_ID_FOR_ARRAY -> id
Rule 34    SEM_CHECK_ARRAY -> <empty>
Rule 35    BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
Rule 36    BLOQUE -> { LOOP_ESTATUTO }
Rule 37    BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
Rule 38    BLOQUE -> { }
Rule 39    LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO
Rule 40    LOOP_ESTATUTO -> ESTATUTO
Rule 41    EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
Rule 42    EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
Rule 43    EXPRESION -> EXP_R
Rule 44    EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
Rule 45    EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
Rule 46    EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
Rule 47    EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
Rule 48    EXP_R -> EXP_A
Rule 49    EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
Rule 50    EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
Rule 51    EXP_A -> TERMINO
Rule 52    TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
Rule 53    TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
Rule 54    TERMINO -> FACTOR
Rule 55    ESTATUTO -> ASIGNACION ;
Rule 56    ESTATUTO -> CONDICION
Rule 57    ESTATUTO -> WHILE
Rule 58    ESTATUTO -> FOR
Rule 59    ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ;
Rule 60    ESTATUTO -> LECTURA ;
Rule 61    ESTATUTO -> ESCRITURA ;
Rule 62    ESTATUTO -> LLAMADA_BI ;
Rule 63    FACTOR -> LLAMADA
Rule 64    FACTOR -> CTE
Rule 65    FACTOR -> VARIABLE
Rule 66    FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
Rule 67    CTE -> cte_i
Rule 68    CTE -> cte_f
Rule 69    CTE -> cte_c
Rule 70    CTE -> null
Rule 71    LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
Rule 72    LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
Rule 73    LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION SEM_VERIFY_PARAM
Rule 74    LLAMADA_OPTS -> EXPRESION SEM_VERIFY_PARAM
Rule 75    ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
Rule 76    CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
Rule 77    CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
Rule 78    WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
Rule 79    FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
Rule 80    LECTURA -> read ( LECTURA_OPTS )
Rule 81    LECTURA_OPTS -> LECTURA_OPTS , VARIABLE SEM_ADD_READ
Rule 82    LECTURA_OPTS -> VARIABLE SEM_ADD_READ
Rule 83    ESCRITURA -> write ( ESCRITURA_OPTS )
Rule 84    ESCRITURA_OPTS -> ESCRITURA_OPTS , SEM_ADD_PRINT_CTE_S
Rule 85    ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION SEM_ADD_PRINT
Rule 86    ESCRITURA_OPTS -> SEM_ADD_PRINT_CTE_S
Rule 87    ESCRITURA_OPTS -> EXPRESION SEM_ADD_PRINT
Rule 88    LLAMADA_BI -> POINT
Rule 89    LLAMADA_BI -> CIRCLE
Rule 90    LLAMADA_BI -> PENUP
Rule 91    LLAMADA_BI -> PENDOWN
Rule 92    LLAMADA_BI -> COLOR
Rule 93    LLAMADA_BI -> SIZE
Rule 94    LLAMADA_BI -> CLEAR
Rule 95    LLAMADA_BI -> LINE
Rule 96    LLAMADA_BI -> ARC
Rule 97    CLEAR -> clear ( ) DO_CLEAR
Rule 98    POINT -> point ( EXPRESION , EXPRESION ) DRAW_POINT
Rule 99    CIRCLE -> circle ( EXPRESION ) DRAW_CIRCLE
Rule 100   LINE -> line ( EXPRESION , EXPRESION , EXPRESION , EXPRESION ) DRAW_LINE
Rule 101   ARC -> arc ( EXPRESION , EXPRESION ) DRAW_ARC
Rule 102   PENUP -> penup ( ) DO_PENUP
Rule 103   PENDOWN -> pendown ( ) DO_PENDOWN
Rule 104   COLOR -> color ( DO_COLOR )
Rule 105   SIZE -> size ( EXPRESION ) DO_SIZE
Rule 106   SEM_GLOBAL_NAME -> id
Rule 107   SEM_MAIN_NAME -> main
Rule 108   SEM_FUNC_NAME -> id
Rule 109   SEM_ADD_FUNC -> <empty>
Rule 110   SEM_ADD_GLOBAL_VARIABLES -> <empty>
Rule 111   SEM_ADD_PLUS -> <empty>
Rule 112   SEM_ADD_MINUS -> <empty>
Rule 113   SEM_ADD_TIMES -> <empty>
Rule 114   SEM_ADD_DIVISION -> <empty>
Rule 115   SEM_ADD_EQUALS -> <empty>
Rule 116   SEM_ADD_FONDO_FALSO -> <empty>
Rule 117   SEM_REMOVE_FONDO_FALSO -> <empty>
Rule 118   SEM_ADD_GREATER_THAN -> <empty>
Rule 119   SEM_ADD_LESS_THAN -> <empty>
Rule 120   SEM_ADD_EQUALS_TO -> <empty>
Rule 121   SEM_ADD_NOT_EQUALS_TO -> <empty>
Rule 122   SEM_ADD_AND -> <empty>
Rule 123   SEM_ADD_OR -> <empty>
Rule 124   SEM_ADD_GOTOF -> <empty>
Rule 125   SEM_FILL_GOTO_ANYKIND -> <empty>
Rule 126   SEM_FILL_MAIN_GOTO -> <empty>
Rule 127   SEM_ADD_GOTO_SIMPLE -> <empty>
Rule 128   SEM_ADD_COND_INDEX -> <empty>
Rule 129   SEM_FILL_GOTO_COND_INDEX -> <empty>
Rule 130   SEM_ADD_GOTOV -> <empty>
Rule 131   SEM_ADD_GOTO_MAIN -> <empty>
Rule 132   SEM_ENDFUNC -> <empty>
Rule 133   SEM_VERIFY_FUNC_CALL -> id
Rule 134   SEM_VERIFY_PARAM -> <empty>
Rule 135   SEM_RESET_PARAM_COUNT -> <empty>
Rule 136   SEM_ADD_GOSUB -> <empty>
Rule 137   SEM_VERIFY_RETURN_FUNC -> <empty>
Rule 138   SEM_MUST_BE_VOID_CALL -> <empty>
Rule 139   SEM_ADD_PRINT -> <empty>
Rule 140   SEM_ADD_PRINT_CTE_S -> cte_s
Rule 141   SEM_ADD_READ -> <empty>
Rule 142   SEM_PENDING_EXPA_OP -> <empty>
Rule 143   SEM_PENDING_TERMINO_OP -> <empty>
Rule 144   SEM_PENDING_ASSIGNATION_OP -> <empty>
Rule 145   SEM_PENDING_REL_OP -> <empty>
Rule 146   SEM_PENDING_LOGIC_OP -> <empty>
Rule 147   DRAW_POINT -> <empty>
Rule 148   DRAW_CIRCLE -> <empty>
Rule 149   DRAW_LINE -> <empty>
Rule 150   DRAW_ARC -> <empty>
Rule 151   DO_PENUP -> <empty>
Rule 152   DO_PENDOWN -> <empty>
Rule 153   DO_COLOR -> cte_s
Rule 154   DO_CLEAR -> <empty>
Rule 155   DO_SIZE -> <empty>

Terminals, with rules where they appear

(                    : 6 14 15 16 17 18 19 20 21 66 71 72 76 77 78 80 83 97 98 99 100 101 102 103 104 105
)                    : 6 14 15 16 17 18 19 20 21 66 71 72 76 77 78 80 83 97 98 99 100 101 102 103 104 105
*                    : 52
+                    : 49
,                    : 9 26 73 81 84 85 98 100 100 100 101
/                    : 53 59
:                    : 7 8
;                    : 1 2 7 8 35 37 55 59 60 61 62
<                    : 45
=                    : 75
>                    : 44
[                    : 29 31
]                    : 29 31
and                  : 41
arc                  : 101
char                 : 13 22
circle               : 99
clear                : 97
color                : 104
cte_c                : 69
cte_f                : 68
cte_i                : 29 67
cte_s                : 140 153
do                   : 78 79
else                 : 77
equals               : 46
error                : 
float                : 12 23
for                  : 79
global               : 
id                   : 28 29 30 32 33 106 108 133
if                   : 76 77
int                  : 11 24
line                 : 100
main                 : 107
minus                : 50
module               : 14 15 16 17 18 19 20 21
not_equals           : 47
null                 : 70
or                   : 42
pendown              : 103
penup                : 102
point                : 98
program              : 1 2
read                 : 80
return               : 35 37
size                 : 105
then                 : 76 77
to                   : 79
var                  : 7 8
void                 : 25
while                : 78
write                : 83
{                    : 35 36 37 38
}                    : 35 36 37 38

Nonterminals, with rules where they appear

ARC                  : 96
ASIGNACION           : 55 79
BLOQUE               : 6 14 15 16 17 18 19 20 21 76 77 77 78 79
CIRCLE               : 89
CLEAR                : 94
COLOR                : 92
CONDICION            : 56
CTE                  : 64
DEC_V                : 3 4 7 16 17 20 21
DO_CLEAR             : 97
DO_COLOR             : 104
DO_PENDOWN           : 103
DO_PENUP             : 102
DO_SIZE              : 105
DRAW_ARC             : 101
DRAW_CIRCLE          : 99
DRAW_LINE            : 100
DRAW_POINT           : 98
ESCRITURA            : 61
ESCRITURA_OPTS       : 83 84 85
ESTATUTO             : 39 40
EXPRESION            : 31 35 37 41 42 66 73 74 75 76 77 78 79 85 87 98 98 99 100 100 100 100 101 101 105
EXP_A                : 44 44 45 45 46 46 47 47 48 49 50
EXP_R                : 41 42 43
FACTOR               : 52 53 54
FOR                  : 58
FUNCS                : 3 5 14 15 16 17
FUNC_TYPES           : 14 15 16 17 18 19 20 21
LECTURA              : 60
LECTURA_OPTS         : 80 81
LINE                 : 95
LISTA_VAR            : 7 8 9
LLAMADA              : 59 63
LLAMADA_BI           : 62
LLAMADA_OPTS         : 71 73
LOOP_ESTATUTO        : 35 36 39
PARAMS               : 15 16 19 20 26
PARAM_NAME           : 26 27
PENDOWN              : 91
PENUP                : 90
POINT                : 88
PRINCIPAL            : 1 2
PROGRAMA             : 0
PROGRAMA_OPTS        : 1
SEM_ADD_AND          : 41
SEM_ADD_COND_INDEX   : 78 79
SEM_ADD_DIVISION     : 53
SEM_ADD_EQUALS       : 75
SEM_ADD_EQUALS_TO    : 46
SEM_ADD_FONDO_FALSO  : 66 71
SEM_ADD_FUNC         : 1 2 6 14 15 16 17 18 19 20 21
SEM_ADD_GLOBAL_VARIABLES : 6 14 15 16 17 18 19 20 21
SEM_ADD_GOSUB        : 71 72
SEM_ADD_GOTOF        : 76 77 78
SEM_ADD_GOTOV        : 79
SEM_ADD_GOTO_MAIN    : 1 2
SEM_ADD_GOTO_SIMPLE  : 77 78 79
SEM_ADD_GREATER_THAN : 44
SEM_ADD_LESS_THAN    : 45
SEM_ADD_MINUS        : 50
SEM_ADD_NOT_EQUALS_TO : 47
SEM_ADD_OR           : 42
SEM_ADD_PLUS         : 49
SEM_ADD_PRINT        : 85 87
SEM_ADD_PRINT_CTE_S  : 84 86
SEM_ADD_READ         : 81 82
SEM_ADD_TIMES        : 52
SEM_CHECK_ARRAY      : 31
SEM_ENDFUNC          : 14 15 16 17 18 19 20 21
SEM_FILL_GOTO_ANYKIND : 76 77
SEM_FILL_GOTO_COND_INDEX : 78 79
SEM_FILL_MAIN_GOTO   : 6
SEM_FUNC_NAME        : 14 15 16 17 18 19 20 21
SEM_GLOBAL_NAME      : 1 2
SEM_ID_FOR_ARRAY     : 31
SEM_MAIN_NAME        : 6
SEM_MUST_BE_VOID_CALL : 59
SEM_PENDING_ASSIGNATION_OP : 75
SEM_PENDING_EXPA_OP  : 49 49 50 50
SEM_PENDING_LOGIC_OP : 41 41 42 42
SEM_PENDING_REL_OP   : 44 45 46 47
SEM_PENDING_TERMINO_OP : 52 52 53 53
SEM_REMOVE_FONDO_FALSO : 66 71
SEM_RESET_PARAM_COUNT : 71
SEM_VERIFY_FUNC_CALL : 71 72
SEM_VERIFY_PARAM     : 73 74
SEM_VERIFY_RETURN_FUNC : 35 37
SIZE                 : 93
TERMINO              : 49 50 51 52 53
TIPO_SIMPLE          : 7 8 26 27
VARIABLE             : 65 75 81 82
VARIABLE_FIX         : 9 10
WHILE                : 57

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> . SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL
    (131) SEM_ADD_GOTO_MAIN -> .

    program         reduce using rule 131 (SEM_ADD_GOTO_MAIN -> .)

    PROGRAMA                       shift and go to state 1
    SEM_ADD_GOTO_MAIN              shift and go to state 2

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN . program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN . program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL

    program         shift and go to state 3


state 3

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program . SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN program . SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL
    (106) SEM_GLOBAL_NAME -> . id

    id              shift and go to state 5

    SEM_GLOBAL_NAME                shift and go to state 4

state 4

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME . SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME . SEM_ADD_FUNC ; PRINCIPAL
    (109) SEM_ADD_FUNC -> .

    ;               reduce using rule 109 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 6

state 5

    (106) SEM_GLOBAL_NAME -> id .

    ;               reduce using rule 106 (SEM_GLOBAL_NAME -> id .)


state 6

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC . ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC . ; PRINCIPAL

    ;               shift and go to state 7


state 7

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; . PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; . PRINCIPAL
    (3) PROGRAMA_OPTS -> . DEC_V FUNCS
    (4) PROGRAMA_OPTS -> . DEC_V
    (5) PROGRAMA_OPTS -> . FUNCS
    (6) PRINCIPAL -> . SEM_FILL_MAIN_GOTO SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;
    (14) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (18) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (126) SEM_FILL_MAIN_GOTO -> .
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    var             shift and go to state 13
    main            reduce using rule 126 (SEM_FILL_MAIN_GOTO -> .)
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    PROGRAMA_OPTS                  shift and go to state 8
    PRINCIPAL                      shift and go to state 9
    DEC_V                          shift and go to state 10
    FUNCS                          shift and go to state 11
    SEM_FILL_MAIN_GOTO             shift and go to state 12
    FUNC_TYPES                     shift and go to state 14

state 8

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS . PRINCIPAL
    (6) PRINCIPAL -> . SEM_FILL_MAIN_GOTO SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (126) SEM_FILL_MAIN_GOTO -> .

    main            reduce using rule 126 (SEM_FILL_MAIN_GOTO -> .)

    PRINCIPAL                      shift and go to state 19
    SEM_FILL_MAIN_GOTO             shift and go to state 12

state 9

    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL .

    $end            reduce using rule 2 (PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL .)


state 10

    (3) PROGRAMA_OPTS -> DEC_V . FUNCS
    (4) PROGRAMA_OPTS -> DEC_V .
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (14) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (18) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    main            reduce using rule 4 (PROGRAMA_OPTS -> DEC_V .)
    var             shift and go to state 21
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    FUNCS                          shift and go to state 20
    FUNC_TYPES                     shift and go to state 14

state 11

    (5) PROGRAMA_OPTS -> FUNCS .
    (14) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    main            reduce using rule 5 (PROGRAMA_OPTS -> FUNCS .)
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    FUNC_TYPES                     shift and go to state 22

state 12

    (6) PRINCIPAL -> SEM_FILL_MAIN_GOTO . SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (107) SEM_MAIN_NAME -> . main

    main            shift and go to state 24

    SEM_MAIN_NAME                  shift and go to state 23

state 13

    (8) DEC_V -> var . TIPO_SIMPLE : LISTA_VAR ;
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    int             shift and go to state 26
    float           shift and go to state 27
    char            shift and go to state 28

    TIPO_SIMPLE                    shift and go to state 25

state 14

    (18) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC

    module          shift and go to state 29


state 15

    (22) FUNC_TYPES -> char .

    module          reduce using rule 22 (FUNC_TYPES -> char .)


state 16

    (23) FUNC_TYPES -> float .

    module          reduce using rule 23 (FUNC_TYPES -> float .)


state 17

    (24) FUNC_TYPES -> int .

    module          reduce using rule 24 (FUNC_TYPES -> int .)


state 18

    (25) FUNC_TYPES -> void .

    module          reduce using rule 25 (FUNC_TYPES -> void .)


state 19

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL .

    $end            reduce using rule 1 (PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL .)


state 20

    (3) PROGRAMA_OPTS -> DEC_V FUNCS .
    (14) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    main            reduce using rule 3 (PROGRAMA_OPTS -> DEC_V FUNCS .)
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    FUNC_TYPES                     shift and go to state 22

state 21

    (7) DEC_V -> DEC_V var . TIPO_SIMPLE : LISTA_VAR ;
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    int             shift and go to state 26
    float           shift and go to state 27
    char            shift and go to state 28

    TIPO_SIMPLE                    shift and go to state 30

state 22

    (14) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC

    module          shift and go to state 31


state 23

    (6) PRINCIPAL -> SEM_FILL_MAIN_GOTO SEM_MAIN_NAME . SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (109) SEM_ADD_FUNC -> .

    (               reduce using rule 109 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 32

state 24

    (107) SEM_MAIN_NAME -> main .

    (               reduce using rule 107 (SEM_MAIN_NAME -> main .)


state 25

    (8) DEC_V -> var TIPO_SIMPLE . : LISTA_VAR ;

    :               shift and go to state 33


state 26

    (11) TIPO_SIMPLE -> int .

    :               reduce using rule 11 (TIPO_SIMPLE -> int .)
    id              reduce using rule 11 (TIPO_SIMPLE -> int .)


state 27

    (12) TIPO_SIMPLE -> float .

    :               reduce using rule 12 (TIPO_SIMPLE -> float .)
    id              reduce using rule 12 (TIPO_SIMPLE -> float .)


state 28

    (13) TIPO_SIMPLE -> char .

    :               reduce using rule 13 (TIPO_SIMPLE -> char .)
    id              reduce using rule 13 (TIPO_SIMPLE -> char .)


state 29

    (18) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (108) SEM_FUNC_NAME -> . id

    id              shift and go to state 35

    SEM_FUNC_NAME                  shift and go to state 34

state 30

    (7) DEC_V -> DEC_V var TIPO_SIMPLE . : LISTA_VAR ;

    :               shift and go to state 36


state 31

    (14) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (108) SEM_FUNC_NAME -> . id

    id              shift and go to state 35

    SEM_FUNC_NAME                  shift and go to state 37

state 32

    (6) PRINCIPAL -> SEM_FILL_MAIN_GOTO SEM_MAIN_NAME SEM_ADD_FUNC . ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE

    (               shift and go to state 38


state 33

    (8) DEC_V -> var TIPO_SIMPLE : . LISTA_VAR ;
    (9) LISTA_VAR -> . LISTA_VAR , VARIABLE_FIX
    (10) LISTA_VAR -> . VARIABLE_FIX
    (29) VARIABLE_FIX -> . id [ cte_i ]
    (30) VARIABLE_FIX -> . id

    id              shift and go to state 41

    LISTA_VAR                      shift and go to state 39
    VARIABLE_FIX                   shift and go to state 40

state 34

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (109) SEM_ADD_FUNC -> .

    (               reduce using rule 109 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 42

state 35

    (108) SEM_FUNC_NAME -> id .

    (               reduce using rule 108 (SEM_FUNC_NAME -> id .)


state 36

    (7) DEC_V -> DEC_V var TIPO_SIMPLE : . LISTA_VAR ;
    (9) LISTA_VAR -> . LISTA_VAR , VARIABLE_FIX
    (10) LISTA_VAR -> . VARIABLE_FIX
    (29) VARIABLE_FIX -> . id [ cte_i ]
    (30) VARIABLE_FIX -> . id

    id              shift and go to state 41

    LISTA_VAR                      shift and go to state 43
    VARIABLE_FIX                   shift and go to state 40

state 37

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (109) SEM_ADD_FUNC -> .

    (               reduce using rule 109 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 44

state 38

    (6) PRINCIPAL -> SEM_FILL_MAIN_GOTO SEM_MAIN_NAME SEM_ADD_FUNC ( . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE

    )               shift and go to state 45


state 39

    (8) DEC_V -> var TIPO_SIMPLE : LISTA_VAR . ;
    (9) LISTA_VAR -> LISTA_VAR . , VARIABLE_FIX

    ;               shift and go to state 46
    ,               shift and go to state 47


state 40

    (10) LISTA_VAR -> VARIABLE_FIX .

    ;               reduce using rule 10 (LISTA_VAR -> VARIABLE_FIX .)
    ,               reduce using rule 10 (LISTA_VAR -> VARIABLE_FIX .)


state 41

    (29) VARIABLE_FIX -> id . [ cte_i ]
    (30) VARIABLE_FIX -> id .

    [               shift and go to state 48
    ;               reduce using rule 30 (VARIABLE_FIX -> id .)
    ,               reduce using rule 30 (VARIABLE_FIX -> id .)


state 42

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC

    (               shift and go to state 49


state 43

    (7) DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR . ;
    (9) LISTA_VAR -> LISTA_VAR . , VARIABLE_FIX

    ;               shift and go to state 50
    ,               shift and go to state 47


state 44

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC

    (               shift and go to state 51


state 45

    (6) PRINCIPAL -> SEM_FILL_MAIN_GOTO SEM_MAIN_NAME SEM_ADD_FUNC ( ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (110) SEM_ADD_GLOBAL_VARIABLES -> .

    {               reduce using rule 110 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 52

state 46

    (8) DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .

    var             reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    char            reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    float           reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    int             reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    void            reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    main            reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    {               reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)


state 47

    (9) LISTA_VAR -> LISTA_VAR , . VARIABLE_FIX
    (29) VARIABLE_FIX -> . id [ cte_i ]
    (30) VARIABLE_FIX -> . id

    id              shift and go to state 41

    VARIABLE_FIX                   shift and go to state 53

state 48

    (29) VARIABLE_FIX -> id [ . cte_i ]

    cte_i           shift and go to state 54


state 49

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (26) PARAMS -> . PARAMS , TIPO_SIMPLE PARAM_NAME
    (27) PARAMS -> . TIPO_SIMPLE PARAM_NAME
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    )               shift and go to state 55
    int             shift and go to state 26
    float           shift and go to state 27
    char            shift and go to state 28

    PARAMS                         shift and go to state 56
    TIPO_SIMPLE                    shift and go to state 57

state 50

    (7) DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .

    var             reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    char            reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    float           reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    int             reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    void            reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    main            reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    {               reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)


state 51

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (26) PARAMS -> . PARAMS , TIPO_SIMPLE PARAM_NAME
    (27) PARAMS -> . TIPO_SIMPLE PARAM_NAME
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    )               shift and go to state 58
    int             shift and go to state 26
    float           shift and go to state 27
    char            shift and go to state 28

    PARAMS                         shift and go to state 59
    TIPO_SIMPLE                    shift and go to state 57

state 52

    (6) PRINCIPAL -> SEM_FILL_MAIN_GOTO SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 60

state 53

    (9) LISTA_VAR -> LISTA_VAR , VARIABLE_FIX .

    ;               reduce using rule 9 (LISTA_VAR -> LISTA_VAR , VARIABLE_FIX .)
    ,               reduce using rule 9 (LISTA_VAR -> LISTA_VAR , VARIABLE_FIX .)


state 54

    (29) VARIABLE_FIX -> id [ cte_i . ]

    ]               shift and go to state 62


state 55

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (110) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 110 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 13

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 63
    DEC_V                          shift and go to state 64

state 56

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (26) PARAMS -> PARAMS . , TIPO_SIMPLE PARAM_NAME

    )               shift and go to state 65
    ,               shift and go to state 66


state 57

    (27) PARAMS -> TIPO_SIMPLE . PARAM_NAME
    (28) PARAM_NAME -> . id

    id              shift and go to state 68

    PARAM_NAME                     shift and go to state 67

state 58

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (110) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 110 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 13

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 69
    DEC_V                          shift and go to state 70

state 59

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (26) PARAMS -> PARAMS . , TIPO_SIMPLE PARAM_NAME

    )               shift and go to state 71
    ,               shift and go to state 66


state 60

    (6) PRINCIPAL -> SEM_FILL_MAIN_GOTO SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .

    $end            reduce using rule 6 (PRINCIPAL -> SEM_FILL_MAIN_GOTO SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)


state 61

    (35) BLOQUE -> { . LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> { . LOOP_ESTATUTO }
    (37) BLOQUE -> { . return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> { . }
    (39) LOOP_ESTATUTO -> . LOOP_ESTATUTO ESTATUTO
    (40) LOOP_ESTATUTO -> . ESTATUTO
    (55) ESTATUTO -> . ASIGNACION ;
    (56) ESTATUTO -> . CONDICION
    (57) ESTATUTO -> . WHILE
    (58) ESTATUTO -> . FOR
    (59) ESTATUTO -> . / SEM_MUST_BE_VOID_CALL LLAMADA ;
    (60) ESTATUTO -> . LECTURA ;
    (61) ESTATUTO -> . ESCRITURA ;
    (62) ESTATUTO -> . LLAMADA_BI ;
    (75) ASIGNACION -> . VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (76) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (77) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (78) WHILE -> . while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (79) FOR -> . for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (80) LECTURA -> . read ( LECTURA_OPTS )
    (83) ESCRITURA -> . write ( ESCRITURA_OPTS )
    (88) LLAMADA_BI -> . POINT
    (89) LLAMADA_BI -> . CIRCLE
    (90) LLAMADA_BI -> . PENUP
    (91) LLAMADA_BI -> . PENDOWN
    (92) LLAMADA_BI -> . COLOR
    (93) LLAMADA_BI -> . SIZE
    (94) LLAMADA_BI -> . CLEAR
    (95) LLAMADA_BI -> . LINE
    (96) LLAMADA_BI -> . ARC
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (98) POINT -> . point ( EXPRESION , EXPRESION ) DRAW_POINT
    (99) CIRCLE -> . circle ( EXPRESION ) DRAW_CIRCLE
    (102) PENUP -> . penup ( ) DO_PENUP
    (103) PENDOWN -> . pendown ( ) DO_PENDOWN
    (104) COLOR -> . color ( DO_COLOR )
    (105) SIZE -> . size ( EXPRESION ) DO_SIZE
    (97) CLEAR -> . clear ( ) DO_CLEAR
    (100) LINE -> . line ( EXPRESION , EXPRESION , EXPRESION , EXPRESION ) DRAW_LINE
    (101) ARC -> . arc ( EXPRESION , EXPRESION ) DRAW_ARC
    (33) SEM_ID_FOR_ARRAY -> . id

    return          shift and go to state 73
    }               shift and go to state 74
    /               shift and go to state 80
    if              shift and go to state 85
    while           shift and go to state 86
    for             shift and go to state 87
    read            shift and go to state 88
    write           shift and go to state 89
    id              shift and go to state 100
    point           shift and go to state 101
    circle          shift and go to state 102
    penup           shift and go to state 103
    pendown         shift and go to state 104
    color           shift and go to state 105
    size            shift and go to state 106
    clear           shift and go to state 107
    line            shift and go to state 108
    arc             shift and go to state 109

    LOOP_ESTATUTO                  shift and go to state 72
    ESTATUTO                       shift and go to state 75
    ASIGNACION                     shift and go to state 76
    CONDICION                      shift and go to state 77
    WHILE                          shift and go to state 78
    FOR                            shift and go to state 79
    LECTURA                        shift and go to state 81
    ESCRITURA                      shift and go to state 82
    LLAMADA_BI                     shift and go to state 83
    VARIABLE                       shift and go to state 84
    POINT                          shift and go to state 90
    CIRCLE                         shift and go to state 91
    PENUP                          shift and go to state 92
    PENDOWN                        shift and go to state 93
    COLOR                          shift and go to state 94
    SIZE                           shift and go to state 95
    CLEAR                          shift and go to state 96
    LINE                           shift and go to state 97
    ARC                            shift and go to state 98
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 62

    (29) VARIABLE_FIX -> id [ cte_i ] .

    ;               reduce using rule 29 (VARIABLE_FIX -> id [ cte_i ] .)
    ,               reduce using rule 29 (VARIABLE_FIX -> id [ cte_i ] .)


state 63

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 110

state 64

    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (110) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 110 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 111

state 65

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (110) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 110 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 13

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 112
    DEC_V                          shift and go to state 113

state 66

    (26) PARAMS -> PARAMS , . TIPO_SIMPLE PARAM_NAME
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    int             shift and go to state 26
    float           shift and go to state 27
    char            shift and go to state 28

    TIPO_SIMPLE                    shift and go to state 114

state 67

    (27) PARAMS -> TIPO_SIMPLE PARAM_NAME .

    )               reduce using rule 27 (PARAMS -> TIPO_SIMPLE PARAM_NAME .)
    ,               reduce using rule 27 (PARAMS -> TIPO_SIMPLE PARAM_NAME .)


state 68

    (28) PARAM_NAME -> id .

    )               reduce using rule 28 (PARAM_NAME -> id .)
    ,               reduce using rule 28 (PARAM_NAME -> id .)


state 69

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 115

state 70

    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (110) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 110 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 116

state 71

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (110) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 110 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 13

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 117
    DEC_V                          shift and go to state 118

state 72

    (35) BLOQUE -> { LOOP_ESTATUTO . return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> { LOOP_ESTATUTO . }
    (39) LOOP_ESTATUTO -> LOOP_ESTATUTO . ESTATUTO
    (55) ESTATUTO -> . ASIGNACION ;
    (56) ESTATUTO -> . CONDICION
    (57) ESTATUTO -> . WHILE
    (58) ESTATUTO -> . FOR
    (59) ESTATUTO -> . / SEM_MUST_BE_VOID_CALL LLAMADA ;
    (60) ESTATUTO -> . LECTURA ;
    (61) ESTATUTO -> . ESCRITURA ;
    (62) ESTATUTO -> . LLAMADA_BI ;
    (75) ASIGNACION -> . VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (76) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (77) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (78) WHILE -> . while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (79) FOR -> . for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (80) LECTURA -> . read ( LECTURA_OPTS )
    (83) ESCRITURA -> . write ( ESCRITURA_OPTS )
    (88) LLAMADA_BI -> . POINT
    (89) LLAMADA_BI -> . CIRCLE
    (90) LLAMADA_BI -> . PENUP
    (91) LLAMADA_BI -> . PENDOWN
    (92) LLAMADA_BI -> . COLOR
    (93) LLAMADA_BI -> . SIZE
    (94) LLAMADA_BI -> . CLEAR
    (95) LLAMADA_BI -> . LINE
    (96) LLAMADA_BI -> . ARC
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (98) POINT -> . point ( EXPRESION , EXPRESION ) DRAW_POINT
    (99) CIRCLE -> . circle ( EXPRESION ) DRAW_CIRCLE
    (102) PENUP -> . penup ( ) DO_PENUP
    (103) PENDOWN -> . pendown ( ) DO_PENDOWN
    (104) COLOR -> . color ( DO_COLOR )
    (105) SIZE -> . size ( EXPRESION ) DO_SIZE
    (97) CLEAR -> . clear ( ) DO_CLEAR
    (100) LINE -> . line ( EXPRESION , EXPRESION , EXPRESION , EXPRESION ) DRAW_LINE
    (101) ARC -> . arc ( EXPRESION , EXPRESION ) DRAW_ARC
    (33) SEM_ID_FOR_ARRAY -> . id

    return          shift and go to state 119
    }               shift and go to state 120
    /               shift and go to state 80
    if              shift and go to state 85
    while           shift and go to state 86
    for             shift and go to state 87
    read            shift and go to state 88
    write           shift and go to state 89
    id              shift and go to state 100
    point           shift and go to state 101
    circle          shift and go to state 102
    penup           shift and go to state 103
    pendown         shift and go to state 104
    color           shift and go to state 105
    size            shift and go to state 106
    clear           shift and go to state 107
    line            shift and go to state 108
    arc             shift and go to state 109

    ESTATUTO                       shift and go to state 121
    ASIGNACION                     shift and go to state 76
    CONDICION                      shift and go to state 77
    WHILE                          shift and go to state 78
    FOR                            shift and go to state 79
    LECTURA                        shift and go to state 81
    ESCRITURA                      shift and go to state 82
    LLAMADA_BI                     shift and go to state 83
    VARIABLE                       shift and go to state 84
    POINT                          shift and go to state 90
    CIRCLE                         shift and go to state 91
    PENUP                          shift and go to state 92
    PENDOWN                        shift and go to state 93
    COLOR                          shift and go to state 94
    SIZE                           shift and go to state 95
    CLEAR                          shift and go to state 96
    LINE                           shift and go to state 97
    ARC                            shift and go to state 98
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 73

    (37) BLOQUE -> { return . EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 122
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 74

    (38) BLOQUE -> { } .

    $end            reduce using rule 38 (BLOQUE -> { } .)
    char            reduce using rule 38 (BLOQUE -> { } .)
    float           reduce using rule 38 (BLOQUE -> { } .)
    int             reduce using rule 38 (BLOQUE -> { } .)
    void            reduce using rule 38 (BLOQUE -> { } .)
    main            reduce using rule 38 (BLOQUE -> { } .)
    else            reduce using rule 38 (BLOQUE -> { } .)
    return          reduce using rule 38 (BLOQUE -> { } .)
    }               reduce using rule 38 (BLOQUE -> { } .)
    /               reduce using rule 38 (BLOQUE -> { } .)
    if              reduce using rule 38 (BLOQUE -> { } .)
    while           reduce using rule 38 (BLOQUE -> { } .)
    for             reduce using rule 38 (BLOQUE -> { } .)
    read            reduce using rule 38 (BLOQUE -> { } .)
    write           reduce using rule 38 (BLOQUE -> { } .)
    id              reduce using rule 38 (BLOQUE -> { } .)
    point           reduce using rule 38 (BLOQUE -> { } .)
    circle          reduce using rule 38 (BLOQUE -> { } .)
    penup           reduce using rule 38 (BLOQUE -> { } .)
    pendown         reduce using rule 38 (BLOQUE -> { } .)
    color           reduce using rule 38 (BLOQUE -> { } .)
    size            reduce using rule 38 (BLOQUE -> { } .)
    clear           reduce using rule 38 (BLOQUE -> { } .)
    line            reduce using rule 38 (BLOQUE -> { } .)
    arc             reduce using rule 38 (BLOQUE -> { } .)


state 75

    (40) LOOP_ESTATUTO -> ESTATUTO .

    return          reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    }               reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    /               reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    for             reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    read            reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    write           reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    point           reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    circle          reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    penup           reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    pendown         reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    color           reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    size            reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    clear           reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    line            reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)
    arc             reduce using rule 40 (LOOP_ESTATUTO -> ESTATUTO .)


state 76

    (55) ESTATUTO -> ASIGNACION . ;

    ;               shift and go to state 137


state 77

    (56) ESTATUTO -> CONDICION .

    return          reduce using rule 56 (ESTATUTO -> CONDICION .)
    }               reduce using rule 56 (ESTATUTO -> CONDICION .)
    /               reduce using rule 56 (ESTATUTO -> CONDICION .)
    if              reduce using rule 56 (ESTATUTO -> CONDICION .)
    while           reduce using rule 56 (ESTATUTO -> CONDICION .)
    for             reduce using rule 56 (ESTATUTO -> CONDICION .)
    read            reduce using rule 56 (ESTATUTO -> CONDICION .)
    write           reduce using rule 56 (ESTATUTO -> CONDICION .)
    id              reduce using rule 56 (ESTATUTO -> CONDICION .)
    point           reduce using rule 56 (ESTATUTO -> CONDICION .)
    circle          reduce using rule 56 (ESTATUTO -> CONDICION .)
    penup           reduce using rule 56 (ESTATUTO -> CONDICION .)
    pendown         reduce using rule 56 (ESTATUTO -> CONDICION .)
    color           reduce using rule 56 (ESTATUTO -> CONDICION .)
    size            reduce using rule 56 (ESTATUTO -> CONDICION .)
    clear           reduce using rule 56 (ESTATUTO -> CONDICION .)
    line            reduce using rule 56 (ESTATUTO -> CONDICION .)
    arc             reduce using rule 56 (ESTATUTO -> CONDICION .)


state 78

    (57) ESTATUTO -> WHILE .

    return          reduce using rule 57 (ESTATUTO -> WHILE .)
    }               reduce using rule 57 (ESTATUTO -> WHILE .)
    /               reduce using rule 57 (ESTATUTO -> WHILE .)
    if              reduce using rule 57 (ESTATUTO -> WHILE .)
    while           reduce using rule 57 (ESTATUTO -> WHILE .)
    for             reduce using rule 57 (ESTATUTO -> WHILE .)
    read            reduce using rule 57 (ESTATUTO -> WHILE .)
    write           reduce using rule 57 (ESTATUTO -> WHILE .)
    id              reduce using rule 57 (ESTATUTO -> WHILE .)
    point           reduce using rule 57 (ESTATUTO -> WHILE .)
    circle          reduce using rule 57 (ESTATUTO -> WHILE .)
    penup           reduce using rule 57 (ESTATUTO -> WHILE .)
    pendown         reduce using rule 57 (ESTATUTO -> WHILE .)
    color           reduce using rule 57 (ESTATUTO -> WHILE .)
    size            reduce using rule 57 (ESTATUTO -> WHILE .)
    clear           reduce using rule 57 (ESTATUTO -> WHILE .)
    line            reduce using rule 57 (ESTATUTO -> WHILE .)
    arc             reduce using rule 57 (ESTATUTO -> WHILE .)


state 79

    (58) ESTATUTO -> FOR .

    return          reduce using rule 58 (ESTATUTO -> FOR .)
    }               reduce using rule 58 (ESTATUTO -> FOR .)
    /               reduce using rule 58 (ESTATUTO -> FOR .)
    if              reduce using rule 58 (ESTATUTO -> FOR .)
    while           reduce using rule 58 (ESTATUTO -> FOR .)
    for             reduce using rule 58 (ESTATUTO -> FOR .)
    read            reduce using rule 58 (ESTATUTO -> FOR .)
    write           reduce using rule 58 (ESTATUTO -> FOR .)
    id              reduce using rule 58 (ESTATUTO -> FOR .)
    point           reduce using rule 58 (ESTATUTO -> FOR .)
    circle          reduce using rule 58 (ESTATUTO -> FOR .)
    penup           reduce using rule 58 (ESTATUTO -> FOR .)
    pendown         reduce using rule 58 (ESTATUTO -> FOR .)
    color           reduce using rule 58 (ESTATUTO -> FOR .)
    size            reduce using rule 58 (ESTATUTO -> FOR .)
    clear           reduce using rule 58 (ESTATUTO -> FOR .)
    line            reduce using rule 58 (ESTATUTO -> FOR .)
    arc             reduce using rule 58 (ESTATUTO -> FOR .)


state 80

    (59) ESTATUTO -> / . SEM_MUST_BE_VOID_CALL LLAMADA ;
    (138) SEM_MUST_BE_VOID_CALL -> .

    id              reduce using rule 138 (SEM_MUST_BE_VOID_CALL -> .)

    SEM_MUST_BE_VOID_CALL          shift and go to state 138

state 81

    (60) ESTATUTO -> LECTURA . ;

    ;               shift and go to state 139


state 82

    (61) ESTATUTO -> ESCRITURA . ;

    ;               shift and go to state 140


state 83

    (62) ESTATUTO -> LLAMADA_BI . ;

    ;               shift and go to state 141


state 84

    (75) ASIGNACION -> VARIABLE . = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP

    =               shift and go to state 142


state 85

    (76) CONDICION -> if . ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (77) CONDICION -> if . ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND

    (               shift and go to state 143


state 86

    (78) WHILE -> while . SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (128) SEM_ADD_COND_INDEX -> .

    (               reduce using rule 128 (SEM_ADD_COND_INDEX -> .)

    SEM_ADD_COND_INDEX             shift and go to state 144

state 87

    (79) FOR -> for . ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (75) ASIGNACION -> . VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    id              shift and go to state 100

    ASIGNACION                     shift and go to state 145
    VARIABLE                       shift and go to state 84
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 88

    (80) LECTURA -> read . ( LECTURA_OPTS )

    (               shift and go to state 146


state 89

    (83) ESCRITURA -> write . ( ESCRITURA_OPTS )

    (               shift and go to state 147


state 90

    (88) LLAMADA_BI -> POINT .

    ;               reduce using rule 88 (LLAMADA_BI -> POINT .)


state 91

    (89) LLAMADA_BI -> CIRCLE .

    ;               reduce using rule 89 (LLAMADA_BI -> CIRCLE .)


state 92

    (90) LLAMADA_BI -> PENUP .

    ;               reduce using rule 90 (LLAMADA_BI -> PENUP .)


state 93

    (91) LLAMADA_BI -> PENDOWN .

    ;               reduce using rule 91 (LLAMADA_BI -> PENDOWN .)


state 94

    (92) LLAMADA_BI -> COLOR .

    ;               reduce using rule 92 (LLAMADA_BI -> COLOR .)


state 95

    (93) LLAMADA_BI -> SIZE .

    ;               reduce using rule 93 (LLAMADA_BI -> SIZE .)


state 96

    (94) LLAMADA_BI -> CLEAR .

    ;               reduce using rule 94 (LLAMADA_BI -> CLEAR .)


state 97

    (95) LLAMADA_BI -> LINE .

    ;               reduce using rule 95 (LLAMADA_BI -> LINE .)


state 98

    (96) LLAMADA_BI -> ARC .

    ;               reduce using rule 96 (LLAMADA_BI -> ARC .)


state 99

    (31) VARIABLE -> SEM_ID_FOR_ARRAY . [ EXPRESION SEM_CHECK_ARRAY ]

    [               shift and go to state 148


state 100

    (32) VARIABLE -> id .
    (33) SEM_ID_FOR_ARRAY -> id .

    =               reduce using rule 32 (VARIABLE -> id .)
    )               reduce using rule 32 (VARIABLE -> id .)
    ,               reduce using rule 32 (VARIABLE -> id .)
    [               reduce using rule 33 (SEM_ID_FOR_ARRAY -> id .)


state 101

    (98) POINT -> point . ( EXPRESION , EXPRESION ) DRAW_POINT

    (               shift and go to state 149


state 102

    (99) CIRCLE -> circle . ( EXPRESION ) DRAW_CIRCLE

    (               shift and go to state 150


state 103

    (102) PENUP -> penup . ( ) DO_PENUP

    (               shift and go to state 151


state 104

    (103) PENDOWN -> pendown . ( ) DO_PENDOWN

    (               shift and go to state 152


state 105

    (104) COLOR -> color . ( DO_COLOR )

    (               shift and go to state 153


state 106

    (105) SIZE -> size . ( EXPRESION ) DO_SIZE

    (               shift and go to state 154


state 107

    (97) CLEAR -> clear . ( ) DO_CLEAR

    (               shift and go to state 155


state 108

    (100) LINE -> line . ( EXPRESION , EXPRESION , EXPRESION , EXPRESION ) DRAW_LINE

    (               shift and go to state 156


state 109

    (101) ARC -> arc . ( EXPRESION , EXPRESION ) DRAW_ARC

    (               shift and go to state 157


state 110

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (132) SEM_ENDFUNC -> .

    char            reduce using rule 132 (SEM_ENDFUNC -> .)
    float           reduce using rule 132 (SEM_ENDFUNC -> .)
    int             reduce using rule 132 (SEM_ENDFUNC -> .)
    void            reduce using rule 132 (SEM_ENDFUNC -> .)
    main            reduce using rule 132 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 158

state 111

    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 159

state 112

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 160

state 113

    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (110) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 110 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 161

state 114

    (26) PARAMS -> PARAMS , TIPO_SIMPLE . PARAM_NAME
    (28) PARAM_NAME -> . id

    id              shift and go to state 68

    PARAM_NAME                     shift and go to state 162

state 115

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (132) SEM_ENDFUNC -> .

    char            reduce using rule 132 (SEM_ENDFUNC -> .)
    float           reduce using rule 132 (SEM_ENDFUNC -> .)
    int             reduce using rule 132 (SEM_ENDFUNC -> .)
    void            reduce using rule 132 (SEM_ENDFUNC -> .)
    main            reduce using rule 132 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 163

state 116

    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 164

state 117

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 165

state 118

    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (110) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 110 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 166

state 119

    (35) BLOQUE -> { LOOP_ESTATUTO return . EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 167
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 120

    (36) BLOQUE -> { LOOP_ESTATUTO } .

    $end            reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    char            reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    float           reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    int             reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    void            reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    main            reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    else            reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    return          reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    }               reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    /               reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    if              reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    while           reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    for             reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    read            reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    write           reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    id              reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    point           reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    circle          reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    penup           reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    pendown         reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    color           reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    size            reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    clear           reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    line            reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)
    arc             reduce using rule 36 (BLOQUE -> { LOOP_ESTATUTO } .)


state 121

    (39) LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .

    return          reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    }               reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    /               reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    if              reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    while           reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    for             reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    read            reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    write           reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    id              reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    point           reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    circle          reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    penup           reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    pendown         reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    color           reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    size            reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    clear           reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    line            reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    arc             reduce using rule 39 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)


state 122

    (37) BLOQUE -> { return EXPRESION . SEM_VERIFY_RETURN_FUNC ; }
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (137) SEM_VERIFY_RETURN_FUNC -> .
    (146) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 137 (SEM_VERIFY_RETURN_FUNC -> .)
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_VERIFY_RETURN_FUNC         shift and go to state 168
    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 123

    (43) EXPRESION -> EXP_R .

    ;               reduce using rule 43 (EXPRESION -> EXP_R .)
    and             reduce using rule 43 (EXPRESION -> EXP_R .)
    or              reduce using rule 43 (EXPRESION -> EXP_R .)
    )               reduce using rule 43 (EXPRESION -> EXP_R .)
    ,               reduce using rule 43 (EXPRESION -> EXP_R .)
    ]               reduce using rule 43 (EXPRESION -> EXP_R .)
    to              reduce using rule 43 (EXPRESION -> EXP_R .)
    do              reduce using rule 43 (EXPRESION -> EXP_R .)


state 124

    (44) EXP_R -> EXP_A . > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> EXP_A . < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> EXP_A . equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> EXP_A . not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> EXP_A .
    (49) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (142) SEM_PENDING_EXPA_OP -> .

    >               shift and go to state 170
    <               shift and go to state 171
    equals          shift and go to state 172
    not_equals      shift and go to state 173
    ;               reduce using rule 48 (EXP_R -> EXP_A .)
    and             reduce using rule 48 (EXP_R -> EXP_A .)
    or              reduce using rule 48 (EXP_R -> EXP_A .)
    )               reduce using rule 48 (EXP_R -> EXP_A .)
    ,               reduce using rule 48 (EXP_R -> EXP_A .)
    ]               reduce using rule 48 (EXP_R -> EXP_A .)
    to              reduce using rule 48 (EXP_R -> EXP_A .)
    do              reduce using rule 48 (EXP_R -> EXP_A .)
    +               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_EXPA_OP            shift and go to state 174

state 125

    (51) EXP_A -> TERMINO .
    (52) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (143) SEM_PENDING_TERMINO_OP -> .

    >               reduce using rule 51 (EXP_A -> TERMINO .)
    <               reduce using rule 51 (EXP_A -> TERMINO .)
    equals          reduce using rule 51 (EXP_A -> TERMINO .)
    not_equals      reduce using rule 51 (EXP_A -> TERMINO .)
    +               reduce using rule 51 (EXP_A -> TERMINO .)
    minus           reduce using rule 51 (EXP_A -> TERMINO .)
    ;               reduce using rule 51 (EXP_A -> TERMINO .)
    and             reduce using rule 51 (EXP_A -> TERMINO .)
    or              reduce using rule 51 (EXP_A -> TERMINO .)
    )               reduce using rule 51 (EXP_A -> TERMINO .)
    ,               reduce using rule 51 (EXP_A -> TERMINO .)
    ]               reduce using rule 51 (EXP_A -> TERMINO .)
    to              reduce using rule 51 (EXP_A -> TERMINO .)
    do              reduce using rule 51 (EXP_A -> TERMINO .)
    *               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_TERMINO_OP         shift and go to state 175

state 126

    (54) TERMINO -> FACTOR .

    *               reduce using rule 54 (TERMINO -> FACTOR .)
    /               reduce using rule 54 (TERMINO -> FACTOR .)
    >               reduce using rule 54 (TERMINO -> FACTOR .)
    <               reduce using rule 54 (TERMINO -> FACTOR .)
    equals          reduce using rule 54 (TERMINO -> FACTOR .)
    not_equals      reduce using rule 54 (TERMINO -> FACTOR .)
    +               reduce using rule 54 (TERMINO -> FACTOR .)
    minus           reduce using rule 54 (TERMINO -> FACTOR .)
    ;               reduce using rule 54 (TERMINO -> FACTOR .)
    and             reduce using rule 54 (TERMINO -> FACTOR .)
    or              reduce using rule 54 (TERMINO -> FACTOR .)
    )               reduce using rule 54 (TERMINO -> FACTOR .)
    ,               reduce using rule 54 (TERMINO -> FACTOR .)
    ]               reduce using rule 54 (TERMINO -> FACTOR .)
    to              reduce using rule 54 (TERMINO -> FACTOR .)
    do              reduce using rule 54 (TERMINO -> FACTOR .)


state 127

    (63) FACTOR -> LLAMADA .

    *               reduce using rule 63 (FACTOR -> LLAMADA .)
    /               reduce using rule 63 (FACTOR -> LLAMADA .)
    >               reduce using rule 63 (FACTOR -> LLAMADA .)
    <               reduce using rule 63 (FACTOR -> LLAMADA .)
    equals          reduce using rule 63 (FACTOR -> LLAMADA .)
    not_equals      reduce using rule 63 (FACTOR -> LLAMADA .)
    +               reduce using rule 63 (FACTOR -> LLAMADA .)
    minus           reduce using rule 63 (FACTOR -> LLAMADA .)
    ;               reduce using rule 63 (FACTOR -> LLAMADA .)
    and             reduce using rule 63 (FACTOR -> LLAMADA .)
    or              reduce using rule 63 (FACTOR -> LLAMADA .)
    )               reduce using rule 63 (FACTOR -> LLAMADA .)
    ,               reduce using rule 63 (FACTOR -> LLAMADA .)
    ]               reduce using rule 63 (FACTOR -> LLAMADA .)
    to              reduce using rule 63 (FACTOR -> LLAMADA .)
    do              reduce using rule 63 (FACTOR -> LLAMADA .)


state 128

    (64) FACTOR -> CTE .

    *               reduce using rule 64 (FACTOR -> CTE .)
    /               reduce using rule 64 (FACTOR -> CTE .)
    >               reduce using rule 64 (FACTOR -> CTE .)
    <               reduce using rule 64 (FACTOR -> CTE .)
    equals          reduce using rule 64 (FACTOR -> CTE .)
    not_equals      reduce using rule 64 (FACTOR -> CTE .)
    +               reduce using rule 64 (FACTOR -> CTE .)
    minus           reduce using rule 64 (FACTOR -> CTE .)
    ;               reduce using rule 64 (FACTOR -> CTE .)
    and             reduce using rule 64 (FACTOR -> CTE .)
    or              reduce using rule 64 (FACTOR -> CTE .)
    )               reduce using rule 64 (FACTOR -> CTE .)
    ,               reduce using rule 64 (FACTOR -> CTE .)
    ]               reduce using rule 64 (FACTOR -> CTE .)
    to              reduce using rule 64 (FACTOR -> CTE .)
    do              reduce using rule 64 (FACTOR -> CTE .)


state 129

    (65) FACTOR -> VARIABLE .

    *               reduce using rule 65 (FACTOR -> VARIABLE .)
    /               reduce using rule 65 (FACTOR -> VARIABLE .)
    >               reduce using rule 65 (FACTOR -> VARIABLE .)
    <               reduce using rule 65 (FACTOR -> VARIABLE .)
    equals          reduce using rule 65 (FACTOR -> VARIABLE .)
    not_equals      reduce using rule 65 (FACTOR -> VARIABLE .)
    +               reduce using rule 65 (FACTOR -> VARIABLE .)
    minus           reduce using rule 65 (FACTOR -> VARIABLE .)
    ;               reduce using rule 65 (FACTOR -> VARIABLE .)
    and             reduce using rule 65 (FACTOR -> VARIABLE .)
    or              reduce using rule 65 (FACTOR -> VARIABLE .)
    )               reduce using rule 65 (FACTOR -> VARIABLE .)
    ,               reduce using rule 65 (FACTOR -> VARIABLE .)
    ]               reduce using rule 65 (FACTOR -> VARIABLE .)
    to              reduce using rule 65 (FACTOR -> VARIABLE .)
    do              reduce using rule 65 (FACTOR -> VARIABLE .)


state 130

    (66) FACTOR -> ( . SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (116) SEM_ADD_FONDO_FALSO -> .

    (               reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)
    cte_i           reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)
    cte_f           reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)
    cte_c           reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)
    null            reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)
    id              reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)

    SEM_ADD_FONDO_FALSO            shift and go to state 176

state 131

    (71) LLAMADA -> SEM_VERIFY_FUNC_CALL . ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> SEM_VERIFY_FUNC_CALL . ( ) SEM_ADD_GOSUB

    (               shift and go to state 177


state 132

    (67) CTE -> cte_i .

    *               reduce using rule 67 (CTE -> cte_i .)
    /               reduce using rule 67 (CTE -> cte_i .)
    >               reduce using rule 67 (CTE -> cte_i .)
    <               reduce using rule 67 (CTE -> cte_i .)
    equals          reduce using rule 67 (CTE -> cte_i .)
    not_equals      reduce using rule 67 (CTE -> cte_i .)
    +               reduce using rule 67 (CTE -> cte_i .)
    minus           reduce using rule 67 (CTE -> cte_i .)
    ;               reduce using rule 67 (CTE -> cte_i .)
    and             reduce using rule 67 (CTE -> cte_i .)
    or              reduce using rule 67 (CTE -> cte_i .)
    )               reduce using rule 67 (CTE -> cte_i .)
    ,               reduce using rule 67 (CTE -> cte_i .)
    ]               reduce using rule 67 (CTE -> cte_i .)
    to              reduce using rule 67 (CTE -> cte_i .)
    do              reduce using rule 67 (CTE -> cte_i .)


state 133

    (68) CTE -> cte_f .

    *               reduce using rule 68 (CTE -> cte_f .)
    /               reduce using rule 68 (CTE -> cte_f .)
    >               reduce using rule 68 (CTE -> cte_f .)
    <               reduce using rule 68 (CTE -> cte_f .)
    equals          reduce using rule 68 (CTE -> cte_f .)
    not_equals      reduce using rule 68 (CTE -> cte_f .)
    +               reduce using rule 68 (CTE -> cte_f .)
    minus           reduce using rule 68 (CTE -> cte_f .)
    ;               reduce using rule 68 (CTE -> cte_f .)
    and             reduce using rule 68 (CTE -> cte_f .)
    or              reduce using rule 68 (CTE -> cte_f .)
    )               reduce using rule 68 (CTE -> cte_f .)
    ,               reduce using rule 68 (CTE -> cte_f .)
    ]               reduce using rule 68 (CTE -> cte_f .)
    to              reduce using rule 68 (CTE -> cte_f .)
    do              reduce using rule 68 (CTE -> cte_f .)


state 134

    (69) CTE -> cte_c .

    *               reduce using rule 69 (CTE -> cte_c .)
    /               reduce using rule 69 (CTE -> cte_c .)
    >               reduce using rule 69 (CTE -> cte_c .)
    <               reduce using rule 69 (CTE -> cte_c .)
    equals          reduce using rule 69 (CTE -> cte_c .)
    not_equals      reduce using rule 69 (CTE -> cte_c .)
    +               reduce using rule 69 (CTE -> cte_c .)
    minus           reduce using rule 69 (CTE -> cte_c .)
    ;               reduce using rule 69 (CTE -> cte_c .)
    and             reduce using rule 69 (CTE -> cte_c .)
    or              reduce using rule 69 (CTE -> cte_c .)
    )               reduce using rule 69 (CTE -> cte_c .)
    ,               reduce using rule 69 (CTE -> cte_c .)
    ]               reduce using rule 69 (CTE -> cte_c .)
    to              reduce using rule 69 (CTE -> cte_c .)
    do              reduce using rule 69 (CTE -> cte_c .)


state 135

    (70) CTE -> null .

    *               reduce using rule 70 (CTE -> null .)
    /               reduce using rule 70 (CTE -> null .)
    >               reduce using rule 70 (CTE -> null .)
    <               reduce using rule 70 (CTE -> null .)
    equals          reduce using rule 70 (CTE -> null .)
    not_equals      reduce using rule 70 (CTE -> null .)
    +               reduce using rule 70 (CTE -> null .)
    minus           reduce using rule 70 (CTE -> null .)
    ;               reduce using rule 70 (CTE -> null .)
    and             reduce using rule 70 (CTE -> null .)
    or              reduce using rule 70 (CTE -> null .)
    )               reduce using rule 70 (CTE -> null .)
    ,               reduce using rule 70 (CTE -> null .)
    ]               reduce using rule 70 (CTE -> null .)
    to              reduce using rule 70 (CTE -> null .)
    do              reduce using rule 70 (CTE -> null .)


state 136

    (32) VARIABLE -> id .
    (133) SEM_VERIFY_FUNC_CALL -> id .
    (33) SEM_ID_FOR_ARRAY -> id .

    *               reduce using rule 32 (VARIABLE -> id .)
    /               reduce using rule 32 (VARIABLE -> id .)
    >               reduce using rule 32 (VARIABLE -> id .)
    <               reduce using rule 32 (VARIABLE -> id .)
    equals          reduce using rule 32 (VARIABLE -> id .)
    not_equals      reduce using rule 32 (VARIABLE -> id .)
    +               reduce using rule 32 (VARIABLE -> id .)
    minus           reduce using rule 32 (VARIABLE -> id .)
    ;               reduce using rule 32 (VARIABLE -> id .)
    and             reduce using rule 32 (VARIABLE -> id .)
    or              reduce using rule 32 (VARIABLE -> id .)
    )               reduce using rule 32 (VARIABLE -> id .)
    ,               reduce using rule 32 (VARIABLE -> id .)
    ]               reduce using rule 32 (VARIABLE -> id .)
    to              reduce using rule 32 (VARIABLE -> id .)
    do              reduce using rule 32 (VARIABLE -> id .)
    (               reduce using rule 133 (SEM_VERIFY_FUNC_CALL -> id .)
    [               reduce using rule 33 (SEM_ID_FOR_ARRAY -> id .)


state 137

    (55) ESTATUTO -> ASIGNACION ; .

    return          reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    }               reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    /               reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    if              reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    while           reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    for             reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    read            reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    write           reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    id              reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    point           reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    circle          reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    penup           reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    pendown         reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    color           reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    size            reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    clear           reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    line            reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)
    arc             reduce using rule 55 (ESTATUTO -> ASIGNACION ; .)


state 138

    (59) ESTATUTO -> / SEM_MUST_BE_VOID_CALL . LLAMADA ;
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (133) SEM_VERIFY_FUNC_CALL -> . id

    id              shift and go to state 179

    LLAMADA                        shift and go to state 178
    SEM_VERIFY_FUNC_CALL           shift and go to state 131

state 139

    (60) ESTATUTO -> LECTURA ; .

    return          reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    }               reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    /               reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    if              reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    while           reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    for             reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    read            reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    write           reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    id              reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    point           reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    circle          reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    penup           reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    pendown         reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    color           reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    size            reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    clear           reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    line            reduce using rule 60 (ESTATUTO -> LECTURA ; .)
    arc             reduce using rule 60 (ESTATUTO -> LECTURA ; .)


state 140

    (61) ESTATUTO -> ESCRITURA ; .

    return          reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    }               reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    /               reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    if              reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    while           reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    for             reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    read            reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    write           reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    id              reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    point           reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    circle          reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    penup           reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    pendown         reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    color           reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    size            reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    clear           reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    line            reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)
    arc             reduce using rule 61 (ESTATUTO -> ESCRITURA ; .)


state 141

    (62) ESTATUTO -> LLAMADA_BI ; .

    return          reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    }               reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    /               reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    if              reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    while           reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    for             reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    read            reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    write           reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    id              reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    point           reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    circle          reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    penup           reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    pendown         reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    color           reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    size            reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    clear           reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    line            reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)
    arc             reduce using rule 62 (ESTATUTO -> LLAMADA_BI ; .)


state 142

    (75) ASIGNACION -> VARIABLE = . SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (115) SEM_ADD_EQUALS -> .

    (               reduce using rule 115 (SEM_ADD_EQUALS -> .)
    cte_i           reduce using rule 115 (SEM_ADD_EQUALS -> .)
    cte_f           reduce using rule 115 (SEM_ADD_EQUALS -> .)
    cte_c           reduce using rule 115 (SEM_ADD_EQUALS -> .)
    null            reduce using rule 115 (SEM_ADD_EQUALS -> .)
    id              reduce using rule 115 (SEM_ADD_EQUALS -> .)

    SEM_ADD_EQUALS                 shift and go to state 180

state 143

    (76) CONDICION -> if ( . EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (77) CONDICION -> if ( . EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 181
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 144

    (78) WHILE -> while SEM_ADD_COND_INDEX . ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX

    (               shift and go to state 182


state 145

    (79) FOR -> for ASIGNACION . to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX

    to              shift and go to state 183


state 146

    (80) LECTURA -> read ( . LECTURA_OPTS )
    (81) LECTURA_OPTS -> . LECTURA_OPTS , VARIABLE SEM_ADD_READ
    (82) LECTURA_OPTS -> . VARIABLE SEM_ADD_READ
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    id              shift and go to state 100

    LECTURA_OPTS                   shift and go to state 184
    VARIABLE                       shift and go to state 185
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 147

    (83) ESCRITURA -> write ( . ESCRITURA_OPTS )
    (84) ESCRITURA_OPTS -> . ESCRITURA_OPTS , SEM_ADD_PRINT_CTE_S
    (85) ESCRITURA_OPTS -> . ESCRITURA_OPTS , EXPRESION SEM_ADD_PRINT
    (86) ESCRITURA_OPTS -> . SEM_ADD_PRINT_CTE_S
    (87) ESCRITURA_OPTS -> . EXPRESION SEM_ADD_PRINT
    (140) SEM_ADD_PRINT_CTE_S -> . cte_s
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    cte_s           shift and go to state 189
    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    ESCRITURA_OPTS                 shift and go to state 186
    SEM_ADD_PRINT_CTE_S            shift and go to state 187
    EXPRESION                      shift and go to state 188
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 148

    (31) VARIABLE -> SEM_ID_FOR_ARRAY [ . EXPRESION SEM_CHECK_ARRAY ]
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    SEM_ID_FOR_ARRAY               shift and go to state 99
    EXPRESION                      shift and go to state 190
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131

state 149

    (98) POINT -> point ( . EXPRESION , EXPRESION ) DRAW_POINT
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 191
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 150

    (99) CIRCLE -> circle ( . EXPRESION ) DRAW_CIRCLE
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 192
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 151

    (102) PENUP -> penup ( . ) DO_PENUP

    )               shift and go to state 193


state 152

    (103) PENDOWN -> pendown ( . ) DO_PENDOWN

    )               shift and go to state 194


state 153

    (104) COLOR -> color ( . DO_COLOR )
    (153) DO_COLOR -> . cte_s

    cte_s           shift and go to state 196

    DO_COLOR                       shift and go to state 195

state 154

    (105) SIZE -> size ( . EXPRESION ) DO_SIZE
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 197
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 155

    (97) CLEAR -> clear ( . ) DO_CLEAR

    )               shift and go to state 198


state 156

    (100) LINE -> line ( . EXPRESION , EXPRESION , EXPRESION , EXPRESION ) DRAW_LINE
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 199
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 157

    (101) ARC -> arc ( . EXPRESION , EXPRESION ) DRAW_ARC
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 200
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 158

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 159

    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (132) SEM_ENDFUNC -> .

    char            reduce using rule 132 (SEM_ENDFUNC -> .)
    float           reduce using rule 132 (SEM_ENDFUNC -> .)
    int             reduce using rule 132 (SEM_ENDFUNC -> .)
    void            reduce using rule 132 (SEM_ENDFUNC -> .)
    main            reduce using rule 132 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 201

state 160

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (132) SEM_ENDFUNC -> .

    char            reduce using rule 132 (SEM_ENDFUNC -> .)
    float           reduce using rule 132 (SEM_ENDFUNC -> .)
    int             reduce using rule 132 (SEM_ENDFUNC -> .)
    void            reduce using rule 132 (SEM_ENDFUNC -> .)
    main            reduce using rule 132 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 202

state 161

    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 203

state 162

    (26) PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME .

    )               reduce using rule 26 (PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME .)
    ,               reduce using rule 26 (PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME .)


state 163

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 164

    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (132) SEM_ENDFUNC -> .

    char            reduce using rule 132 (SEM_ENDFUNC -> .)
    float           reduce using rule 132 (SEM_ENDFUNC -> .)
    int             reduce using rule 132 (SEM_ENDFUNC -> .)
    void            reduce using rule 132 (SEM_ENDFUNC -> .)
    main            reduce using rule 132 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 204

state 165

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (132) SEM_ENDFUNC -> .

    char            reduce using rule 132 (SEM_ENDFUNC -> .)
    float           reduce using rule 132 (SEM_ENDFUNC -> .)
    int             reduce using rule 132 (SEM_ENDFUNC -> .)
    void            reduce using rule 132 (SEM_ENDFUNC -> .)
    main            reduce using rule 132 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 205

state 166

    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 206

state 167

    (35) BLOQUE -> { LOOP_ESTATUTO return EXPRESION . SEM_VERIFY_RETURN_FUNC ; }
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (137) SEM_VERIFY_RETURN_FUNC -> .
    (146) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 137 (SEM_VERIFY_RETURN_FUNC -> .)
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_VERIFY_RETURN_FUNC         shift and go to state 207
    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 168

    (37) BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC . ; }

    ;               shift and go to state 208


state 169

    (41) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP . and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP . or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP

    and             shift and go to state 209
    or              shift and go to state 210


state 170

    (44) EXP_R -> EXP_A > . SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (118) SEM_ADD_GREATER_THAN -> .

    (               reduce using rule 118 (SEM_ADD_GREATER_THAN -> .)
    cte_i           reduce using rule 118 (SEM_ADD_GREATER_THAN -> .)
    cte_f           reduce using rule 118 (SEM_ADD_GREATER_THAN -> .)
    cte_c           reduce using rule 118 (SEM_ADD_GREATER_THAN -> .)
    null            reduce using rule 118 (SEM_ADD_GREATER_THAN -> .)
    id              reduce using rule 118 (SEM_ADD_GREATER_THAN -> .)

    SEM_ADD_GREATER_THAN           shift and go to state 211

state 171

    (45) EXP_R -> EXP_A < . SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (119) SEM_ADD_LESS_THAN -> .

    (               reduce using rule 119 (SEM_ADD_LESS_THAN -> .)
    cte_i           reduce using rule 119 (SEM_ADD_LESS_THAN -> .)
    cte_f           reduce using rule 119 (SEM_ADD_LESS_THAN -> .)
    cte_c           reduce using rule 119 (SEM_ADD_LESS_THAN -> .)
    null            reduce using rule 119 (SEM_ADD_LESS_THAN -> .)
    id              reduce using rule 119 (SEM_ADD_LESS_THAN -> .)

    SEM_ADD_LESS_THAN              shift and go to state 212

state 172

    (46) EXP_R -> EXP_A equals . SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (120) SEM_ADD_EQUALS_TO -> .

    (               reduce using rule 120 (SEM_ADD_EQUALS_TO -> .)
    cte_i           reduce using rule 120 (SEM_ADD_EQUALS_TO -> .)
    cte_f           reduce using rule 120 (SEM_ADD_EQUALS_TO -> .)
    cte_c           reduce using rule 120 (SEM_ADD_EQUALS_TO -> .)
    null            reduce using rule 120 (SEM_ADD_EQUALS_TO -> .)
    id              reduce using rule 120 (SEM_ADD_EQUALS_TO -> .)

    SEM_ADD_EQUALS_TO              shift and go to state 213

state 173

    (47) EXP_R -> EXP_A not_equals . SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (121) SEM_ADD_NOT_EQUALS_TO -> .

    (               reduce using rule 121 (SEM_ADD_NOT_EQUALS_TO -> .)
    cte_i           reduce using rule 121 (SEM_ADD_NOT_EQUALS_TO -> .)
    cte_f           reduce using rule 121 (SEM_ADD_NOT_EQUALS_TO -> .)
    cte_c           reduce using rule 121 (SEM_ADD_NOT_EQUALS_TO -> .)
    null            reduce using rule 121 (SEM_ADD_NOT_EQUALS_TO -> .)
    id              reduce using rule 121 (SEM_ADD_NOT_EQUALS_TO -> .)

    SEM_ADD_NOT_EQUALS_TO          shift and go to state 214

state 174

    (49) EXP_A -> EXP_A SEM_PENDING_EXPA_OP . + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> EXP_A SEM_PENDING_EXPA_OP . minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP

    +               shift and go to state 215
    minus           shift and go to state 216


state 175

    (52) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP . * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP . / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP

    *               shift and go to state 217
    /               shift and go to state 218


state 176

    (66) FACTOR -> ( SEM_ADD_FONDO_FALSO . EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 219
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 177

    (71) LLAMADA -> SEM_VERIFY_FUNC_CALL ( . SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> SEM_VERIFY_FUNC_CALL ( . ) SEM_ADD_GOSUB
    (116) SEM_ADD_FONDO_FALSO -> .

    )               shift and go to state 221
    (               reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)
    cte_i           reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)
    cte_f           reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)
    cte_c           reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)
    null            reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)
    id              reduce using rule 116 (SEM_ADD_FONDO_FALSO -> .)

    SEM_ADD_FONDO_FALSO            shift and go to state 220

state 178

    (59) ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA . ;

    ;               shift and go to state 222


state 179

    (133) SEM_VERIFY_FUNC_CALL -> id .

    (               reduce using rule 133 (SEM_VERIFY_FUNC_CALL -> id .)


state 180

    (75) ASIGNACION -> VARIABLE = SEM_ADD_EQUALS . EXPRESION SEM_PENDING_ASSIGNATION_OP
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    VARIABLE                       shift and go to state 129
    EXPRESION                      shift and go to state 223
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 181

    (76) CONDICION -> if ( EXPRESION . ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (77) CONDICION -> if ( EXPRESION . ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 224
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 182

    (78) WHILE -> while SEM_ADD_COND_INDEX ( . EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 225
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 183

    (79) FOR -> for ASIGNACION to . SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (128) SEM_ADD_COND_INDEX -> .

    (               reduce using rule 128 (SEM_ADD_COND_INDEX -> .)
    cte_i           reduce using rule 128 (SEM_ADD_COND_INDEX -> .)
    cte_f           reduce using rule 128 (SEM_ADD_COND_INDEX -> .)
    cte_c           reduce using rule 128 (SEM_ADD_COND_INDEX -> .)
    null            reduce using rule 128 (SEM_ADD_COND_INDEX -> .)
    id              reduce using rule 128 (SEM_ADD_COND_INDEX -> .)

    SEM_ADD_COND_INDEX             shift and go to state 226

state 184

    (80) LECTURA -> read ( LECTURA_OPTS . )
    (81) LECTURA_OPTS -> LECTURA_OPTS . , VARIABLE SEM_ADD_READ

    )               shift and go to state 227
    ,               shift and go to state 228


state 185

    (82) LECTURA_OPTS -> VARIABLE . SEM_ADD_READ
    (141) SEM_ADD_READ -> .

    )               reduce using rule 141 (SEM_ADD_READ -> .)
    ,               reduce using rule 141 (SEM_ADD_READ -> .)

    SEM_ADD_READ                   shift and go to state 229

state 186

    (83) ESCRITURA -> write ( ESCRITURA_OPTS . )
    (84) ESCRITURA_OPTS -> ESCRITURA_OPTS . , SEM_ADD_PRINT_CTE_S
    (85) ESCRITURA_OPTS -> ESCRITURA_OPTS . , EXPRESION SEM_ADD_PRINT

    )               shift and go to state 230
    ,               shift and go to state 231


state 187

    (86) ESCRITURA_OPTS -> SEM_ADD_PRINT_CTE_S .

    )               reduce using rule 86 (ESCRITURA_OPTS -> SEM_ADD_PRINT_CTE_S .)
    ,               reduce using rule 86 (ESCRITURA_OPTS -> SEM_ADD_PRINT_CTE_S .)


state 188

    (87) ESCRITURA_OPTS -> EXPRESION . SEM_ADD_PRINT
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (139) SEM_ADD_PRINT -> .
    (146) SEM_PENDING_LOGIC_OP -> .

    )               reduce using rule 139 (SEM_ADD_PRINT -> .)
    ,               reduce using rule 139 (SEM_ADD_PRINT -> .)
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_ADD_PRINT                  shift and go to state 232
    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 189

    (140) SEM_ADD_PRINT_CTE_S -> cte_s .

    )               reduce using rule 140 (SEM_ADD_PRINT_CTE_S -> cte_s .)
    ,               reduce using rule 140 (SEM_ADD_PRINT_CTE_S -> cte_s .)


state 190

    (31) VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION . SEM_CHECK_ARRAY ]
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (34) SEM_CHECK_ARRAY -> .
    (146) SEM_PENDING_LOGIC_OP -> .

    ]               reduce using rule 34 (SEM_CHECK_ARRAY -> .)
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_CHECK_ARRAY                shift and go to state 233
    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 191

    (98) POINT -> point ( EXPRESION . , EXPRESION ) DRAW_POINT
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    ,               shift and go to state 234
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 192

    (99) CIRCLE -> circle ( EXPRESION . ) DRAW_CIRCLE
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 235
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 193

    (102) PENUP -> penup ( ) . DO_PENUP
    (151) DO_PENUP -> .

    ;               reduce using rule 151 (DO_PENUP -> .)

    DO_PENUP                       shift and go to state 236

state 194

    (103) PENDOWN -> pendown ( ) . DO_PENDOWN
    (152) DO_PENDOWN -> .

    ;               reduce using rule 152 (DO_PENDOWN -> .)

    DO_PENDOWN                     shift and go to state 237

state 195

    (104) COLOR -> color ( DO_COLOR . )

    )               shift and go to state 238


state 196

    (153) DO_COLOR -> cte_s .

    )               reduce using rule 153 (DO_COLOR -> cte_s .)


state 197

    (105) SIZE -> size ( EXPRESION . ) DO_SIZE
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 239
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 198

    (97) CLEAR -> clear ( ) . DO_CLEAR
    (154) DO_CLEAR -> .

    ;               reduce using rule 154 (DO_CLEAR -> .)

    DO_CLEAR                       shift and go to state 240

state 199

    (100) LINE -> line ( EXPRESION . , EXPRESION , EXPRESION , EXPRESION ) DRAW_LINE
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    ,               shift and go to state 241
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 200

    (101) ARC -> arc ( EXPRESION . , EXPRESION ) DRAW_ARC
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    ,               shift and go to state 242
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 201

    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 202

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 203

    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (132) SEM_ENDFUNC -> .

    char            reduce using rule 132 (SEM_ENDFUNC -> .)
    float           reduce using rule 132 (SEM_ENDFUNC -> .)
    int             reduce using rule 132 (SEM_ENDFUNC -> .)
    void            reduce using rule 132 (SEM_ENDFUNC -> .)
    main            reduce using rule 132 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 243

state 204

    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 205

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 206

    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (132) SEM_ENDFUNC -> .

    char            reduce using rule 132 (SEM_ENDFUNC -> .)
    float           reduce using rule 132 (SEM_ENDFUNC -> .)
    int             reduce using rule 132 (SEM_ENDFUNC -> .)
    void            reduce using rule 132 (SEM_ENDFUNC -> .)
    main            reduce using rule 132 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 244

state 207

    (35) BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC . ; }

    ;               shift and go to state 245


state 208

    (37) BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; . }

    }               shift and go to state 246


state 209

    (41) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and . SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (122) SEM_ADD_AND -> .

    (               reduce using rule 122 (SEM_ADD_AND -> .)
    cte_i           reduce using rule 122 (SEM_ADD_AND -> .)
    cte_f           reduce using rule 122 (SEM_ADD_AND -> .)
    cte_c           reduce using rule 122 (SEM_ADD_AND -> .)
    null            reduce using rule 122 (SEM_ADD_AND -> .)
    id              reduce using rule 122 (SEM_ADD_AND -> .)

    SEM_ADD_AND                    shift and go to state 247

state 210

    (42) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or . SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (123) SEM_ADD_OR -> .

    (               reduce using rule 123 (SEM_ADD_OR -> .)
    cte_i           reduce using rule 123 (SEM_ADD_OR -> .)
    cte_f           reduce using rule 123 (SEM_ADD_OR -> .)
    cte_c           reduce using rule 123 (SEM_ADD_OR -> .)
    null            reduce using rule 123 (SEM_ADD_OR -> .)
    id              reduce using rule 123 (SEM_ADD_OR -> .)

    SEM_ADD_OR                     shift and go to state 248

state 211

    (44) EXP_R -> EXP_A > SEM_ADD_GREATER_THAN . EXP_A SEM_PENDING_REL_OP
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXP_A                          shift and go to state 249
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 212

    (45) EXP_R -> EXP_A < SEM_ADD_LESS_THAN . EXP_A SEM_PENDING_REL_OP
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXP_A                          shift and go to state 250
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 213

    (46) EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO . EXP_A SEM_PENDING_REL_OP
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXP_A                          shift and go to state 251
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 214

    (47) EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO . EXP_A SEM_PENDING_REL_OP
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXP_A                          shift and go to state 252
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 215

    (49) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + . SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (111) SEM_ADD_PLUS -> .

    (               reduce using rule 111 (SEM_ADD_PLUS -> .)
    cte_i           reduce using rule 111 (SEM_ADD_PLUS -> .)
    cte_f           reduce using rule 111 (SEM_ADD_PLUS -> .)
    cte_c           reduce using rule 111 (SEM_ADD_PLUS -> .)
    null            reduce using rule 111 (SEM_ADD_PLUS -> .)
    id              reduce using rule 111 (SEM_ADD_PLUS -> .)

    SEM_ADD_PLUS                   shift and go to state 253

state 216

    (50) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus . SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (112) SEM_ADD_MINUS -> .

    (               reduce using rule 112 (SEM_ADD_MINUS -> .)
    cte_i           reduce using rule 112 (SEM_ADD_MINUS -> .)
    cte_f           reduce using rule 112 (SEM_ADD_MINUS -> .)
    cte_c           reduce using rule 112 (SEM_ADD_MINUS -> .)
    null            reduce using rule 112 (SEM_ADD_MINUS -> .)
    id              reduce using rule 112 (SEM_ADD_MINUS -> .)

    SEM_ADD_MINUS                  shift and go to state 254

state 217

    (52) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * . SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (113) SEM_ADD_TIMES -> .

    (               reduce using rule 113 (SEM_ADD_TIMES -> .)
    cte_i           reduce using rule 113 (SEM_ADD_TIMES -> .)
    cte_f           reduce using rule 113 (SEM_ADD_TIMES -> .)
    cte_c           reduce using rule 113 (SEM_ADD_TIMES -> .)
    null            reduce using rule 113 (SEM_ADD_TIMES -> .)
    id              reduce using rule 113 (SEM_ADD_TIMES -> .)

    SEM_ADD_TIMES                  shift and go to state 255

state 218

    (53) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / . SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (114) SEM_ADD_DIVISION -> .

    (               reduce using rule 114 (SEM_ADD_DIVISION -> .)
    cte_i           reduce using rule 114 (SEM_ADD_DIVISION -> .)
    cte_f           reduce using rule 114 (SEM_ADD_DIVISION -> .)
    cte_c           reduce using rule 114 (SEM_ADD_DIVISION -> .)
    null            reduce using rule 114 (SEM_ADD_DIVISION -> .)
    id              reduce using rule 114 (SEM_ADD_DIVISION -> .)

    SEM_ADD_DIVISION               shift and go to state 256

state 219

    (66) FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION . ) SEM_REMOVE_FONDO_FALSO
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 257
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 220

    (71) LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO . LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (73) LLAMADA_OPTS -> . LLAMADA_OPTS , EXPRESION SEM_VERIFY_PARAM
    (74) LLAMADA_OPTS -> . EXPRESION SEM_VERIFY_PARAM
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    LLAMADA_OPTS                   shift and go to state 258
    EXPRESION                      shift and go to state 259
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 221

    (72) LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) . SEM_ADD_GOSUB
    (136) SEM_ADD_GOSUB -> .

    *               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    /               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    >               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    <               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    equals          reduce using rule 136 (SEM_ADD_GOSUB -> .)
    not_equals      reduce using rule 136 (SEM_ADD_GOSUB -> .)
    +               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    minus           reduce using rule 136 (SEM_ADD_GOSUB -> .)
    ;               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    and             reduce using rule 136 (SEM_ADD_GOSUB -> .)
    or              reduce using rule 136 (SEM_ADD_GOSUB -> .)
    )               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    ,               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    ]               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    to              reduce using rule 136 (SEM_ADD_GOSUB -> .)
    do              reduce using rule 136 (SEM_ADD_GOSUB -> .)

    SEM_ADD_GOSUB                  shift and go to state 260

state 222

    (59) ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .

    return          reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    }               reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    /               reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    if              reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    while           reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    for             reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    read            reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    write           reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    id              reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    point           reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    circle          reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    penup           reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    pendown         reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    color           reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    size            reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    clear           reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    line            reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    arc             reduce using rule 59 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)


state 223

    (75) ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION . SEM_PENDING_ASSIGNATION_OP
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (144) SEM_PENDING_ASSIGNATION_OP -> .
    (146) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 144 (SEM_PENDING_ASSIGNATION_OP -> .)
    to              reduce using rule 144 (SEM_PENDING_ASSIGNATION_OP -> .)
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_ASSIGNATION_OP     shift and go to state 261
    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 224

    (76) CONDICION -> if ( EXPRESION ) . SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (77) CONDICION -> if ( EXPRESION ) . SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (124) SEM_ADD_GOTOF -> .

    then            reduce using rule 124 (SEM_ADD_GOTOF -> .)

    SEM_ADD_GOTOF                  shift and go to state 262

state 225

    (78) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION . ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 263
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 226

    (79) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX . EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 264
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 227

    (80) LECTURA -> read ( LECTURA_OPTS ) .

    ;               reduce using rule 80 (LECTURA -> read ( LECTURA_OPTS ) .)


state 228

    (81) LECTURA_OPTS -> LECTURA_OPTS , . VARIABLE SEM_ADD_READ
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    id              shift and go to state 100

    VARIABLE                       shift and go to state 265
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 229

    (82) LECTURA_OPTS -> VARIABLE SEM_ADD_READ .

    )               reduce using rule 82 (LECTURA_OPTS -> VARIABLE SEM_ADD_READ .)
    ,               reduce using rule 82 (LECTURA_OPTS -> VARIABLE SEM_ADD_READ .)


state 230

    (83) ESCRITURA -> write ( ESCRITURA_OPTS ) .

    ;               reduce using rule 83 (ESCRITURA -> write ( ESCRITURA_OPTS ) .)


state 231

    (84) ESCRITURA_OPTS -> ESCRITURA_OPTS , . SEM_ADD_PRINT_CTE_S
    (85) ESCRITURA_OPTS -> ESCRITURA_OPTS , . EXPRESION SEM_ADD_PRINT
    (140) SEM_ADD_PRINT_CTE_S -> . cte_s
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    cte_s           shift and go to state 189
    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    SEM_ADD_PRINT_CTE_S            shift and go to state 266
    EXPRESION                      shift and go to state 267
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 232

    (87) ESCRITURA_OPTS -> EXPRESION SEM_ADD_PRINT .

    )               reduce using rule 87 (ESCRITURA_OPTS -> EXPRESION SEM_ADD_PRINT .)
    ,               reduce using rule 87 (ESCRITURA_OPTS -> EXPRESION SEM_ADD_PRINT .)


state 233

    (31) VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY . ]

    ]               shift and go to state 268


state 234

    (98) POINT -> point ( EXPRESION , . EXPRESION ) DRAW_POINT
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 269
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 235

    (99) CIRCLE -> circle ( EXPRESION ) . DRAW_CIRCLE
    (148) DRAW_CIRCLE -> .

    ;               reduce using rule 148 (DRAW_CIRCLE -> .)

    DRAW_CIRCLE                    shift and go to state 270

state 236

    (102) PENUP -> penup ( ) DO_PENUP .

    ;               reduce using rule 102 (PENUP -> penup ( ) DO_PENUP .)


state 237

    (103) PENDOWN -> pendown ( ) DO_PENDOWN .

    ;               reduce using rule 103 (PENDOWN -> pendown ( ) DO_PENDOWN .)


state 238

    (104) COLOR -> color ( DO_COLOR ) .

    ;               reduce using rule 104 (COLOR -> color ( DO_COLOR ) .)


state 239

    (105) SIZE -> size ( EXPRESION ) . DO_SIZE
    (155) DO_SIZE -> .

    ;               reduce using rule 155 (DO_SIZE -> .)

    DO_SIZE                        shift and go to state 271

state 240

    (97) CLEAR -> clear ( ) DO_CLEAR .

    ;               reduce using rule 97 (CLEAR -> clear ( ) DO_CLEAR .)


state 241

    (100) LINE -> line ( EXPRESION , . EXPRESION , EXPRESION , EXPRESION ) DRAW_LINE
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 272
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 242

    (101) ARC -> arc ( EXPRESION , . EXPRESION ) DRAW_ARC
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 273
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 243

    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 244

    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 245

    (35) BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; . }

    }               shift and go to state 274


state 246

    (37) BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .

    $end            reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    char            reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    float           reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    int             reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    void            reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    main            reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    else            reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    return          reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    }               reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    /               reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    if              reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    while           reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    for             reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    read            reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    write           reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    id              reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    point           reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    circle          reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    penup           reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    pendown         reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    color           reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    size            reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    clear           reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    line            reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    arc             reduce using rule 37 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)


state 247

    (41) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND . EXP_R SEM_PENDING_LOGIC_OP
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXP_R                          shift and go to state 275
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 248

    (42) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR . EXP_R SEM_PENDING_LOGIC_OP
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXP_R                          shift and go to state 276
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 249

    (44) EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A . SEM_PENDING_REL_OP
    (49) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (145) SEM_PENDING_REL_OP -> .
    (142) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 277
    SEM_PENDING_EXPA_OP            shift and go to state 174

state 250

    (45) EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A . SEM_PENDING_REL_OP
    (49) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (145) SEM_PENDING_REL_OP -> .
    (142) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 278
    SEM_PENDING_EXPA_OP            shift and go to state 174

state 251

    (46) EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A . SEM_PENDING_REL_OP
    (49) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (145) SEM_PENDING_REL_OP -> .
    (142) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 279
    SEM_PENDING_EXPA_OP            shift and go to state 174

state 252

    (47) EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A . SEM_PENDING_REL_OP
    (49) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (145) SEM_PENDING_REL_OP -> .
    (142) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 145 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 280
    SEM_PENDING_EXPA_OP            shift and go to state 174

state 253

    (49) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS . TERMINO SEM_PENDING_EXPA_OP
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    TERMINO                        shift and go to state 281
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 254

    (50) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS . TERMINO SEM_PENDING_EXPA_OP
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    TERMINO                        shift and go to state 282
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 255

    (52) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES . FACTOR SEM_PENDING_TERMINO_OP
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    FACTOR                         shift and go to state 283
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 256

    (53) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION . FACTOR SEM_PENDING_TERMINO_OP
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    FACTOR                         shift and go to state 284
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 257

    (66) FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) . SEM_REMOVE_FONDO_FALSO
    (117) SEM_REMOVE_FONDO_FALSO -> .

    *               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    /               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    >               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    <               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    equals          reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    not_equals      reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    +               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    minus           reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    ;               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    and             reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    or              reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    )               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    ,               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    ]               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    to              reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    do              reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)

    SEM_REMOVE_FONDO_FALSO         shift and go to state 285

state 258

    (71) LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS . SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (73) LLAMADA_OPTS -> LLAMADA_OPTS . , EXPRESION SEM_VERIFY_PARAM
    (135) SEM_RESET_PARAM_COUNT -> .

    ,               shift and go to state 287
    )               reduce using rule 135 (SEM_RESET_PARAM_COUNT -> .)

    SEM_RESET_PARAM_COUNT          shift and go to state 286

state 259

    (74) LLAMADA_OPTS -> EXPRESION . SEM_VERIFY_PARAM
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (134) SEM_VERIFY_PARAM -> .
    (146) SEM_PENDING_LOGIC_OP -> .

    ,               reduce using rule 134 (SEM_VERIFY_PARAM -> .)
    )               reduce using rule 134 (SEM_VERIFY_PARAM -> .)
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_VERIFY_PARAM               shift and go to state 288
    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 260

    (72) LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .

    *               reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    /               reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    >               reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    <               reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    equals          reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    not_equals      reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    +               reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    minus           reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    ;               reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    and             reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    or              reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    )               reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    ,               reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    ]               reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    to              reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    do              reduce using rule 72 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)


state 261

    (75) ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP .

    ;               reduce using rule 75 (ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP .)
    to              reduce using rule 75 (ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP .)


state 262

    (76) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF . then BLOQUE SEM_FILL_GOTO_ANYKIND
    (77) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF . then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND

    then            shift and go to state 289


state 263

    (78) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) . SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (124) SEM_ADD_GOTOF -> .

    do              reduce using rule 124 (SEM_ADD_GOTOF -> .)

    SEM_ADD_GOTOF                  shift and go to state 290

state 264

    (79) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION . SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (130) SEM_ADD_GOTOV -> .
    (146) SEM_PENDING_LOGIC_OP -> .

    do              reduce using rule 130 (SEM_ADD_GOTOV -> .)
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_ADD_GOTOV                  shift and go to state 291
    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 265

    (81) LECTURA_OPTS -> LECTURA_OPTS , VARIABLE . SEM_ADD_READ
    (141) SEM_ADD_READ -> .

    )               reduce using rule 141 (SEM_ADD_READ -> .)
    ,               reduce using rule 141 (SEM_ADD_READ -> .)

    SEM_ADD_READ                   shift and go to state 292

state 266

    (84) ESCRITURA_OPTS -> ESCRITURA_OPTS , SEM_ADD_PRINT_CTE_S .

    )               reduce using rule 84 (ESCRITURA_OPTS -> ESCRITURA_OPTS , SEM_ADD_PRINT_CTE_S .)
    ,               reduce using rule 84 (ESCRITURA_OPTS -> ESCRITURA_OPTS , SEM_ADD_PRINT_CTE_S .)


state 267

    (85) ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION . SEM_ADD_PRINT
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (139) SEM_ADD_PRINT -> .
    (146) SEM_PENDING_LOGIC_OP -> .

    )               reduce using rule 139 (SEM_ADD_PRINT -> .)
    ,               reduce using rule 139 (SEM_ADD_PRINT -> .)
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_ADD_PRINT                  shift and go to state 293
    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 268

    (31) VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .

    =               reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    *               reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    /               reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    >               reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    <               reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    equals          reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    not_equals      reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    +               reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    minus           reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    ;               reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    and             reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    or              reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    )               reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    ,               reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    ]               reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    to              reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)
    do              reduce using rule 31 (VARIABLE -> SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ] .)


state 269

    (98) POINT -> point ( EXPRESION , EXPRESION . ) DRAW_POINT
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 294
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 270

    (99) CIRCLE -> circle ( EXPRESION ) DRAW_CIRCLE .

    ;               reduce using rule 99 (CIRCLE -> circle ( EXPRESION ) DRAW_CIRCLE .)


state 271

    (105) SIZE -> size ( EXPRESION ) DO_SIZE .

    ;               reduce using rule 105 (SIZE -> size ( EXPRESION ) DO_SIZE .)


state 272

    (100) LINE -> line ( EXPRESION , EXPRESION . , EXPRESION , EXPRESION ) DRAW_LINE
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    ,               shift and go to state 295
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 273

    (101) ARC -> arc ( EXPRESION , EXPRESION . ) DRAW_ARC
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 296
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 274

    (35) BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .

    $end            reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    char            reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    float           reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    int             reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    void            reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    main            reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    else            reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    return          reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    }               reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    /               reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    if              reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    while           reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    for             reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    read            reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    write           reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    id              reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    point           reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    circle          reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    penup           reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    pendown         reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    color           reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    size            reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    clear           reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    line            reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    arc             reduce using rule 35 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)


state 275

    (41) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R . SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    )               reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    ,               reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    ]               reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    to              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    do              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 297

state 276

    (42) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R . SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    )               reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    ,               reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    ]               reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    to              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    do              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 298

state 277

    (44) EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 44 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 44 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 44 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 44 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 44 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 44 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 44 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 44 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)


state 278

    (45) EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 45 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 45 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 45 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 45 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 45 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 45 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 45 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 45 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)


state 279

    (46) EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 46 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 46 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 46 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 46 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 46 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 46 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 46 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 46 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)


state 280

    (47) EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 47 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 47 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 47 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 47 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 47 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 47 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 47 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 47 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)


state 281

    (49) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO . SEM_PENDING_EXPA_OP
    (52) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (142) SEM_PENDING_EXPA_OP -> .
    (143) SEM_PENDING_TERMINO_OP -> .

    >               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    <               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    equals          reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    not_equals      reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    +               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    ;               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    and             reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    or              reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    )               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    ,               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    ]               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    to              reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    do              reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    *               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_EXPA_OP            shift and go to state 299
    SEM_PENDING_TERMINO_OP         shift and go to state 175

state 282

    (50) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO . SEM_PENDING_EXPA_OP
    (52) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (142) SEM_PENDING_EXPA_OP -> .
    (143) SEM_PENDING_TERMINO_OP -> .

    >               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    <               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    equals          reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    not_equals      reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    +               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    ;               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    and             reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    or              reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    )               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    ,               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    ]               reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    to              reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    do              reduce using rule 142 (SEM_PENDING_EXPA_OP -> .)
    *               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_EXPA_OP            shift and go to state 300
    SEM_PENDING_TERMINO_OP         shift and go to state 175

state 283

    (52) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR . SEM_PENDING_TERMINO_OP
    (143) SEM_PENDING_TERMINO_OP -> .

    *               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    >               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    <               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    equals          reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    not_equals      reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    +               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    minus           reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    ;               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    and             reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    or              reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    )               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    ,               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    ]               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    to              reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    do              reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_TERMINO_OP         shift and go to state 301

state 284

    (53) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR . SEM_PENDING_TERMINO_OP
    (143) SEM_PENDING_TERMINO_OP -> .

    *               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    >               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    <               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    equals          reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    not_equals      reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    +               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    minus           reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    ;               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    and             reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    or              reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    )               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    ,               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    ]               reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    to              reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)
    do              reduce using rule 143 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_TERMINO_OP         shift and go to state 302

state 285

    (66) FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .

    *               reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    /               reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    >               reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    <               reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    equals          reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    not_equals      reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    +               reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    minus           reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    ;               reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    and             reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    or              reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    )               reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    ,               reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    ]               reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    to              reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    do              reduce using rule 66 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)


state 286

    (71) LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT . ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB

    )               shift and go to state 303


state 287

    (73) LLAMADA_OPTS -> LLAMADA_OPTS , . EXPRESION SEM_VERIFY_PARAM
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 304
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 288

    (74) LLAMADA_OPTS -> EXPRESION SEM_VERIFY_PARAM .

    ,               reduce using rule 74 (LLAMADA_OPTS -> EXPRESION SEM_VERIFY_PARAM .)
    )               reduce using rule 74 (LLAMADA_OPTS -> EXPRESION SEM_VERIFY_PARAM .)


state 289

    (76) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then . BLOQUE SEM_FILL_GOTO_ANYKIND
    (77) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then . BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 305

state 290

    (78) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF . do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX

    do              shift and go to state 306


state 291

    (79) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV . do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX

    do              shift and go to state 307


state 292

    (81) LECTURA_OPTS -> LECTURA_OPTS , VARIABLE SEM_ADD_READ .

    )               reduce using rule 81 (LECTURA_OPTS -> LECTURA_OPTS , VARIABLE SEM_ADD_READ .)
    ,               reduce using rule 81 (LECTURA_OPTS -> LECTURA_OPTS , VARIABLE SEM_ADD_READ .)


state 293

    (85) ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION SEM_ADD_PRINT .

    )               reduce using rule 85 (ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION SEM_ADD_PRINT .)
    ,               reduce using rule 85 (ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION SEM_ADD_PRINT .)


state 294

    (98) POINT -> point ( EXPRESION , EXPRESION ) . DRAW_POINT
    (147) DRAW_POINT -> .

    ;               reduce using rule 147 (DRAW_POINT -> .)

    DRAW_POINT                     shift and go to state 308

state 295

    (100) LINE -> line ( EXPRESION , EXPRESION , . EXPRESION , EXPRESION ) DRAW_LINE
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 309
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 296

    (101) ARC -> arc ( EXPRESION , EXPRESION ) . DRAW_ARC
    (150) DRAW_ARC -> .

    ;               reduce using rule 150 (DRAW_ARC -> .)

    DRAW_ARC                       shift and go to state 310

state 297

    (41) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .

    ;               reduce using rule 41 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    and             reduce using rule 41 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    or              reduce using rule 41 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    )               reduce using rule 41 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    ,               reduce using rule 41 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    ]               reduce using rule 41 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    to              reduce using rule 41 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    do              reduce using rule 41 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)


state 298

    (42) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .

    ;               reduce using rule 42 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    and             reduce using rule 42 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    or              reduce using rule 42 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    )               reduce using rule 42 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    ,               reduce using rule 42 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    ]               reduce using rule 42 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    to              reduce using rule 42 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    do              reduce using rule 42 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)


state 299

    (49) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .

    >               reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    <               reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    equals          reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    not_equals      reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    +               reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    minus           reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    ;               reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    and             reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    or              reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    )               reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    ,               reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    ]               reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    to              reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    do              reduce using rule 49 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)


state 300

    (50) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .

    >               reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    <               reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    equals          reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    not_equals      reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    +               reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    minus           reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    ;               reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    and             reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    or              reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    )               reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    ,               reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    ]               reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    to              reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    do              reduce using rule 50 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)


state 301

    (52) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .

    *               reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    /               reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    >               reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    <               reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    equals          reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    not_equals      reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    +               reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    minus           reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    ;               reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    and             reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    or              reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    )               reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    ,               reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    ]               reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    to              reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    do              reduce using rule 52 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)


state 302

    (53) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .

    *               reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    /               reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    >               reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    <               reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    equals          reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    not_equals      reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    +               reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    minus           reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    ;               reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    and             reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    or              reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    )               reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    ,               reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    ]               reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    to              reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    do              reduce using rule 53 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)


state 303

    (71) LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) . SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (117) SEM_REMOVE_FONDO_FALSO -> .

    *               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    /               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    >               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    <               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    equals          reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    not_equals      reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    +               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    minus           reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    ;               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    and             reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    or              reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    )               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    ,               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    ]               reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    to              reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)
    do              reduce using rule 117 (SEM_REMOVE_FONDO_FALSO -> .)

    SEM_REMOVE_FONDO_FALSO         shift and go to state 311

state 304

    (73) LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION . SEM_VERIFY_PARAM
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (134) SEM_VERIFY_PARAM -> .
    (146) SEM_PENDING_LOGIC_OP -> .

    ,               reduce using rule 134 (SEM_VERIFY_PARAM -> .)
    )               reduce using rule 134 (SEM_VERIFY_PARAM -> .)
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_VERIFY_PARAM               shift and go to state 312
    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 305

    (76) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE . SEM_FILL_GOTO_ANYKIND
    (77) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE . else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (125) SEM_FILL_GOTO_ANYKIND -> .

    else            shift and go to state 314
    return          reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    }               reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    /               reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    if              reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    while           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    for             reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    read            reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    write           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    id              reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    point           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    circle          reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    penup           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    pendown         reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    color           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    size            reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    clear           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    line            reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    arc             reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)

    SEM_FILL_GOTO_ANYKIND          shift and go to state 313

state 306

    (78) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do . BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 315

state 307

    (79) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do . BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 316

state 308

    (98) POINT -> point ( EXPRESION , EXPRESION ) DRAW_POINT .

    ;               reduce using rule 98 (POINT -> point ( EXPRESION , EXPRESION ) DRAW_POINT .)


state 309

    (100) LINE -> line ( EXPRESION , EXPRESION , EXPRESION . , EXPRESION ) DRAW_LINE
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    ,               shift and go to state 317
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 310

    (101) ARC -> arc ( EXPRESION , EXPRESION ) DRAW_ARC .

    ;               reduce using rule 101 (ARC -> arc ( EXPRESION , EXPRESION ) DRAW_ARC .)


state 311

    (71) LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO . SEM_ADD_GOSUB
    (136) SEM_ADD_GOSUB -> .

    *               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    /               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    >               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    <               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    equals          reduce using rule 136 (SEM_ADD_GOSUB -> .)
    not_equals      reduce using rule 136 (SEM_ADD_GOSUB -> .)
    +               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    minus           reduce using rule 136 (SEM_ADD_GOSUB -> .)
    ;               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    and             reduce using rule 136 (SEM_ADD_GOSUB -> .)
    or              reduce using rule 136 (SEM_ADD_GOSUB -> .)
    )               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    ,               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    ]               reduce using rule 136 (SEM_ADD_GOSUB -> .)
    to              reduce using rule 136 (SEM_ADD_GOSUB -> .)
    do              reduce using rule 136 (SEM_ADD_GOSUB -> .)

    SEM_ADD_GOSUB                  shift and go to state 318

state 312

    (73) LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION SEM_VERIFY_PARAM .

    ,               reduce using rule 73 (LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION SEM_VERIFY_PARAM .)
    )               reduce using rule 73 (LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION SEM_VERIFY_PARAM .)


state 313

    (76) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .

    return          reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    }               reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    /               reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    if              reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    while           reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    for             reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    read            reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    write           reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    id              reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    point           reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    circle          reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    penup           reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    pendown         reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    color           reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    size            reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    clear           reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    line            reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    arc             reduce using rule 76 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)


state 314

    (77) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else . SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (127) SEM_ADD_GOTO_SIMPLE -> .

    {               reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)

    SEM_ADD_GOTO_SIMPLE            shift and go to state 319

state 315

    (78) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE . SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (127) SEM_ADD_GOTO_SIMPLE -> .

    return          reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    }               reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    /               reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    if              reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    while           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    for             reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    read            reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    write           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    id              reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    point           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    circle          reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    penup           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    pendown         reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    color           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    size            reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    clear           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    line            reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    arc             reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)

    SEM_ADD_GOTO_SIMPLE            shift and go to state 320

state 316

    (79) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE . SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (127) SEM_ADD_GOTO_SIMPLE -> .

    return          reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    }               reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    /               reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    if              reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    while           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    for             reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    read            reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    write           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    id              reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    point           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    circle          reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    penup           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    pendown         reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    color           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    size            reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    clear           reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    line            reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)
    arc             reduce using rule 127 (SEM_ADD_GOTO_SIMPLE -> .)

    SEM_ADD_GOTO_SIMPLE            shift and go to state 321

state 317

    (100) LINE -> line ( EXPRESION , EXPRESION , EXPRESION , . EXPRESION ) DRAW_LINE
    (41) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (43) EXPRESION -> . EXP_R
    (44) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (47) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (48) EXP_R -> . EXP_A
    (49) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (50) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (51) EXP_A -> . TERMINO
    (52) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (53) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (54) TERMINO -> . FACTOR
    (63) FACTOR -> . LLAMADA
    (64) FACTOR -> . CTE
    (65) FACTOR -> . VARIABLE
    (66) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (71) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB
    (72) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (67) CTE -> . cte_i
    (68) CTE -> . cte_f
    (69) CTE -> . cte_c
    (70) CTE -> . null
    (31) VARIABLE -> . SEM_ID_FOR_ARRAY [ EXPRESION SEM_CHECK_ARRAY ]
    (32) VARIABLE -> . id
    (133) SEM_VERIFY_FUNC_CALL -> . id
    (33) SEM_ID_FOR_ARRAY -> . id

    (               shift and go to state 130
    cte_i           shift and go to state 132
    cte_f           shift and go to state 133
    cte_c           shift and go to state 134
    null            shift and go to state 135
    id              shift and go to state 136

    EXPRESION                      shift and go to state 322
    EXP_R                          shift and go to state 123
    EXP_A                          shift and go to state 124
    TERMINO                        shift and go to state 125
    FACTOR                         shift and go to state 126
    LLAMADA                        shift and go to state 127
    CTE                            shift and go to state 128
    VARIABLE                       shift and go to state 129
    SEM_VERIFY_FUNC_CALL           shift and go to state 131
    SEM_ID_FOR_ARRAY               shift and go to state 99

state 318

    (71) LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .

    *               reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    /               reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    >               reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    <               reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    equals          reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    not_equals      reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    +               reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    minus           reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    ;               reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    and             reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    or              reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    )               reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    ,               reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    ]               reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    to              reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)
    do              reduce using rule 71 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( SEM_ADD_FONDO_FALSO LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_REMOVE_FONDO_FALSO SEM_ADD_GOSUB .)


state 319

    (77) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE . BLOQUE SEM_FILL_GOTO_ANYKIND
    (35) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { LOOP_ESTATUTO }
    (37) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (38) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 323

state 320

    (78) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE . SEM_FILL_GOTO_COND_INDEX
    (129) SEM_FILL_GOTO_COND_INDEX -> .

    return          reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    }               reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    /               reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    if              reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    while           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    for             reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    read            reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    write           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    id              reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    point           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    circle          reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    penup           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    pendown         reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    color           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    size            reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    clear           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    line            reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    arc             reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)

    SEM_FILL_GOTO_COND_INDEX       shift and go to state 324

state 321

    (79) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE . SEM_FILL_GOTO_COND_INDEX
    (129) SEM_FILL_GOTO_COND_INDEX -> .

    return          reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    }               reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    /               reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    if              reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    while           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    for             reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    read            reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    write           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    id              reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    point           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    circle          reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    penup           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    pendown         reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    color           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    size            reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    clear           reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    line            reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)
    arc             reduce using rule 129 (SEM_FILL_GOTO_COND_INDEX -> .)

    SEM_FILL_GOTO_COND_INDEX       shift and go to state 325

state 322

    (100) LINE -> line ( EXPRESION , EXPRESION , EXPRESION , EXPRESION . ) DRAW_LINE
    (41) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (42) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (146) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 326
    and             reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 146 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 169

state 323

    (77) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE . SEM_FILL_GOTO_ANYKIND
    (125) SEM_FILL_GOTO_ANYKIND -> .

    return          reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    }               reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    /               reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    if              reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    while           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    for             reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    read            reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    write           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    id              reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    point           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    circle          reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    penup           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    pendown         reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    color           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    size            reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    clear           reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    line            reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)
    arc             reduce using rule 125 (SEM_FILL_GOTO_ANYKIND -> .)

    SEM_FILL_GOTO_ANYKIND          shift and go to state 327

state 324

    (78) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .

    return          reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    }               reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    /               reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    if              reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    while           reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    for             reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    read            reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    write           reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    id              reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    point           reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    circle          reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    penup           reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    pendown         reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    color           reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    size            reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    clear           reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    line            reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    arc             reduce using rule 78 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)


state 325

    (79) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .

    return          reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    }               reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    /               reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    if              reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    while           reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    for             reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    read            reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    write           reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    id              reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    point           reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    circle          reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    penup           reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    pendown         reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    color           reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    size            reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    clear           reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    line            reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    arc             reduce using rule 79 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)


state 326

    (100) LINE -> line ( EXPRESION , EXPRESION , EXPRESION , EXPRESION ) . DRAW_LINE
    (149) DRAW_LINE -> .

    ;               reduce using rule 149 (DRAW_LINE -> .)

    DRAW_LINE                      shift and go to state 328

state 327

    (77) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .

    return          reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    }               reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    /               reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    if              reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    while           reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    for             reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    read            reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    write           reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    id              reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    point           reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    circle          reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    penup           reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    pendown         reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    color           reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    size            reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    clear           reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    line            reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    arc             reduce using rule 77 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)


state 328

    (100) LINE -> line ( EXPRESION , EXPRESION , EXPRESION , EXPRESION ) DRAW_LINE .

    ;               reduce using rule 100 (LINE -> line ( EXPRESION , EXPRESION , EXPRESION , EXPRESION ) DRAW_LINE .)

