Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    global

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
Rule 2     PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL
Rule 3     PROGRAMA_OPTS -> DEC_V FUNCS
Rule 4     PROGRAMA_OPTS -> DEC_V
Rule 5     PROGRAMA_OPTS -> FUNCS
Rule 6     PRINCIPAL -> SEM_FILL_GOTO_ANYKIND SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
Rule 7     DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ;
Rule 8     DEC_V -> var TIPO_SIMPLE : LISTA_VAR ;
Rule 9     LISTA_VAR -> LISTA_VAR , VARIABLE_FIX
Rule 10    LISTA_VAR -> VARIABLE_FIX
Rule 11    TIPO_SIMPLE -> int
Rule 12    TIPO_SIMPLE -> float
Rule 13    TIPO_SIMPLE -> char
Rule 14    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 15    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 16    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 17    FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 18    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 19    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 20    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 21    FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
Rule 22    FUNC_TYPES -> char
Rule 23    FUNC_TYPES -> float
Rule 24    FUNC_TYPES -> int
Rule 25    FUNC_TYPES -> void
Rule 26    PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME
Rule 27    PARAMS -> TIPO_SIMPLE PARAM_NAME
Rule 28    PARAM_NAME -> id
Rule 29    VARIABLE_FIX -> id [ cte_i ]
Rule 30    VARIABLE_FIX -> id
Rule 31    VARIABLE -> id [ EXPRESION ]
Rule 32    VARIABLE -> id
Rule 33    BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
Rule 34    BLOQUE -> { LOOP_ESTATUTO }
Rule 35    BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
Rule 36    BLOQUE -> { }
Rule 37    LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO
Rule 38    LOOP_ESTATUTO -> ESTATUTO
Rule 39    EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
Rule 40    EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
Rule 41    EXPRESION -> EXP_R
Rule 42    EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
Rule 43    EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
Rule 44    EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
Rule 45    EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
Rule 46    EXP_R -> EXP_A
Rule 47    EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
Rule 48    EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
Rule 49    EXP_A -> TERMINO
Rule 50    TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
Rule 51    TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
Rule 52    TERMINO -> FACTOR
Rule 53    ESTATUTO -> ASIGNACION ;
Rule 54    ESTATUTO -> CONDICION
Rule 55    ESTATUTO -> WHILE
Rule 56    ESTATUTO -> FOR
Rule 57    ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ;
Rule 58    ESTATUTO -> LECTURA ;
Rule 59    ESTATUTO -> ESCRITURA ;
Rule 60    ESTATUTO -> LLAMADA_BI ;
Rule 61    FACTOR -> LLAMADA
Rule 62    FACTOR -> CTE
Rule 63    FACTOR -> VARIABLE
Rule 64    FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
Rule 65    CTE -> cte_i
Rule 66    CTE -> cte_f
Rule 67    CTE -> cte_c
Rule 68    LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
Rule 69    LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
Rule 70    LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION SEM_VERIFY_PARAM
Rule 71    LLAMADA_OPTS -> EXPRESION SEM_VERIFY_PARAM
Rule 72    ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
Rule 73    CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
Rule 74    CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
Rule 75    WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
Rule 76    FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
Rule 77    LECTURA -> read ( LECTURA_OPTS )
Rule 78    LECTURA_OPTS -> LECTURA_OPTS , id
Rule 79    LECTURA_OPTS -> id
Rule 80    ESCRITURA -> write ( ESCRITURA_OPTS )
Rule 81    ESCRITURA_OPTS -> ESCRITURA_OPTS , cte_s
Rule 82    ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION
Rule 83    ESCRITURA_OPTS -> cte_s
Rule 84    ESCRITURA_OPTS -> EXPRESION
Rule 85    LLAMADA_BI -> POINT
Rule 86    LLAMADA_BI -> CIRCLE
Rule 87    LLAMADA_BI -> PENUP
Rule 88    LLAMADA_BI -> PENDOWN
Rule 89    LLAMADA_BI -> COLOR
Rule 90    LLAMADA_BI -> SIZE
Rule 91    LLAMADA_BI -> CLEAR
Rule 92    CLEAR -> clear ( )
Rule 93    POINT -> point ( EXPRESION , EXPRESION )
Rule 94    CIRCLE -> circle ( EXPRESION )
Rule 95    PENUP -> penup ( )
Rule 96    PENDOWN -> pendown ( )
Rule 97    COLOR -> color ( cte_s )
Rule 98    SIZE -> size ( EXPRESION )
Rule 99    SEM_GLOBAL_NAME -> id
Rule 100   SEM_MAIN_NAME -> main
Rule 101   SEM_FUNC_NAME -> id
Rule 102   SEM_ADD_FUNC -> <empty>
Rule 103   SEM_ADD_GLOBAL_VARIABLES -> <empty>
Rule 104   SEM_ADD_PLUS -> <empty>
Rule 105   SEM_ADD_MINUS -> <empty>
Rule 106   SEM_ADD_TIMES -> <empty>
Rule 107   SEM_ADD_DIVISION -> <empty>
Rule 108   SEM_ADD_EQUALS -> <empty>
Rule 109   SEM_ADD_FONDO_FALSO -> <empty>
Rule 110   SEM_REMOVE_FONDO_FALSO -> <empty>
Rule 111   SEM_ADD_GREATER_THAN -> <empty>
Rule 112   SEM_ADD_LESS_THAN -> <empty>
Rule 113   SEM_ADD_EQUALS_TO -> <empty>
Rule 114   SEM_ADD_NOT_EQUALS_TO -> <empty>
Rule 115   SEM_ADD_AND -> <empty>
Rule 116   SEM_ADD_OR -> <empty>
Rule 117   SEM_ADD_GOTOF -> <empty>
Rule 118   SEM_FILL_GOTO_ANYKIND -> <empty>
Rule 119   SEM_ADD_GOTO_SIMPLE -> <empty>
Rule 120   SEM_ADD_COND_INDEX -> <empty>
Rule 121   SEM_FILL_GOTO_COND_INDEX -> <empty>
Rule 122   SEM_ADD_GOTOV -> <empty>
Rule 123   SEM_ADD_GOTO_MAIN -> <empty>
Rule 124   SEM_ENDFUNC -> <empty>
Rule 125   SEM_VERIFY_FUNC_CALL -> id
Rule 126   SEM_VERIFY_PARAM -> <empty>
Rule 127   SEM_RESET_PARAM_COUNT -> <empty>
Rule 128   SEM_ADD_GOSUB -> <empty>
Rule 129   SEM_VERIFY_RETURN_FUNC -> <empty>
Rule 130   SEM_MUST_BE_VOID_CALL -> <empty>
Rule 131   SEM_PENDING_EXPA_OP -> <empty>
Rule 132   SEM_PENDING_TERMINO_OP -> <empty>
Rule 133   SEM_PENDING_ASSIGNATION_OP -> <empty>
Rule 134   SEM_PENDING_REL_OP -> <empty>
Rule 135   SEM_PENDING_LOGIC_OP -> <empty>

Terminals, with rules where they appear

(                    : 6 14 15 16 17 18 19 20 21 64 68 69 73 74 75 77 80 92 93 94 95 96 97 98
)                    : 6 14 15 16 17 18 19 20 21 64 68 69 73 74 75 77 80 92 93 94 95 96 97 98
*                    : 50
+                    : 47
,                    : 9 26 70 78 81 82 93
/                    : 51 57
:                    : 7 8
;                    : 1 2 7 8 33 35 53 57 58 59 60
<                    : 43
=                    : 72
>                    : 42
[                    : 29 31
]                    : 29 31
and                  : 39
char                 : 13 22
circle               : 94
clear                : 92
color                : 97
cte_c                : 67
cte_f                : 66
cte_i                : 29 65
cte_s                : 81 83 97
do                   : 75 76
else                 : 74
equals               : 44
error                : 
float                : 12 23
for                  : 76
global               : 
id                   : 28 29 30 31 32 78 79 99 101 125
if                   : 73 74
int                  : 11 24
main                 : 100
minus                : 48
module               : 14 15 16 17 18 19 20 21
not_equals           : 45
or                   : 40
pendown              : 96
penup                : 95
point                : 93
program              : 1 2
read                 : 77
return               : 33 35
size                 : 98
then                 : 73 74
to                   : 76
var                  : 7 8
void                 : 25
while                : 75
write                : 80
{                    : 33 34 35 36
}                    : 33 34 35 36

Nonterminals, with rules where they appear

ASIGNACION           : 53 76
BLOQUE               : 6 14 15 16 17 18 19 20 21 73 74 74 75 76
CIRCLE               : 86
CLEAR                : 91
COLOR                : 89
CONDICION            : 54
CTE                  : 62
DEC_V                : 3 4 7 16 17 20 21
ESCRITURA            : 59
ESCRITURA_OPTS       : 80 81 82
ESTATUTO             : 37 38
EXPRESION            : 31 33 35 39 40 64 70 71 72 73 74 75 76 82 84 93 93 94 98
EXP_A                : 42 42 43 43 44 44 45 45 46 47 48
EXP_R                : 39 40 41
FACTOR               : 50 51 52
FOR                  : 56
FUNCS                : 3 5 14 15 16 17
FUNC_TYPES           : 14 15 16 17 18 19 20 21
LECTURA              : 58
LECTURA_OPTS         : 77 78
LISTA_VAR            : 7 8 9
LLAMADA              : 57 61
LLAMADA_BI           : 60
LLAMADA_OPTS         : 68 70
LOOP_ESTATUTO        : 33 34 37
PARAMS               : 15 16 19 20 26
PARAM_NAME           : 26 27
PENDOWN              : 88
PENUP                : 87
POINT                : 85
PRINCIPAL            : 1 2
PROGRAMA             : 0
PROGRAMA_OPTS        : 1
SEM_ADD_AND          : 39
SEM_ADD_COND_INDEX   : 75 76
SEM_ADD_DIVISION     : 51
SEM_ADD_EQUALS       : 72
SEM_ADD_EQUALS_TO    : 44
SEM_ADD_FONDO_FALSO  : 64
SEM_ADD_FUNC         : 1 2 6 14 15 16 17 18 19 20 21
SEM_ADD_GLOBAL_VARIABLES : 6 14 15 16 17 18 19 20 21
SEM_ADD_GOSUB        : 68 69
SEM_ADD_GOTOF        : 73 74 75
SEM_ADD_GOTOV        : 76
SEM_ADD_GOTO_MAIN    : 1 2
SEM_ADD_GOTO_SIMPLE  : 74 75 76
SEM_ADD_GREATER_THAN : 42
SEM_ADD_LESS_THAN    : 43
SEM_ADD_MINUS        : 48
SEM_ADD_NOT_EQUALS_TO : 45
SEM_ADD_OR           : 40
SEM_ADD_PLUS         : 47
SEM_ADD_TIMES        : 50
SEM_ENDFUNC          : 14 15 16 17 18 19 20 21
SEM_FILL_GOTO_ANYKIND : 6 73 74
SEM_FILL_GOTO_COND_INDEX : 75 76
SEM_FUNC_NAME        : 14 15 16 17 18 19 20 21
SEM_GLOBAL_NAME      : 1 2
SEM_MAIN_NAME        : 6
SEM_MUST_BE_VOID_CALL : 57
SEM_PENDING_ASSIGNATION_OP : 72
SEM_PENDING_EXPA_OP  : 47 47 48 48
SEM_PENDING_LOGIC_OP : 39 39 40 40
SEM_PENDING_REL_OP   : 42 43 44 45
SEM_PENDING_TERMINO_OP : 50 50 51 51
SEM_REMOVE_FONDO_FALSO : 64
SEM_RESET_PARAM_COUNT : 68
SEM_VERIFY_FUNC_CALL : 68 69
SEM_VERIFY_PARAM     : 70 71
SEM_VERIFY_RETURN_FUNC : 33 35
SIZE                 : 90
TERMINO              : 47 48 49 50 51
TIPO_SIMPLE          : 7 8 26 27
VARIABLE             : 63 72
VARIABLE_FIX         : 9 10
WHILE                : 55

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> . SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL
    (123) SEM_ADD_GOTO_MAIN -> .

    program         reduce using rule 123 (SEM_ADD_GOTO_MAIN -> .)

    PROGRAMA                       shift and go to state 1
    SEM_ADD_GOTO_MAIN              shift and go to state 2

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN . program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN . program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL

    program         shift and go to state 3


state 3

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program . SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN program . SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL
    (99) SEM_GLOBAL_NAME -> . id

    id              shift and go to state 5

    SEM_GLOBAL_NAME                shift and go to state 4

state 4

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME . SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME . SEM_ADD_FUNC ; PRINCIPAL
    (102) SEM_ADD_FUNC -> .

    ;               reduce using rule 102 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 6

state 5

    (99) SEM_GLOBAL_NAME -> id .

    ;               reduce using rule 99 (SEM_GLOBAL_NAME -> id .)


state 6

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC . ; PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC . ; PRINCIPAL

    ;               shift and go to state 7


state 7

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; . PROGRAMA_OPTS PRINCIPAL
    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; . PRINCIPAL
    (3) PROGRAMA_OPTS -> . DEC_V FUNCS
    (4) PROGRAMA_OPTS -> . DEC_V
    (5) PROGRAMA_OPTS -> . FUNCS
    (6) PRINCIPAL -> . SEM_FILL_GOTO_ANYKIND SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;
    (14) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (18) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (118) SEM_FILL_GOTO_ANYKIND -> .
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    var             shift and go to state 13
    main            reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    PROGRAMA_OPTS                  shift and go to state 8
    PRINCIPAL                      shift and go to state 9
    DEC_V                          shift and go to state 10
    FUNCS                          shift and go to state 11
    SEM_FILL_GOTO_ANYKIND          shift and go to state 12
    FUNC_TYPES                     shift and go to state 14

state 8

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS . PRINCIPAL
    (6) PRINCIPAL -> . SEM_FILL_GOTO_ANYKIND SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (118) SEM_FILL_GOTO_ANYKIND -> .

    main            reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)

    PRINCIPAL                      shift and go to state 19
    SEM_FILL_GOTO_ANYKIND          shift and go to state 12

state 9

    (2) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL .

    $end            reduce using rule 2 (PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PRINCIPAL .)


state 10

    (3) PROGRAMA_OPTS -> DEC_V . FUNCS
    (4) PROGRAMA_OPTS -> DEC_V .
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (14) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> . FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (18) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    main            reduce using rule 4 (PROGRAMA_OPTS -> DEC_V .)
    var             shift and go to state 21
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    FUNCS                          shift and go to state 20
    FUNC_TYPES                     shift and go to state 14

state 11

    (5) PROGRAMA_OPTS -> FUNCS .
    (14) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    main            reduce using rule 5 (PROGRAMA_OPTS -> FUNCS .)
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    FUNC_TYPES                     shift and go to state 22

state 12

    (6) PRINCIPAL -> SEM_FILL_GOTO_ANYKIND . SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (100) SEM_MAIN_NAME -> . main

    main            shift and go to state 24

    SEM_MAIN_NAME                  shift and go to state 23

state 13

    (8) DEC_V -> var . TIPO_SIMPLE : LISTA_VAR ;
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    int             shift and go to state 26
    float           shift and go to state 27
    char            shift and go to state 28

    TIPO_SIMPLE                    shift and go to state 25

state 14

    (18) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC

    module          shift and go to state 29


state 15

    (22) FUNC_TYPES -> char .

    module          reduce using rule 22 (FUNC_TYPES -> char .)


state 16

    (23) FUNC_TYPES -> float .

    module          reduce using rule 23 (FUNC_TYPES -> float .)


state 17

    (24) FUNC_TYPES -> int .

    module          reduce using rule 24 (FUNC_TYPES -> int .)


state 18

    (25) FUNC_TYPES -> void .

    module          reduce using rule 25 (FUNC_TYPES -> void .)


state 19

    (1) PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL .

    $end            reduce using rule 1 (PROGRAMA -> SEM_ADD_GOTO_MAIN program SEM_GLOBAL_NAME SEM_ADD_FUNC ; PROGRAMA_OPTS PRINCIPAL .)


state 20

    (3) PROGRAMA_OPTS -> DEC_V FUNCS .
    (14) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS . FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (22) FUNC_TYPES -> . char
    (23) FUNC_TYPES -> . float
    (24) FUNC_TYPES -> . int
    (25) FUNC_TYPES -> . void

    main            reduce using rule 3 (PROGRAMA_OPTS -> DEC_V FUNCS .)
    char            shift and go to state 15
    float           shift and go to state 16
    int             shift and go to state 17
    void            shift and go to state 18

    FUNC_TYPES                     shift and go to state 22

state 21

    (7) DEC_V -> DEC_V var . TIPO_SIMPLE : LISTA_VAR ;
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    int             shift and go to state 26
    float           shift and go to state 27
    char            shift and go to state 28

    TIPO_SIMPLE                    shift and go to state 30

state 22

    (14) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES . module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC

    module          shift and go to state 31


state 23

    (6) PRINCIPAL -> SEM_FILL_GOTO_ANYKIND SEM_MAIN_NAME . SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (102) SEM_ADD_FUNC -> .

    (               reduce using rule 102 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 32

state 24

    (100) SEM_MAIN_NAME -> main .

    (               reduce using rule 100 (SEM_MAIN_NAME -> main .)


state 25

    (8) DEC_V -> var TIPO_SIMPLE . : LISTA_VAR ;

    :               shift and go to state 33


state 26

    (11) TIPO_SIMPLE -> int .

    :               reduce using rule 11 (TIPO_SIMPLE -> int .)
    id              reduce using rule 11 (TIPO_SIMPLE -> int .)


state 27

    (12) TIPO_SIMPLE -> float .

    :               reduce using rule 12 (TIPO_SIMPLE -> float .)
    id              reduce using rule 12 (TIPO_SIMPLE -> float .)


state 28

    (13) TIPO_SIMPLE -> char .

    :               reduce using rule 13 (TIPO_SIMPLE -> char .)
    id              reduce using rule 13 (TIPO_SIMPLE -> char .)


state 29

    (18) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (101) SEM_FUNC_NAME -> . id

    id              shift and go to state 35

    SEM_FUNC_NAME                  shift and go to state 34

state 30

    (7) DEC_V -> DEC_V var TIPO_SIMPLE . : LISTA_VAR ;

    :               shift and go to state 36


state 31

    (14) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES module . SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (101) SEM_FUNC_NAME -> . id

    id              shift and go to state 35

    SEM_FUNC_NAME                  shift and go to state 37

state 32

    (6) PRINCIPAL -> SEM_FILL_GOTO_ANYKIND SEM_MAIN_NAME SEM_ADD_FUNC . ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE

    (               shift and go to state 38


state 33

    (8) DEC_V -> var TIPO_SIMPLE : . LISTA_VAR ;
    (9) LISTA_VAR -> . LISTA_VAR , VARIABLE_FIX
    (10) LISTA_VAR -> . VARIABLE_FIX
    (29) VARIABLE_FIX -> . id [ cte_i ]
    (30) VARIABLE_FIX -> . id

    id              shift and go to state 41

    LISTA_VAR                      shift and go to state 39
    VARIABLE_FIX                   shift and go to state 40

state 34

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (102) SEM_ADD_FUNC -> .

    (               reduce using rule 102 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 42

state 35

    (101) SEM_FUNC_NAME -> id .

    (               reduce using rule 101 (SEM_FUNC_NAME -> id .)


state 36

    (7) DEC_V -> DEC_V var TIPO_SIMPLE : . LISTA_VAR ;
    (9) LISTA_VAR -> . LISTA_VAR , VARIABLE_FIX
    (10) LISTA_VAR -> . VARIABLE_FIX
    (29) VARIABLE_FIX -> . id [ cte_i ]
    (30) VARIABLE_FIX -> . id

    id              shift and go to state 41

    LISTA_VAR                      shift and go to state 43
    VARIABLE_FIX                   shift and go to state 40

state 37

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME . SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (102) SEM_ADD_FUNC -> .

    (               reduce using rule 102 (SEM_ADD_FUNC -> .)

    SEM_ADD_FUNC                   shift and go to state 44

state 38

    (6) PRINCIPAL -> SEM_FILL_GOTO_ANYKIND SEM_MAIN_NAME SEM_ADD_FUNC ( . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE

    )               shift and go to state 45


state 39

    (8) DEC_V -> var TIPO_SIMPLE : LISTA_VAR . ;
    (9) LISTA_VAR -> LISTA_VAR . , VARIABLE_FIX

    ;               shift and go to state 46
    ,               shift and go to state 47


state 40

    (10) LISTA_VAR -> VARIABLE_FIX .

    ;               reduce using rule 10 (LISTA_VAR -> VARIABLE_FIX .)
    ,               reduce using rule 10 (LISTA_VAR -> VARIABLE_FIX .)


state 41

    (29) VARIABLE_FIX -> id . [ cte_i ]
    (30) VARIABLE_FIX -> id .

    [               shift and go to state 48
    ;               reduce using rule 30 (VARIABLE_FIX -> id .)
    ,               reduce using rule 30 (VARIABLE_FIX -> id .)


state 42

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC

    (               shift and go to state 49


state 43

    (7) DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR . ;
    (9) LISTA_VAR -> LISTA_VAR . , VARIABLE_FIX

    ;               shift and go to state 50
    ,               shift and go to state 47


state 44

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC . ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC

    (               shift and go to state 51


state 45

    (6) PRINCIPAL -> SEM_FILL_GOTO_ANYKIND SEM_MAIN_NAME SEM_ADD_FUNC ( ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE
    (103) SEM_ADD_GLOBAL_VARIABLES -> .

    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 52

state 46

    (8) DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .

    var             reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    char            reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    float           reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    int             reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    void            reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    main            reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)
    {               reduce using rule 8 (DEC_V -> var TIPO_SIMPLE : LISTA_VAR ; .)


state 47

    (9) LISTA_VAR -> LISTA_VAR , . VARIABLE_FIX
    (29) VARIABLE_FIX -> . id [ cte_i ]
    (30) VARIABLE_FIX -> . id

    id              shift and go to state 41

    VARIABLE_FIX                   shift and go to state 53

state 48

    (29) VARIABLE_FIX -> id [ . cte_i ]

    cte_i           shift and go to state 54


state 49

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (26) PARAMS -> . PARAMS , TIPO_SIMPLE PARAM_NAME
    (27) PARAMS -> . TIPO_SIMPLE PARAM_NAME
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    )               shift and go to state 55
    int             shift and go to state 26
    float           shift and go to state 27
    char            shift and go to state 28

    PARAMS                         shift and go to state 56
    TIPO_SIMPLE                    shift and go to state 57

state 50

    (7) DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .

    var             reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    char            reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    float           reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    int             reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    void            reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    main            reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)
    {               reduce using rule 7 (DEC_V -> DEC_V var TIPO_SIMPLE : LISTA_VAR ; .)


state 51

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (26) PARAMS -> . PARAMS , TIPO_SIMPLE PARAM_NAME
    (27) PARAMS -> . TIPO_SIMPLE PARAM_NAME
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    )               shift and go to state 58
    int             shift and go to state 26
    float           shift and go to state 27
    char            shift and go to state 28

    PARAMS                         shift and go to state 59
    TIPO_SIMPLE                    shift and go to state 57

state 52

    (6) PRINCIPAL -> SEM_FILL_GOTO_ANYKIND SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 60

state 53

    (9) LISTA_VAR -> LISTA_VAR , VARIABLE_FIX .

    ;               reduce using rule 9 (LISTA_VAR -> LISTA_VAR , VARIABLE_FIX .)
    ,               reduce using rule 9 (LISTA_VAR -> LISTA_VAR , VARIABLE_FIX .)


state 54

    (29) VARIABLE_FIX -> id [ cte_i . ]

    ]               shift and go to state 62


state 55

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (103) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 13

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 63
    DEC_V                          shift and go to state 64

state 56

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (26) PARAMS -> PARAMS . , TIPO_SIMPLE PARAM_NAME

    )               shift and go to state 65
    ,               shift and go to state 66


state 57

    (27) PARAMS -> TIPO_SIMPLE . PARAM_NAME
    (28) PARAM_NAME -> . id

    id              shift and go to state 68

    PARAM_NAME                     shift and go to state 67

state 58

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (103) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 13

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 69
    DEC_V                          shift and go to state 70

state 59

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS . ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (26) PARAMS -> PARAMS . , TIPO_SIMPLE PARAM_NAME

    )               shift and go to state 71
    ,               shift and go to state 66


state 60

    (6) PRINCIPAL -> SEM_FILL_GOTO_ANYKIND SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .

    $end            reduce using rule 6 (PRINCIPAL -> SEM_FILL_GOTO_ANYKIND SEM_MAIN_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE .)


state 61

    (33) BLOQUE -> { . LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> { . LOOP_ESTATUTO }
    (35) BLOQUE -> { . return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> { . }
    (37) LOOP_ESTATUTO -> . LOOP_ESTATUTO ESTATUTO
    (38) LOOP_ESTATUTO -> . ESTATUTO
    (53) ESTATUTO -> . ASIGNACION ;
    (54) ESTATUTO -> . CONDICION
    (55) ESTATUTO -> . WHILE
    (56) ESTATUTO -> . FOR
    (57) ESTATUTO -> . / SEM_MUST_BE_VOID_CALL LLAMADA ;
    (58) ESTATUTO -> . LECTURA ;
    (59) ESTATUTO -> . ESCRITURA ;
    (60) ESTATUTO -> . LLAMADA_BI ;
    (72) ASIGNACION -> . VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (73) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (74) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (75) WHILE -> . while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (76) FOR -> . for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (77) LECTURA -> . read ( LECTURA_OPTS )
    (80) ESCRITURA -> . write ( ESCRITURA_OPTS )
    (85) LLAMADA_BI -> . POINT
    (86) LLAMADA_BI -> . CIRCLE
    (87) LLAMADA_BI -> . PENUP
    (88) LLAMADA_BI -> . PENDOWN
    (89) LLAMADA_BI -> . COLOR
    (90) LLAMADA_BI -> . SIZE
    (91) LLAMADA_BI -> . CLEAR
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (93) POINT -> . point ( EXPRESION , EXPRESION )
    (94) CIRCLE -> . circle ( EXPRESION )
    (95) PENUP -> . penup ( )
    (96) PENDOWN -> . pendown ( )
    (97) COLOR -> . color ( cte_s )
    (98) SIZE -> . size ( EXPRESION )
    (92) CLEAR -> . clear ( )

    return          shift and go to state 73
    }               shift and go to state 74
    /               shift and go to state 80
    if              shift and go to state 85
    while           shift and go to state 86
    for             shift and go to state 87
    read            shift and go to state 88
    write           shift and go to state 89
    id              shift and go to state 97
    point           shift and go to state 98
    circle          shift and go to state 99
    penup           shift and go to state 100
    pendown         shift and go to state 101
    color           shift and go to state 102
    size            shift and go to state 103
    clear           shift and go to state 104

    LOOP_ESTATUTO                  shift and go to state 72
    ESTATUTO                       shift and go to state 75
    ASIGNACION                     shift and go to state 76
    CONDICION                      shift and go to state 77
    WHILE                          shift and go to state 78
    FOR                            shift and go to state 79
    LECTURA                        shift and go to state 81
    ESCRITURA                      shift and go to state 82
    LLAMADA_BI                     shift and go to state 83
    VARIABLE                       shift and go to state 84
    POINT                          shift and go to state 90
    CIRCLE                         shift and go to state 91
    PENUP                          shift and go to state 92
    PENDOWN                        shift and go to state 93
    COLOR                          shift and go to state 94
    SIZE                           shift and go to state 95
    CLEAR                          shift and go to state 96

state 62

    (29) VARIABLE_FIX -> id [ cte_i ] .

    ;               reduce using rule 29 (VARIABLE_FIX -> id [ cte_i ] .)
    ,               reduce using rule 29 (VARIABLE_FIX -> id [ cte_i ] .)


state 63

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 105

state 64

    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (103) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 106

state 65

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (103) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 13

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 107
    DEC_V                          shift and go to state 108

state 66

    (26) PARAMS -> PARAMS , . TIPO_SIMPLE PARAM_NAME
    (11) TIPO_SIMPLE -> . int
    (12) TIPO_SIMPLE -> . float
    (13) TIPO_SIMPLE -> . char

    int             shift and go to state 26
    float           shift and go to state 27
    char            shift and go to state 28

    TIPO_SIMPLE                    shift and go to state 109

state 67

    (27) PARAMS -> TIPO_SIMPLE PARAM_NAME .

    )               reduce using rule 27 (PARAMS -> TIPO_SIMPLE PARAM_NAME .)
    ,               reduce using rule 27 (PARAMS -> TIPO_SIMPLE PARAM_NAME .)


state 68

    (28) PARAM_NAME -> id .

    )               reduce using rule 28 (PARAM_NAME -> id .)
    ,               reduce using rule 28 (PARAM_NAME -> id .)


state 69

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 110

state 70

    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (103) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 111

state 71

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) . DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (103) SEM_ADD_GLOBAL_VARIABLES -> .
    (7) DEC_V -> . DEC_V var TIPO_SIMPLE : LISTA_VAR ;
    (8) DEC_V -> . var TIPO_SIMPLE : LISTA_VAR ;

    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)
    var             shift and go to state 13

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 112
    DEC_V                          shift and go to state 113

state 72

    (33) BLOQUE -> { LOOP_ESTATUTO . return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> { LOOP_ESTATUTO . }
    (37) LOOP_ESTATUTO -> LOOP_ESTATUTO . ESTATUTO
    (53) ESTATUTO -> . ASIGNACION ;
    (54) ESTATUTO -> . CONDICION
    (55) ESTATUTO -> . WHILE
    (56) ESTATUTO -> . FOR
    (57) ESTATUTO -> . / SEM_MUST_BE_VOID_CALL LLAMADA ;
    (58) ESTATUTO -> . LECTURA ;
    (59) ESTATUTO -> . ESCRITURA ;
    (60) ESTATUTO -> . LLAMADA_BI ;
    (72) ASIGNACION -> . VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (73) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (74) CONDICION -> . if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (75) WHILE -> . while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (76) FOR -> . for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (77) LECTURA -> . read ( LECTURA_OPTS )
    (80) ESCRITURA -> . write ( ESCRITURA_OPTS )
    (85) LLAMADA_BI -> . POINT
    (86) LLAMADA_BI -> . CIRCLE
    (87) LLAMADA_BI -> . PENUP
    (88) LLAMADA_BI -> . PENDOWN
    (89) LLAMADA_BI -> . COLOR
    (90) LLAMADA_BI -> . SIZE
    (91) LLAMADA_BI -> . CLEAR
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (93) POINT -> . point ( EXPRESION , EXPRESION )
    (94) CIRCLE -> . circle ( EXPRESION )
    (95) PENUP -> . penup ( )
    (96) PENDOWN -> . pendown ( )
    (97) COLOR -> . color ( cte_s )
    (98) SIZE -> . size ( EXPRESION )
    (92) CLEAR -> . clear ( )

    return          shift and go to state 114
    }               shift and go to state 115
    /               shift and go to state 80
    if              shift and go to state 85
    while           shift and go to state 86
    for             shift and go to state 87
    read            shift and go to state 88
    write           shift and go to state 89
    id              shift and go to state 97
    point           shift and go to state 98
    circle          shift and go to state 99
    penup           shift and go to state 100
    pendown         shift and go to state 101
    color           shift and go to state 102
    size            shift and go to state 103
    clear           shift and go to state 104

    ESTATUTO                       shift and go to state 116
    ASIGNACION                     shift and go to state 76
    CONDICION                      shift and go to state 77
    WHILE                          shift and go to state 78
    FOR                            shift and go to state 79
    LECTURA                        shift and go to state 81
    ESCRITURA                      shift and go to state 82
    LLAMADA_BI                     shift and go to state 83
    VARIABLE                       shift and go to state 84
    POINT                          shift and go to state 90
    CIRCLE                         shift and go to state 91
    PENUP                          shift and go to state 92
    PENDOWN                        shift and go to state 93
    COLOR                          shift and go to state 94
    SIZE                           shift and go to state 95
    CLEAR                          shift and go to state 96

state 73

    (35) BLOQUE -> { return . EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 117
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 74

    (36) BLOQUE -> { } .

    $end            reduce using rule 36 (BLOQUE -> { } .)
    char            reduce using rule 36 (BLOQUE -> { } .)
    float           reduce using rule 36 (BLOQUE -> { } .)
    int             reduce using rule 36 (BLOQUE -> { } .)
    void            reduce using rule 36 (BLOQUE -> { } .)
    main            reduce using rule 36 (BLOQUE -> { } .)
    else            reduce using rule 36 (BLOQUE -> { } .)
    return          reduce using rule 36 (BLOQUE -> { } .)
    }               reduce using rule 36 (BLOQUE -> { } .)
    /               reduce using rule 36 (BLOQUE -> { } .)
    if              reduce using rule 36 (BLOQUE -> { } .)
    while           reduce using rule 36 (BLOQUE -> { } .)
    for             reduce using rule 36 (BLOQUE -> { } .)
    read            reduce using rule 36 (BLOQUE -> { } .)
    write           reduce using rule 36 (BLOQUE -> { } .)
    id              reduce using rule 36 (BLOQUE -> { } .)
    point           reduce using rule 36 (BLOQUE -> { } .)
    circle          reduce using rule 36 (BLOQUE -> { } .)
    penup           reduce using rule 36 (BLOQUE -> { } .)
    pendown         reduce using rule 36 (BLOQUE -> { } .)
    color           reduce using rule 36 (BLOQUE -> { } .)
    size            reduce using rule 36 (BLOQUE -> { } .)
    clear           reduce using rule 36 (BLOQUE -> { } .)


state 75

    (38) LOOP_ESTATUTO -> ESTATUTO .

    return          reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    }               reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    /               reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    if              reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    while           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    for             reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    read            reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    write           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    id              reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    point           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    circle          reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    penup           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    pendown         reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    color           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    size            reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)
    clear           reduce using rule 38 (LOOP_ESTATUTO -> ESTATUTO .)


state 76

    (53) ESTATUTO -> ASIGNACION . ;

    ;               shift and go to state 131


state 77

    (54) ESTATUTO -> CONDICION .

    return          reduce using rule 54 (ESTATUTO -> CONDICION .)
    }               reduce using rule 54 (ESTATUTO -> CONDICION .)
    /               reduce using rule 54 (ESTATUTO -> CONDICION .)
    if              reduce using rule 54 (ESTATUTO -> CONDICION .)
    while           reduce using rule 54 (ESTATUTO -> CONDICION .)
    for             reduce using rule 54 (ESTATUTO -> CONDICION .)
    read            reduce using rule 54 (ESTATUTO -> CONDICION .)
    write           reduce using rule 54 (ESTATUTO -> CONDICION .)
    id              reduce using rule 54 (ESTATUTO -> CONDICION .)
    point           reduce using rule 54 (ESTATUTO -> CONDICION .)
    circle          reduce using rule 54 (ESTATUTO -> CONDICION .)
    penup           reduce using rule 54 (ESTATUTO -> CONDICION .)
    pendown         reduce using rule 54 (ESTATUTO -> CONDICION .)
    color           reduce using rule 54 (ESTATUTO -> CONDICION .)
    size            reduce using rule 54 (ESTATUTO -> CONDICION .)
    clear           reduce using rule 54 (ESTATUTO -> CONDICION .)


state 78

    (55) ESTATUTO -> WHILE .

    return          reduce using rule 55 (ESTATUTO -> WHILE .)
    }               reduce using rule 55 (ESTATUTO -> WHILE .)
    /               reduce using rule 55 (ESTATUTO -> WHILE .)
    if              reduce using rule 55 (ESTATUTO -> WHILE .)
    while           reduce using rule 55 (ESTATUTO -> WHILE .)
    for             reduce using rule 55 (ESTATUTO -> WHILE .)
    read            reduce using rule 55 (ESTATUTO -> WHILE .)
    write           reduce using rule 55 (ESTATUTO -> WHILE .)
    id              reduce using rule 55 (ESTATUTO -> WHILE .)
    point           reduce using rule 55 (ESTATUTO -> WHILE .)
    circle          reduce using rule 55 (ESTATUTO -> WHILE .)
    penup           reduce using rule 55 (ESTATUTO -> WHILE .)
    pendown         reduce using rule 55 (ESTATUTO -> WHILE .)
    color           reduce using rule 55 (ESTATUTO -> WHILE .)
    size            reduce using rule 55 (ESTATUTO -> WHILE .)
    clear           reduce using rule 55 (ESTATUTO -> WHILE .)


state 79

    (56) ESTATUTO -> FOR .

    return          reduce using rule 56 (ESTATUTO -> FOR .)
    }               reduce using rule 56 (ESTATUTO -> FOR .)
    /               reduce using rule 56 (ESTATUTO -> FOR .)
    if              reduce using rule 56 (ESTATUTO -> FOR .)
    while           reduce using rule 56 (ESTATUTO -> FOR .)
    for             reduce using rule 56 (ESTATUTO -> FOR .)
    read            reduce using rule 56 (ESTATUTO -> FOR .)
    write           reduce using rule 56 (ESTATUTO -> FOR .)
    id              reduce using rule 56 (ESTATUTO -> FOR .)
    point           reduce using rule 56 (ESTATUTO -> FOR .)
    circle          reduce using rule 56 (ESTATUTO -> FOR .)
    penup           reduce using rule 56 (ESTATUTO -> FOR .)
    pendown         reduce using rule 56 (ESTATUTO -> FOR .)
    color           reduce using rule 56 (ESTATUTO -> FOR .)
    size            reduce using rule 56 (ESTATUTO -> FOR .)
    clear           reduce using rule 56 (ESTATUTO -> FOR .)


state 80

    (57) ESTATUTO -> / . SEM_MUST_BE_VOID_CALL LLAMADA ;
    (130) SEM_MUST_BE_VOID_CALL -> .

    id              reduce using rule 130 (SEM_MUST_BE_VOID_CALL -> .)

    SEM_MUST_BE_VOID_CALL          shift and go to state 132

state 81

    (58) ESTATUTO -> LECTURA . ;

    ;               shift and go to state 133


state 82

    (59) ESTATUTO -> ESCRITURA . ;

    ;               shift and go to state 134


state 83

    (60) ESTATUTO -> LLAMADA_BI . ;

    ;               shift and go to state 135


state 84

    (72) ASIGNACION -> VARIABLE . = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP

    =               shift and go to state 136


state 85

    (73) CONDICION -> if . ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (74) CONDICION -> if . ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND

    (               shift and go to state 137


state 86

    (75) WHILE -> while . SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (120) SEM_ADD_COND_INDEX -> .

    (               reduce using rule 120 (SEM_ADD_COND_INDEX -> .)

    SEM_ADD_COND_INDEX             shift and go to state 138

state 87

    (76) FOR -> for . ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (72) ASIGNACION -> . VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id

    id              shift and go to state 97

    ASIGNACION                     shift and go to state 139
    VARIABLE                       shift and go to state 84

state 88

    (77) LECTURA -> read . ( LECTURA_OPTS )

    (               shift and go to state 140


state 89

    (80) ESCRITURA -> write . ( ESCRITURA_OPTS )

    (               shift and go to state 141


state 90

    (85) LLAMADA_BI -> POINT .

    ;               reduce using rule 85 (LLAMADA_BI -> POINT .)


state 91

    (86) LLAMADA_BI -> CIRCLE .

    ;               reduce using rule 86 (LLAMADA_BI -> CIRCLE .)


state 92

    (87) LLAMADA_BI -> PENUP .

    ;               reduce using rule 87 (LLAMADA_BI -> PENUP .)


state 93

    (88) LLAMADA_BI -> PENDOWN .

    ;               reduce using rule 88 (LLAMADA_BI -> PENDOWN .)


state 94

    (89) LLAMADA_BI -> COLOR .

    ;               reduce using rule 89 (LLAMADA_BI -> COLOR .)


state 95

    (90) LLAMADA_BI -> SIZE .

    ;               reduce using rule 90 (LLAMADA_BI -> SIZE .)


state 96

    (91) LLAMADA_BI -> CLEAR .

    ;               reduce using rule 91 (LLAMADA_BI -> CLEAR .)


state 97

    (31) VARIABLE -> id . [ EXPRESION ]
    (32) VARIABLE -> id .

    [               shift and go to state 142
    =               reduce using rule 32 (VARIABLE -> id .)


state 98

    (93) POINT -> point . ( EXPRESION , EXPRESION )

    (               shift and go to state 143


state 99

    (94) CIRCLE -> circle . ( EXPRESION )

    (               shift and go to state 144


state 100

    (95) PENUP -> penup . ( )

    (               shift and go to state 145


state 101

    (96) PENDOWN -> pendown . ( )

    (               shift and go to state 146


state 102

    (97) COLOR -> color . ( cte_s )

    (               shift and go to state 147


state 103

    (98) SIZE -> size . ( EXPRESION )

    (               shift and go to state 148


state 104

    (92) CLEAR -> clear . ( )

    (               shift and go to state 149


state 105

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (124) SEM_ENDFUNC -> .

    char            reduce using rule 124 (SEM_ENDFUNC -> .)
    float           reduce using rule 124 (SEM_ENDFUNC -> .)
    int             reduce using rule 124 (SEM_ENDFUNC -> .)
    void            reduce using rule 124 (SEM_ENDFUNC -> .)
    main            reduce using rule 124 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 150

state 106

    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 151

state 107

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 152

state 108

    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (103) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 153

state 109

    (26) PARAMS -> PARAMS , TIPO_SIMPLE . PARAM_NAME
    (28) PARAM_NAME -> . id

    id              shift and go to state 68

    PARAM_NAME                     shift and go to state 154

state 110

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (124) SEM_ENDFUNC -> .

    char            reduce using rule 124 (SEM_ENDFUNC -> .)
    float           reduce using rule 124 (SEM_ENDFUNC -> .)
    int             reduce using rule 124 (SEM_ENDFUNC -> .)
    void            reduce using rule 124 (SEM_ENDFUNC -> .)
    main            reduce using rule 124 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 155

state 111

    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 156

state 112

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 157

state 113

    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V . SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC
    (7) DEC_V -> DEC_V . var TIPO_SIMPLE : LISTA_VAR ;
    (103) SEM_ADD_GLOBAL_VARIABLES -> .

    var             shift and go to state 21
    {               reduce using rule 103 (SEM_ADD_GLOBAL_VARIABLES -> .)

    SEM_ADD_GLOBAL_VARIABLES       shift and go to state 158

state 114

    (33) BLOQUE -> { LOOP_ESTATUTO return . EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 159
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 115

    (34) BLOQUE -> { LOOP_ESTATUTO } .

    $end            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    char            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    float           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    int             reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    void            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    main            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    else            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    return          reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    }               reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    /               reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    if              reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    while           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    for             reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    read            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    write           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    id              reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    point           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    circle          reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    penup           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    pendown         reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    color           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    size            reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)
    clear           reduce using rule 34 (BLOQUE -> { LOOP_ESTATUTO } .)


state 116

    (37) LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .

    return          reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    }               reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    /               reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    if              reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    while           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    for             reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    read            reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    write           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    id              reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    point           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    circle          reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    penup           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    pendown         reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    color           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    size            reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)
    clear           reduce using rule 37 (LOOP_ESTATUTO -> LOOP_ESTATUTO ESTATUTO .)


state 117

    (35) BLOQUE -> { return EXPRESION . SEM_VERIFY_RETURN_FUNC ; }
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (129) SEM_VERIFY_RETURN_FUNC -> .
    (135) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 129 (SEM_VERIFY_RETURN_FUNC -> .)
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_VERIFY_RETURN_FUNC         shift and go to state 160
    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 118

    (41) EXPRESION -> EXP_R .

    ;               reduce using rule 41 (EXPRESION -> EXP_R .)
    and             reduce using rule 41 (EXPRESION -> EXP_R .)
    or              reduce using rule 41 (EXPRESION -> EXP_R .)
    )               reduce using rule 41 (EXPRESION -> EXP_R .)
    ,               reduce using rule 41 (EXPRESION -> EXP_R .)
    ]               reduce using rule 41 (EXPRESION -> EXP_R .)
    to              reduce using rule 41 (EXPRESION -> EXP_R .)
    do              reduce using rule 41 (EXPRESION -> EXP_R .)


state 119

    (42) EXP_R -> EXP_A . > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> EXP_A . < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> EXP_A . equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> EXP_A . not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> EXP_A .
    (47) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (131) SEM_PENDING_EXPA_OP -> .

    >               shift and go to state 162
    <               shift and go to state 163
    equals          shift and go to state 164
    not_equals      shift and go to state 165
    ;               reduce using rule 46 (EXP_R -> EXP_A .)
    and             reduce using rule 46 (EXP_R -> EXP_A .)
    or              reduce using rule 46 (EXP_R -> EXP_A .)
    )               reduce using rule 46 (EXP_R -> EXP_A .)
    ,               reduce using rule 46 (EXP_R -> EXP_A .)
    ]               reduce using rule 46 (EXP_R -> EXP_A .)
    to              reduce using rule 46 (EXP_R -> EXP_A .)
    do              reduce using rule 46 (EXP_R -> EXP_A .)
    +               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_EXPA_OP            shift and go to state 166

state 120

    (49) EXP_A -> TERMINO .
    (50) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (132) SEM_PENDING_TERMINO_OP -> .

    >               reduce using rule 49 (EXP_A -> TERMINO .)
    <               reduce using rule 49 (EXP_A -> TERMINO .)
    equals          reduce using rule 49 (EXP_A -> TERMINO .)
    not_equals      reduce using rule 49 (EXP_A -> TERMINO .)
    +               reduce using rule 49 (EXP_A -> TERMINO .)
    minus           reduce using rule 49 (EXP_A -> TERMINO .)
    ;               reduce using rule 49 (EXP_A -> TERMINO .)
    and             reduce using rule 49 (EXP_A -> TERMINO .)
    or              reduce using rule 49 (EXP_A -> TERMINO .)
    )               reduce using rule 49 (EXP_A -> TERMINO .)
    ,               reduce using rule 49 (EXP_A -> TERMINO .)
    ]               reduce using rule 49 (EXP_A -> TERMINO .)
    to              reduce using rule 49 (EXP_A -> TERMINO .)
    do              reduce using rule 49 (EXP_A -> TERMINO .)
    *               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_TERMINO_OP         shift and go to state 167

state 121

    (52) TERMINO -> FACTOR .

    *               reduce using rule 52 (TERMINO -> FACTOR .)
    /               reduce using rule 52 (TERMINO -> FACTOR .)
    >               reduce using rule 52 (TERMINO -> FACTOR .)
    <               reduce using rule 52 (TERMINO -> FACTOR .)
    equals          reduce using rule 52 (TERMINO -> FACTOR .)
    not_equals      reduce using rule 52 (TERMINO -> FACTOR .)
    +               reduce using rule 52 (TERMINO -> FACTOR .)
    minus           reduce using rule 52 (TERMINO -> FACTOR .)
    ;               reduce using rule 52 (TERMINO -> FACTOR .)
    and             reduce using rule 52 (TERMINO -> FACTOR .)
    or              reduce using rule 52 (TERMINO -> FACTOR .)
    )               reduce using rule 52 (TERMINO -> FACTOR .)
    ,               reduce using rule 52 (TERMINO -> FACTOR .)
    ]               reduce using rule 52 (TERMINO -> FACTOR .)
    to              reduce using rule 52 (TERMINO -> FACTOR .)
    do              reduce using rule 52 (TERMINO -> FACTOR .)


state 122

    (61) FACTOR -> LLAMADA .

    *               reduce using rule 61 (FACTOR -> LLAMADA .)
    /               reduce using rule 61 (FACTOR -> LLAMADA .)
    >               reduce using rule 61 (FACTOR -> LLAMADA .)
    <               reduce using rule 61 (FACTOR -> LLAMADA .)
    equals          reduce using rule 61 (FACTOR -> LLAMADA .)
    not_equals      reduce using rule 61 (FACTOR -> LLAMADA .)
    +               reduce using rule 61 (FACTOR -> LLAMADA .)
    minus           reduce using rule 61 (FACTOR -> LLAMADA .)
    ;               reduce using rule 61 (FACTOR -> LLAMADA .)
    and             reduce using rule 61 (FACTOR -> LLAMADA .)
    or              reduce using rule 61 (FACTOR -> LLAMADA .)
    )               reduce using rule 61 (FACTOR -> LLAMADA .)
    ,               reduce using rule 61 (FACTOR -> LLAMADA .)
    ]               reduce using rule 61 (FACTOR -> LLAMADA .)
    to              reduce using rule 61 (FACTOR -> LLAMADA .)
    do              reduce using rule 61 (FACTOR -> LLAMADA .)


state 123

    (62) FACTOR -> CTE .

    *               reduce using rule 62 (FACTOR -> CTE .)
    /               reduce using rule 62 (FACTOR -> CTE .)
    >               reduce using rule 62 (FACTOR -> CTE .)
    <               reduce using rule 62 (FACTOR -> CTE .)
    equals          reduce using rule 62 (FACTOR -> CTE .)
    not_equals      reduce using rule 62 (FACTOR -> CTE .)
    +               reduce using rule 62 (FACTOR -> CTE .)
    minus           reduce using rule 62 (FACTOR -> CTE .)
    ;               reduce using rule 62 (FACTOR -> CTE .)
    and             reduce using rule 62 (FACTOR -> CTE .)
    or              reduce using rule 62 (FACTOR -> CTE .)
    )               reduce using rule 62 (FACTOR -> CTE .)
    ,               reduce using rule 62 (FACTOR -> CTE .)
    ]               reduce using rule 62 (FACTOR -> CTE .)
    to              reduce using rule 62 (FACTOR -> CTE .)
    do              reduce using rule 62 (FACTOR -> CTE .)


state 124

    (63) FACTOR -> VARIABLE .

    *               reduce using rule 63 (FACTOR -> VARIABLE .)
    /               reduce using rule 63 (FACTOR -> VARIABLE .)
    >               reduce using rule 63 (FACTOR -> VARIABLE .)
    <               reduce using rule 63 (FACTOR -> VARIABLE .)
    equals          reduce using rule 63 (FACTOR -> VARIABLE .)
    not_equals      reduce using rule 63 (FACTOR -> VARIABLE .)
    +               reduce using rule 63 (FACTOR -> VARIABLE .)
    minus           reduce using rule 63 (FACTOR -> VARIABLE .)
    ;               reduce using rule 63 (FACTOR -> VARIABLE .)
    and             reduce using rule 63 (FACTOR -> VARIABLE .)
    or              reduce using rule 63 (FACTOR -> VARIABLE .)
    )               reduce using rule 63 (FACTOR -> VARIABLE .)
    ,               reduce using rule 63 (FACTOR -> VARIABLE .)
    ]               reduce using rule 63 (FACTOR -> VARIABLE .)
    to              reduce using rule 63 (FACTOR -> VARIABLE .)
    do              reduce using rule 63 (FACTOR -> VARIABLE .)


state 125

    (64) FACTOR -> ( . SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (109) SEM_ADD_FONDO_FALSO -> .

    (               reduce using rule 109 (SEM_ADD_FONDO_FALSO -> .)
    cte_i           reduce using rule 109 (SEM_ADD_FONDO_FALSO -> .)
    cte_f           reduce using rule 109 (SEM_ADD_FONDO_FALSO -> .)
    cte_c           reduce using rule 109 (SEM_ADD_FONDO_FALSO -> .)
    id              reduce using rule 109 (SEM_ADD_FONDO_FALSO -> .)

    SEM_ADD_FONDO_FALSO            shift and go to state 168

state 126

    (68) LLAMADA -> SEM_VERIFY_FUNC_CALL . ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> SEM_VERIFY_FUNC_CALL . ( ) SEM_ADD_GOSUB

    (               shift and go to state 169


state 127

    (65) CTE -> cte_i .

    *               reduce using rule 65 (CTE -> cte_i .)
    /               reduce using rule 65 (CTE -> cte_i .)
    >               reduce using rule 65 (CTE -> cte_i .)
    <               reduce using rule 65 (CTE -> cte_i .)
    equals          reduce using rule 65 (CTE -> cte_i .)
    not_equals      reduce using rule 65 (CTE -> cte_i .)
    +               reduce using rule 65 (CTE -> cte_i .)
    minus           reduce using rule 65 (CTE -> cte_i .)
    ;               reduce using rule 65 (CTE -> cte_i .)
    and             reduce using rule 65 (CTE -> cte_i .)
    or              reduce using rule 65 (CTE -> cte_i .)
    )               reduce using rule 65 (CTE -> cte_i .)
    ,               reduce using rule 65 (CTE -> cte_i .)
    ]               reduce using rule 65 (CTE -> cte_i .)
    to              reduce using rule 65 (CTE -> cte_i .)
    do              reduce using rule 65 (CTE -> cte_i .)


state 128

    (66) CTE -> cte_f .

    *               reduce using rule 66 (CTE -> cte_f .)
    /               reduce using rule 66 (CTE -> cte_f .)
    >               reduce using rule 66 (CTE -> cte_f .)
    <               reduce using rule 66 (CTE -> cte_f .)
    equals          reduce using rule 66 (CTE -> cte_f .)
    not_equals      reduce using rule 66 (CTE -> cte_f .)
    +               reduce using rule 66 (CTE -> cte_f .)
    minus           reduce using rule 66 (CTE -> cte_f .)
    ;               reduce using rule 66 (CTE -> cte_f .)
    and             reduce using rule 66 (CTE -> cte_f .)
    or              reduce using rule 66 (CTE -> cte_f .)
    )               reduce using rule 66 (CTE -> cte_f .)
    ,               reduce using rule 66 (CTE -> cte_f .)
    ]               reduce using rule 66 (CTE -> cte_f .)
    to              reduce using rule 66 (CTE -> cte_f .)
    do              reduce using rule 66 (CTE -> cte_f .)


state 129

    (67) CTE -> cte_c .

    *               reduce using rule 67 (CTE -> cte_c .)
    /               reduce using rule 67 (CTE -> cte_c .)
    >               reduce using rule 67 (CTE -> cte_c .)
    <               reduce using rule 67 (CTE -> cte_c .)
    equals          reduce using rule 67 (CTE -> cte_c .)
    not_equals      reduce using rule 67 (CTE -> cte_c .)
    +               reduce using rule 67 (CTE -> cte_c .)
    minus           reduce using rule 67 (CTE -> cte_c .)
    ;               reduce using rule 67 (CTE -> cte_c .)
    and             reduce using rule 67 (CTE -> cte_c .)
    or              reduce using rule 67 (CTE -> cte_c .)
    )               reduce using rule 67 (CTE -> cte_c .)
    ,               reduce using rule 67 (CTE -> cte_c .)
    ]               reduce using rule 67 (CTE -> cte_c .)
    to              reduce using rule 67 (CTE -> cte_c .)
    do              reduce using rule 67 (CTE -> cte_c .)


state 130

    (31) VARIABLE -> id . [ EXPRESION ]
    (32) VARIABLE -> id .
    (125) SEM_VERIFY_FUNC_CALL -> id .

    [               shift and go to state 142
    *               reduce using rule 32 (VARIABLE -> id .)
    /               reduce using rule 32 (VARIABLE -> id .)
    >               reduce using rule 32 (VARIABLE -> id .)
    <               reduce using rule 32 (VARIABLE -> id .)
    equals          reduce using rule 32 (VARIABLE -> id .)
    not_equals      reduce using rule 32 (VARIABLE -> id .)
    +               reduce using rule 32 (VARIABLE -> id .)
    minus           reduce using rule 32 (VARIABLE -> id .)
    ;               reduce using rule 32 (VARIABLE -> id .)
    and             reduce using rule 32 (VARIABLE -> id .)
    or              reduce using rule 32 (VARIABLE -> id .)
    )               reduce using rule 32 (VARIABLE -> id .)
    ,               reduce using rule 32 (VARIABLE -> id .)
    ]               reduce using rule 32 (VARIABLE -> id .)
    to              reduce using rule 32 (VARIABLE -> id .)
    do              reduce using rule 32 (VARIABLE -> id .)
    (               reduce using rule 125 (SEM_VERIFY_FUNC_CALL -> id .)


state 131

    (53) ESTATUTO -> ASIGNACION ; .

    return          reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    }               reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    /               reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    if              reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    while           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    for             reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    read            reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    write           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    id              reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    point           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    circle          reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    penup           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    pendown         reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    color           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    size            reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)
    clear           reduce using rule 53 (ESTATUTO -> ASIGNACION ; .)


state 132

    (57) ESTATUTO -> / SEM_MUST_BE_VOID_CALL . LLAMADA ;
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (125) SEM_VERIFY_FUNC_CALL -> . id

    id              shift and go to state 171

    LLAMADA                        shift and go to state 170
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 133

    (58) ESTATUTO -> LECTURA ; .

    return          reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    }               reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    /               reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    if              reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    while           reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    for             reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    read            reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    write           reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    id              reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    point           reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    circle          reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    penup           reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    pendown         reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    color           reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    size            reduce using rule 58 (ESTATUTO -> LECTURA ; .)
    clear           reduce using rule 58 (ESTATUTO -> LECTURA ; .)


state 134

    (59) ESTATUTO -> ESCRITURA ; .

    return          reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    }               reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    /               reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    if              reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    while           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    for             reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    read            reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    write           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    id              reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    point           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    circle          reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    penup           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    pendown         reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    color           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    size            reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)
    clear           reduce using rule 59 (ESTATUTO -> ESCRITURA ; .)


state 135

    (60) ESTATUTO -> LLAMADA_BI ; .

    return          reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    }               reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    /               reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    if              reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    while           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    for             reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    read            reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    write           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    id              reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    point           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    circle          reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    penup           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    pendown         reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    color           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    size            reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)
    clear           reduce using rule 60 (ESTATUTO -> LLAMADA_BI ; .)


state 136

    (72) ASIGNACION -> VARIABLE = . SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP
    (108) SEM_ADD_EQUALS -> .

    (               reduce using rule 108 (SEM_ADD_EQUALS -> .)
    cte_i           reduce using rule 108 (SEM_ADD_EQUALS -> .)
    cte_f           reduce using rule 108 (SEM_ADD_EQUALS -> .)
    cte_c           reduce using rule 108 (SEM_ADD_EQUALS -> .)
    id              reduce using rule 108 (SEM_ADD_EQUALS -> .)

    SEM_ADD_EQUALS                 shift and go to state 172

state 137

    (73) CONDICION -> if ( . EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (74) CONDICION -> if ( . EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 173
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 138

    (75) WHILE -> while SEM_ADD_COND_INDEX . ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX

    (               shift and go to state 174


state 139

    (76) FOR -> for ASIGNACION . to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX

    to              shift and go to state 175


state 140

    (77) LECTURA -> read ( . LECTURA_OPTS )
    (78) LECTURA_OPTS -> . LECTURA_OPTS , id
    (79) LECTURA_OPTS -> . id

    id              shift and go to state 177

    LECTURA_OPTS                   shift and go to state 176

state 141

    (80) ESCRITURA -> write ( . ESCRITURA_OPTS )
    (81) ESCRITURA_OPTS -> . ESCRITURA_OPTS , cte_s
    (82) ESCRITURA_OPTS -> . ESCRITURA_OPTS , EXPRESION
    (83) ESCRITURA_OPTS -> . cte_s
    (84) ESCRITURA_OPTS -> . EXPRESION
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    cte_s           shift and go to state 179
    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    ESCRITURA_OPTS                 shift and go to state 178
    EXPRESION                      shift and go to state 180
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 142

    (31) VARIABLE -> id [ . EXPRESION ]
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 181
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 143

    (93) POINT -> point ( . EXPRESION , EXPRESION )
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 182
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 144

    (94) CIRCLE -> circle ( . EXPRESION )
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 183
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 145

    (95) PENUP -> penup ( . )

    )               shift and go to state 184


state 146

    (96) PENDOWN -> pendown ( . )

    )               shift and go to state 185


state 147

    (97) COLOR -> color ( . cte_s )

    cte_s           shift and go to state 186


state 148

    (98) SIZE -> size ( . EXPRESION )
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 187
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 149

    (92) CLEAR -> clear ( . )

    )               shift and go to state 188


state 150

    (18) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 18 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 151

    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (124) SEM_ENDFUNC -> .

    char            reduce using rule 124 (SEM_ENDFUNC -> .)
    float           reduce using rule 124 (SEM_ENDFUNC -> .)
    int             reduce using rule 124 (SEM_ENDFUNC -> .)
    void            reduce using rule 124 (SEM_ENDFUNC -> .)
    main            reduce using rule 124 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 189

state 152

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (124) SEM_ENDFUNC -> .

    char            reduce using rule 124 (SEM_ENDFUNC -> .)
    float           reduce using rule 124 (SEM_ENDFUNC -> .)
    int             reduce using rule 124 (SEM_ENDFUNC -> .)
    void            reduce using rule 124 (SEM_ENDFUNC -> .)
    main            reduce using rule 124 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 190

state 153

    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 191

state 154

    (26) PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME .

    )               reduce using rule 26 (PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME .)
    ,               reduce using rule 26 (PARAMS -> PARAMS , TIPO_SIMPLE PARAM_NAME .)


state 155

    (14) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 14 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 156

    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (124) SEM_ENDFUNC -> .

    char            reduce using rule 124 (SEM_ENDFUNC -> .)
    float           reduce using rule 124 (SEM_ENDFUNC -> .)
    int             reduce using rule 124 (SEM_ENDFUNC -> .)
    void            reduce using rule 124 (SEM_ENDFUNC -> .)
    main            reduce using rule 124 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 192

state 157

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (124) SEM_ENDFUNC -> .

    char            reduce using rule 124 (SEM_ENDFUNC -> .)
    float           reduce using rule 124 (SEM_ENDFUNC -> .)
    int             reduce using rule 124 (SEM_ENDFUNC -> .)
    void            reduce using rule 124 (SEM_ENDFUNC -> .)
    main            reduce using rule 124 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 193

state 158

    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES . BLOQUE SEM_ENDFUNC
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 194

state 159

    (33) BLOQUE -> { LOOP_ESTATUTO return EXPRESION . SEM_VERIFY_RETURN_FUNC ; }
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (129) SEM_VERIFY_RETURN_FUNC -> .
    (135) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 129 (SEM_VERIFY_RETURN_FUNC -> .)
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_VERIFY_RETURN_FUNC         shift and go to state 195
    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 160

    (35) BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC . ; }

    ;               shift and go to state 196


state 161

    (39) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP . and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP . or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP

    and             shift and go to state 197
    or              shift and go to state 198


state 162

    (42) EXP_R -> EXP_A > . SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (111) SEM_ADD_GREATER_THAN -> .

    (               reduce using rule 111 (SEM_ADD_GREATER_THAN -> .)
    cte_i           reduce using rule 111 (SEM_ADD_GREATER_THAN -> .)
    cte_f           reduce using rule 111 (SEM_ADD_GREATER_THAN -> .)
    cte_c           reduce using rule 111 (SEM_ADD_GREATER_THAN -> .)
    id              reduce using rule 111 (SEM_ADD_GREATER_THAN -> .)

    SEM_ADD_GREATER_THAN           shift and go to state 199

state 163

    (43) EXP_R -> EXP_A < . SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (112) SEM_ADD_LESS_THAN -> .

    (               reduce using rule 112 (SEM_ADD_LESS_THAN -> .)
    cte_i           reduce using rule 112 (SEM_ADD_LESS_THAN -> .)
    cte_f           reduce using rule 112 (SEM_ADD_LESS_THAN -> .)
    cte_c           reduce using rule 112 (SEM_ADD_LESS_THAN -> .)
    id              reduce using rule 112 (SEM_ADD_LESS_THAN -> .)

    SEM_ADD_LESS_THAN              shift and go to state 200

state 164

    (44) EXP_R -> EXP_A equals . SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (113) SEM_ADD_EQUALS_TO -> .

    (               reduce using rule 113 (SEM_ADD_EQUALS_TO -> .)
    cte_i           reduce using rule 113 (SEM_ADD_EQUALS_TO -> .)
    cte_f           reduce using rule 113 (SEM_ADD_EQUALS_TO -> .)
    cte_c           reduce using rule 113 (SEM_ADD_EQUALS_TO -> .)
    id              reduce using rule 113 (SEM_ADD_EQUALS_TO -> .)

    SEM_ADD_EQUALS_TO              shift and go to state 201

state 165

    (45) EXP_R -> EXP_A not_equals . SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (114) SEM_ADD_NOT_EQUALS_TO -> .

    (               reduce using rule 114 (SEM_ADD_NOT_EQUALS_TO -> .)
    cte_i           reduce using rule 114 (SEM_ADD_NOT_EQUALS_TO -> .)
    cte_f           reduce using rule 114 (SEM_ADD_NOT_EQUALS_TO -> .)
    cte_c           reduce using rule 114 (SEM_ADD_NOT_EQUALS_TO -> .)
    id              reduce using rule 114 (SEM_ADD_NOT_EQUALS_TO -> .)

    SEM_ADD_NOT_EQUALS_TO          shift and go to state 202

state 166

    (47) EXP_A -> EXP_A SEM_PENDING_EXPA_OP . + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A SEM_PENDING_EXPA_OP . minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP

    +               shift and go to state 203
    minus           shift and go to state 204


state 167

    (50) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP . * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP . / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP

    *               shift and go to state 205
    /               shift and go to state 206


state 168

    (64) FACTOR -> ( SEM_ADD_FONDO_FALSO . EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 207
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 169

    (68) LLAMADA -> SEM_VERIFY_FUNC_CALL ( . LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> SEM_VERIFY_FUNC_CALL ( . ) SEM_ADD_GOSUB
    (70) LLAMADA_OPTS -> . LLAMADA_OPTS , EXPRESION SEM_VERIFY_PARAM
    (71) LLAMADA_OPTS -> . EXPRESION SEM_VERIFY_PARAM
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    )               shift and go to state 209
    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    SEM_VERIFY_FUNC_CALL           shift and go to state 126
    LLAMADA_OPTS                   shift and go to state 208
    EXPRESION                      shift and go to state 210
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124

state 170

    (57) ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA . ;

    ;               shift and go to state 211


state 171

    (125) SEM_VERIFY_FUNC_CALL -> id .

    (               reduce using rule 125 (SEM_VERIFY_FUNC_CALL -> id .)


state 172

    (72) ASIGNACION -> VARIABLE = SEM_ADD_EQUALS . EXPRESION SEM_PENDING_ASSIGNATION_OP
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    VARIABLE                       shift and go to state 124
    EXPRESION                      shift and go to state 212
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 173

    (73) CONDICION -> if ( EXPRESION . ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (74) CONDICION -> if ( EXPRESION . ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 213
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 174

    (75) WHILE -> while SEM_ADD_COND_INDEX ( . EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 214
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 175

    (76) FOR -> for ASIGNACION to . SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (120) SEM_ADD_COND_INDEX -> .

    (               reduce using rule 120 (SEM_ADD_COND_INDEX -> .)
    cte_i           reduce using rule 120 (SEM_ADD_COND_INDEX -> .)
    cte_f           reduce using rule 120 (SEM_ADD_COND_INDEX -> .)
    cte_c           reduce using rule 120 (SEM_ADD_COND_INDEX -> .)
    id              reduce using rule 120 (SEM_ADD_COND_INDEX -> .)

    SEM_ADD_COND_INDEX             shift and go to state 215

state 176

    (77) LECTURA -> read ( LECTURA_OPTS . )
    (78) LECTURA_OPTS -> LECTURA_OPTS . , id

    )               shift and go to state 216
    ,               shift and go to state 217


state 177

    (79) LECTURA_OPTS -> id .

    )               reduce using rule 79 (LECTURA_OPTS -> id .)
    ,               reduce using rule 79 (LECTURA_OPTS -> id .)


state 178

    (80) ESCRITURA -> write ( ESCRITURA_OPTS . )
    (81) ESCRITURA_OPTS -> ESCRITURA_OPTS . , cte_s
    (82) ESCRITURA_OPTS -> ESCRITURA_OPTS . , EXPRESION

    )               shift and go to state 218
    ,               shift and go to state 219


state 179

    (83) ESCRITURA_OPTS -> cte_s .

    )               reduce using rule 83 (ESCRITURA_OPTS -> cte_s .)
    ,               reduce using rule 83 (ESCRITURA_OPTS -> cte_s .)


state 180

    (84) ESCRITURA_OPTS -> EXPRESION .
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    )               reduce using rule 84 (ESCRITURA_OPTS -> EXPRESION .)
    ,               reduce using rule 84 (ESCRITURA_OPTS -> EXPRESION .)
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 181

    (31) VARIABLE -> id [ EXPRESION . ]
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    ]               shift and go to state 220
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 182

    (93) POINT -> point ( EXPRESION . , EXPRESION )
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    ,               shift and go to state 221
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 183

    (94) CIRCLE -> circle ( EXPRESION . )
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 222
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 184

    (95) PENUP -> penup ( ) .

    ;               reduce using rule 95 (PENUP -> penup ( ) .)


state 185

    (96) PENDOWN -> pendown ( ) .

    ;               reduce using rule 96 (PENDOWN -> pendown ( ) .)


state 186

    (97) COLOR -> color ( cte_s . )

    )               shift and go to state 223


state 187

    (98) SIZE -> size ( EXPRESION . )
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 224
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 188

    (92) CLEAR -> clear ( ) .

    ;               reduce using rule 92 (CLEAR -> clear ( ) .)


state 189

    (21) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 21 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 190

    (19) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 19 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 191

    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (124) SEM_ENDFUNC -> .

    char            reduce using rule 124 (SEM_ENDFUNC -> .)
    float           reduce using rule 124 (SEM_ENDFUNC -> .)
    int             reduce using rule 124 (SEM_ENDFUNC -> .)
    void            reduce using rule 124 (SEM_ENDFUNC -> .)
    main            reduce using rule 124 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 225

state 192

    (17) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 17 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 193

    (15) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 15 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 194

    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE . SEM_ENDFUNC
    (124) SEM_ENDFUNC -> .

    char            reduce using rule 124 (SEM_ENDFUNC -> .)
    float           reduce using rule 124 (SEM_ENDFUNC -> .)
    int             reduce using rule 124 (SEM_ENDFUNC -> .)
    void            reduce using rule 124 (SEM_ENDFUNC -> .)
    main            reduce using rule 124 (SEM_ENDFUNC -> .)

    SEM_ENDFUNC                    shift and go to state 226

state 195

    (33) BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC . ; }

    ;               shift and go to state 227


state 196

    (35) BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; . }

    }               shift and go to state 228


state 197

    (39) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and . SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (115) SEM_ADD_AND -> .

    (               reduce using rule 115 (SEM_ADD_AND -> .)
    cte_i           reduce using rule 115 (SEM_ADD_AND -> .)
    cte_f           reduce using rule 115 (SEM_ADD_AND -> .)
    cte_c           reduce using rule 115 (SEM_ADD_AND -> .)
    id              reduce using rule 115 (SEM_ADD_AND -> .)

    SEM_ADD_AND                    shift and go to state 229

state 198

    (40) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or . SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (116) SEM_ADD_OR -> .

    (               reduce using rule 116 (SEM_ADD_OR -> .)
    cte_i           reduce using rule 116 (SEM_ADD_OR -> .)
    cte_f           reduce using rule 116 (SEM_ADD_OR -> .)
    cte_c           reduce using rule 116 (SEM_ADD_OR -> .)
    id              reduce using rule 116 (SEM_ADD_OR -> .)

    SEM_ADD_OR                     shift and go to state 230

state 199

    (42) EXP_R -> EXP_A > SEM_ADD_GREATER_THAN . EXP_A SEM_PENDING_REL_OP
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXP_A                          shift and go to state 231
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 200

    (43) EXP_R -> EXP_A < SEM_ADD_LESS_THAN . EXP_A SEM_PENDING_REL_OP
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXP_A                          shift and go to state 232
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 201

    (44) EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO . EXP_A SEM_PENDING_REL_OP
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXP_A                          shift and go to state 233
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 202

    (45) EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO . EXP_A SEM_PENDING_REL_OP
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXP_A                          shift and go to state 234
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 203

    (47) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + . SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (104) SEM_ADD_PLUS -> .

    (               reduce using rule 104 (SEM_ADD_PLUS -> .)
    cte_i           reduce using rule 104 (SEM_ADD_PLUS -> .)
    cte_f           reduce using rule 104 (SEM_ADD_PLUS -> .)
    cte_c           reduce using rule 104 (SEM_ADD_PLUS -> .)
    id              reduce using rule 104 (SEM_ADD_PLUS -> .)

    SEM_ADD_PLUS                   shift and go to state 235

state 204

    (48) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus . SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (105) SEM_ADD_MINUS -> .

    (               reduce using rule 105 (SEM_ADD_MINUS -> .)
    cte_i           reduce using rule 105 (SEM_ADD_MINUS -> .)
    cte_f           reduce using rule 105 (SEM_ADD_MINUS -> .)
    cte_c           reduce using rule 105 (SEM_ADD_MINUS -> .)
    id              reduce using rule 105 (SEM_ADD_MINUS -> .)

    SEM_ADD_MINUS                  shift and go to state 236

state 205

    (50) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * . SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (106) SEM_ADD_TIMES -> .

    (               reduce using rule 106 (SEM_ADD_TIMES -> .)
    cte_i           reduce using rule 106 (SEM_ADD_TIMES -> .)
    cte_f           reduce using rule 106 (SEM_ADD_TIMES -> .)
    cte_c           reduce using rule 106 (SEM_ADD_TIMES -> .)
    id              reduce using rule 106 (SEM_ADD_TIMES -> .)

    SEM_ADD_TIMES                  shift and go to state 237

state 206

    (51) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / . SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (107) SEM_ADD_DIVISION -> .

    (               reduce using rule 107 (SEM_ADD_DIVISION -> .)
    cte_i           reduce using rule 107 (SEM_ADD_DIVISION -> .)
    cte_f           reduce using rule 107 (SEM_ADD_DIVISION -> .)
    cte_c           reduce using rule 107 (SEM_ADD_DIVISION -> .)
    id              reduce using rule 107 (SEM_ADD_DIVISION -> .)

    SEM_ADD_DIVISION               shift and go to state 238

state 207

    (64) FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION . ) SEM_REMOVE_FONDO_FALSO
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 239
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 208

    (68) LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS . SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (70) LLAMADA_OPTS -> LLAMADA_OPTS . , EXPRESION SEM_VERIFY_PARAM
    (127) SEM_RESET_PARAM_COUNT -> .

    ,               shift and go to state 241
    )               reduce using rule 127 (SEM_RESET_PARAM_COUNT -> .)

    SEM_RESET_PARAM_COUNT          shift and go to state 240

state 209

    (69) LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) . SEM_ADD_GOSUB
    (128) SEM_ADD_GOSUB -> .

    *               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    /               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    >               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    <               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    equals          reduce using rule 128 (SEM_ADD_GOSUB -> .)
    not_equals      reduce using rule 128 (SEM_ADD_GOSUB -> .)
    +               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    minus           reduce using rule 128 (SEM_ADD_GOSUB -> .)
    ;               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    and             reduce using rule 128 (SEM_ADD_GOSUB -> .)
    or              reduce using rule 128 (SEM_ADD_GOSUB -> .)
    )               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    ,               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    ]               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    to              reduce using rule 128 (SEM_ADD_GOSUB -> .)
    do              reduce using rule 128 (SEM_ADD_GOSUB -> .)

    SEM_ADD_GOSUB                  shift and go to state 242

state 210

    (71) LLAMADA_OPTS -> EXPRESION . SEM_VERIFY_PARAM
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (126) SEM_VERIFY_PARAM -> .
    (135) SEM_PENDING_LOGIC_OP -> .

    ,               reduce using rule 126 (SEM_VERIFY_PARAM -> .)
    )               reduce using rule 126 (SEM_VERIFY_PARAM -> .)
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_VERIFY_PARAM               shift and go to state 243
    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 211

    (57) ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .

    return          reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    }               reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    /               reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    if              reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    while           reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    for             reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    read            reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    write           reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    id              reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    point           reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    circle          reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    penup           reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    pendown         reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    color           reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    size            reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)
    clear           reduce using rule 57 (ESTATUTO -> / SEM_MUST_BE_VOID_CALL LLAMADA ; .)


state 212

    (72) ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION . SEM_PENDING_ASSIGNATION_OP
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (133) SEM_PENDING_ASSIGNATION_OP -> .
    (135) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 133 (SEM_PENDING_ASSIGNATION_OP -> .)
    to              reduce using rule 133 (SEM_PENDING_ASSIGNATION_OP -> .)
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_ASSIGNATION_OP     shift and go to state 244
    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 213

    (73) CONDICION -> if ( EXPRESION ) . SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND
    (74) CONDICION -> if ( EXPRESION ) . SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (117) SEM_ADD_GOTOF -> .

    then            reduce using rule 117 (SEM_ADD_GOTOF -> .)

    SEM_ADD_GOTOF                  shift and go to state 245

state 214

    (75) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION . ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 246
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 215

    (76) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX . EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 247
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 216

    (77) LECTURA -> read ( LECTURA_OPTS ) .

    ;               reduce using rule 77 (LECTURA -> read ( LECTURA_OPTS ) .)


state 217

    (78) LECTURA_OPTS -> LECTURA_OPTS , . id

    id              shift and go to state 248


state 218

    (80) ESCRITURA -> write ( ESCRITURA_OPTS ) .

    ;               reduce using rule 80 (ESCRITURA -> write ( ESCRITURA_OPTS ) .)


state 219

    (81) ESCRITURA_OPTS -> ESCRITURA_OPTS , . cte_s
    (82) ESCRITURA_OPTS -> ESCRITURA_OPTS , . EXPRESION
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    cte_s           shift and go to state 249
    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 250
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 220

    (31) VARIABLE -> id [ EXPRESION ] .

    =               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    *               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    /               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    >               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    <               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    equals          reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    not_equals      reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    +               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    minus           reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    ;               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    and             reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    or              reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    )               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    ,               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    ]               reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    to              reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)
    do              reduce using rule 31 (VARIABLE -> id [ EXPRESION ] .)


state 221

    (93) POINT -> point ( EXPRESION , . EXPRESION )
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 251
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 222

    (94) CIRCLE -> circle ( EXPRESION ) .

    ;               reduce using rule 94 (CIRCLE -> circle ( EXPRESION ) .)


state 223

    (97) COLOR -> color ( cte_s ) .

    ;               reduce using rule 97 (COLOR -> color ( cte_s ) .)


state 224

    (98) SIZE -> size ( EXPRESION ) .

    ;               reduce using rule 98 (SIZE -> size ( EXPRESION ) .)


state 225

    (20) FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 20 (FUNCS -> FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 226

    (16) FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .

    char            reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    float           reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    int             reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    void            reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)
    main            reduce using rule 16 (FUNCS -> FUNCS FUNC_TYPES module SEM_FUNC_NAME SEM_ADD_FUNC ( PARAMS ) DEC_V SEM_ADD_GLOBAL_VARIABLES BLOQUE SEM_ENDFUNC .)


state 227

    (33) BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; . }

    }               shift and go to state 252


state 228

    (35) BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .

    $end            reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    char            reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    float           reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    int             reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    void            reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    main            reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    else            reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    return          reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    }               reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    /               reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    if              reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    while           reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    for             reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    read            reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    write           reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    id              reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    point           reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    circle          reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    penup           reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    pendown         reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    color           reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    size            reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    clear           reduce using rule 35 (BLOQUE -> { return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)


state 229

    (39) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND . EXP_R SEM_PENDING_LOGIC_OP
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXP_R                          shift and go to state 253
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 230

    (40) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR . EXP_R SEM_PENDING_LOGIC_OP
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXP_R                          shift and go to state 254
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 231

    (42) EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A . SEM_PENDING_REL_OP
    (47) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (134) SEM_PENDING_REL_OP -> .
    (131) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 255
    SEM_PENDING_EXPA_OP            shift and go to state 166

state 232

    (43) EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A . SEM_PENDING_REL_OP
    (47) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (134) SEM_PENDING_REL_OP -> .
    (131) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 256
    SEM_PENDING_EXPA_OP            shift and go to state 166

state 233

    (44) EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A . SEM_PENDING_REL_OP
    (47) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (134) SEM_PENDING_REL_OP -> .
    (131) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 257
    SEM_PENDING_EXPA_OP            shift and go to state 166

state 234

    (45) EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A . SEM_PENDING_REL_OP
    (47) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> EXP_A . SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (134) SEM_PENDING_REL_OP -> .
    (131) SEM_PENDING_EXPA_OP -> .

    ;               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    and             reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    or              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    )               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    ,               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    ]               reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    to              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    do              reduce using rule 134 (SEM_PENDING_REL_OP -> .)
    +               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)

    SEM_PENDING_REL_OP             shift and go to state 258
    SEM_PENDING_EXPA_OP            shift and go to state 166

state 235

    (47) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS . TERMINO SEM_PENDING_EXPA_OP
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    TERMINO                        shift and go to state 259
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 236

    (48) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS . TERMINO SEM_PENDING_EXPA_OP
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    TERMINO                        shift and go to state 260
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 237

    (50) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES . FACTOR SEM_PENDING_TERMINO_OP
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    FACTOR                         shift and go to state 261
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 238

    (51) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION . FACTOR SEM_PENDING_TERMINO_OP
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    FACTOR                         shift and go to state 262
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 239

    (64) FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) . SEM_REMOVE_FONDO_FALSO
    (110) SEM_REMOVE_FONDO_FALSO -> .

    *               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    /               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    >               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    <               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    equals          reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    not_equals      reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    +               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    minus           reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    ;               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    and             reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    or              reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    )               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    ,               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    ]               reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    to              reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)
    do              reduce using rule 110 (SEM_REMOVE_FONDO_FALSO -> .)

    SEM_REMOVE_FONDO_FALSO         shift and go to state 263

state 240

    (68) LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT . ) SEM_ADD_GOSUB

    )               shift and go to state 264


state 241

    (70) LLAMADA_OPTS -> LLAMADA_OPTS , . EXPRESION SEM_VERIFY_PARAM
    (39) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> . EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (41) EXPRESION -> . EXP_R
    (42) EXP_R -> . EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP
    (43) EXP_R -> . EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP
    (44) EXP_R -> . EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (45) EXP_R -> . EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP
    (46) EXP_R -> . EXP_A
    (47) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP
    (48) EXP_A -> . EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP
    (49) EXP_A -> . TERMINO
    (50) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> . TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (52) TERMINO -> . FACTOR
    (61) FACTOR -> . LLAMADA
    (62) FACTOR -> . CTE
    (63) FACTOR -> . VARIABLE
    (64) FACTOR -> . ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO
    (68) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB
    (69) LLAMADA -> . SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB
    (65) CTE -> . cte_i
    (66) CTE -> . cte_f
    (67) CTE -> . cte_c
    (31) VARIABLE -> . id [ EXPRESION ]
    (32) VARIABLE -> . id
    (125) SEM_VERIFY_FUNC_CALL -> . id

    (               shift and go to state 125
    cte_i           shift and go to state 127
    cte_f           shift and go to state 128
    cte_c           shift and go to state 129
    id              shift and go to state 130

    EXPRESION                      shift and go to state 265
    EXP_R                          shift and go to state 118
    EXP_A                          shift and go to state 119
    TERMINO                        shift and go to state 120
    FACTOR                         shift and go to state 121
    LLAMADA                        shift and go to state 122
    CTE                            shift and go to state 123
    VARIABLE                       shift and go to state 124
    SEM_VERIFY_FUNC_CALL           shift and go to state 126

state 242

    (69) LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .

    *               reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    /               reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    >               reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    <               reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    equals          reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    not_equals      reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    +               reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    minus           reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    ;               reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    and             reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    or              reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    )               reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    ,               reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    ]               reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    to              reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)
    do              reduce using rule 69 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( ) SEM_ADD_GOSUB .)


state 243

    (71) LLAMADA_OPTS -> EXPRESION SEM_VERIFY_PARAM .

    ,               reduce using rule 71 (LLAMADA_OPTS -> EXPRESION SEM_VERIFY_PARAM .)
    )               reduce using rule 71 (LLAMADA_OPTS -> EXPRESION SEM_VERIFY_PARAM .)


state 244

    (72) ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP .

    ;               reduce using rule 72 (ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP .)
    to              reduce using rule 72 (ASIGNACION -> VARIABLE = SEM_ADD_EQUALS EXPRESION SEM_PENDING_ASSIGNATION_OP .)


state 245

    (73) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF . then BLOQUE SEM_FILL_GOTO_ANYKIND
    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF . then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND

    then            shift and go to state 266


state 246

    (75) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) . SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (117) SEM_ADD_GOTOF -> .

    do              reduce using rule 117 (SEM_ADD_GOTOF -> .)

    SEM_ADD_GOTOF                  shift and go to state 267

state 247

    (76) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION . SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (122) SEM_ADD_GOTOV -> .
    (135) SEM_PENDING_LOGIC_OP -> .

    do              reduce using rule 122 (SEM_ADD_GOTOV -> .)
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_ADD_GOTOV                  shift and go to state 268
    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 248

    (78) LECTURA_OPTS -> LECTURA_OPTS , id .

    )               reduce using rule 78 (LECTURA_OPTS -> LECTURA_OPTS , id .)
    ,               reduce using rule 78 (LECTURA_OPTS -> LECTURA_OPTS , id .)


state 249

    (81) ESCRITURA_OPTS -> ESCRITURA_OPTS , cte_s .

    )               reduce using rule 81 (ESCRITURA_OPTS -> ESCRITURA_OPTS , cte_s .)
    ,               reduce using rule 81 (ESCRITURA_OPTS -> ESCRITURA_OPTS , cte_s .)


state 250

    (82) ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION .
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    )               reduce using rule 82 (ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION .)
    ,               reduce using rule 82 (ESCRITURA_OPTS -> ESCRITURA_OPTS , EXPRESION .)
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 251

    (93) POINT -> point ( EXPRESION , EXPRESION . )
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    )               shift and go to state 269
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 252

    (33) BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .

    $end            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    char            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    float           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    int             reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    void            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    main            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    else            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    return          reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    }               reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    /               reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    if              reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    while           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    for             reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    read            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    write           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    id              reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    point           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    circle          reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    penup           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    pendown         reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    color           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    size            reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)
    clear           reduce using rule 33 (BLOQUE -> { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; } .)


state 253

    (39) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R . SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    )               reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    ,               reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    ]               reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    to              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    do              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 270

state 254

    (40) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R . SEM_PENDING_LOGIC_OP
    (135) SEM_PENDING_LOGIC_OP -> .

    ;               reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    )               reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    ,               reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    ]               reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    to              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    do              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_PENDING_LOGIC_OP           shift and go to state 271

state 255

    (42) EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 42 (EXP_R -> EXP_A > SEM_ADD_GREATER_THAN EXP_A SEM_PENDING_REL_OP .)


state 256

    (43) EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 43 (EXP_R -> EXP_A < SEM_ADD_LESS_THAN EXP_A SEM_PENDING_REL_OP .)


state 257

    (44) EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 44 (EXP_R -> EXP_A equals SEM_ADD_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)


state 258

    (45) EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .

    ;               reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    and             reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    or              reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    )               reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ,               reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    ]               reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    to              reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)
    do              reduce using rule 45 (EXP_R -> EXP_A not_equals SEM_ADD_NOT_EQUALS_TO EXP_A SEM_PENDING_REL_OP .)


state 259

    (47) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO . SEM_PENDING_EXPA_OP
    (50) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (131) SEM_PENDING_EXPA_OP -> .
    (132) SEM_PENDING_TERMINO_OP -> .

    >               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    <               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    equals          reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    not_equals      reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    +               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    ;               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    and             reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    or              reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    )               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    ,               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    ]               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    to              reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    do              reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    *               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_EXPA_OP            shift and go to state 272
    SEM_PENDING_TERMINO_OP         shift and go to state 167

state 260

    (48) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO . SEM_PENDING_EXPA_OP
    (50) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP
    (51) TERMINO -> TERMINO . SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP
    (131) SEM_PENDING_EXPA_OP -> .
    (132) SEM_PENDING_TERMINO_OP -> .

    >               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    <               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    equals          reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    not_equals      reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    +               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    minus           reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    ;               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    and             reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    or              reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    )               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    ,               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    ]               reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    to              reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    do              reduce using rule 131 (SEM_PENDING_EXPA_OP -> .)
    *               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_EXPA_OP            shift and go to state 273
    SEM_PENDING_TERMINO_OP         shift and go to state 167

state 261

    (50) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR . SEM_PENDING_TERMINO_OP
    (132) SEM_PENDING_TERMINO_OP -> .

    *               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    >               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    <               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    equals          reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    not_equals      reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    +               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    minus           reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    ;               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    and             reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    or              reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    )               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    ,               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    ]               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    to              reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    do              reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_TERMINO_OP         shift and go to state 274

state 262

    (51) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR . SEM_PENDING_TERMINO_OP
    (132) SEM_PENDING_TERMINO_OP -> .

    *               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    /               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    >               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    <               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    equals          reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    not_equals      reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    +               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    minus           reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    ;               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    and             reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    or              reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    )               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    ,               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    ]               reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    to              reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)
    do              reduce using rule 132 (SEM_PENDING_TERMINO_OP -> .)

    SEM_PENDING_TERMINO_OP         shift and go to state 275

state 263

    (64) FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .

    *               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    /               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    >               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    <               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    equals          reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    not_equals      reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    +               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    minus           reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    ;               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    and             reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    or              reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    )               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    ,               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    ]               reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    to              reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)
    do              reduce using rule 64 (FACTOR -> ( SEM_ADD_FONDO_FALSO EXPRESION ) SEM_REMOVE_FONDO_FALSO .)


state 264

    (68) LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) . SEM_ADD_GOSUB
    (128) SEM_ADD_GOSUB -> .

    *               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    /               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    >               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    <               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    equals          reduce using rule 128 (SEM_ADD_GOSUB -> .)
    not_equals      reduce using rule 128 (SEM_ADD_GOSUB -> .)
    +               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    minus           reduce using rule 128 (SEM_ADD_GOSUB -> .)
    ;               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    and             reduce using rule 128 (SEM_ADD_GOSUB -> .)
    or              reduce using rule 128 (SEM_ADD_GOSUB -> .)
    )               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    ,               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    ]               reduce using rule 128 (SEM_ADD_GOSUB -> .)
    to              reduce using rule 128 (SEM_ADD_GOSUB -> .)
    do              reduce using rule 128 (SEM_ADD_GOSUB -> .)

    SEM_ADD_GOSUB                  shift and go to state 276

state 265

    (70) LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION . SEM_VERIFY_PARAM
    (39) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP
    (40) EXPRESION -> EXPRESION . SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP
    (126) SEM_VERIFY_PARAM -> .
    (135) SEM_PENDING_LOGIC_OP -> .

    ,               reduce using rule 126 (SEM_VERIFY_PARAM -> .)
    )               reduce using rule 126 (SEM_VERIFY_PARAM -> .)
    and             reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)
    or              reduce using rule 135 (SEM_PENDING_LOGIC_OP -> .)

    SEM_VERIFY_PARAM               shift and go to state 277
    SEM_PENDING_LOGIC_OP           shift and go to state 161

state 266

    (73) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then . BLOQUE SEM_FILL_GOTO_ANYKIND
    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then . BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 278

state 267

    (75) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF . do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX

    do              shift and go to state 279


state 268

    (76) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV . do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX

    do              shift and go to state 280


state 269

    (93) POINT -> point ( EXPRESION , EXPRESION ) .

    ;               reduce using rule 93 (POINT -> point ( EXPRESION , EXPRESION ) .)


state 270

    (39) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .

    ;               reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    and             reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    or              reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    )               reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    ,               reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    ]               reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    to              reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)
    do              reduce using rule 39 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP and SEM_ADD_AND EXP_R SEM_PENDING_LOGIC_OP .)


state 271

    (40) EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .

    ;               reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    and             reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    or              reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    )               reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    ,               reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    ]               reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    to              reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)
    do              reduce using rule 40 (EXPRESION -> EXPRESION SEM_PENDING_LOGIC_OP or SEM_ADD_OR EXP_R SEM_PENDING_LOGIC_OP .)


state 272

    (47) EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .

    >               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    <               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    equals          reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    not_equals      reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    +               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    minus           reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    ;               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    and             reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    or              reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    )               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    ,               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    ]               reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    to              reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)
    do              reduce using rule 47 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP + SEM_ADD_PLUS TERMINO SEM_PENDING_EXPA_OP .)


state 273

    (48) EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .

    >               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    <               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    equals          reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    not_equals      reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    +               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    minus           reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    ;               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    and             reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    or              reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    )               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    ,               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    ]               reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    to              reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)
    do              reduce using rule 48 (EXP_A -> EXP_A SEM_PENDING_EXPA_OP minus SEM_ADD_MINUS TERMINO SEM_PENDING_EXPA_OP .)


state 274

    (50) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .

    *               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    /               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    >               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    <               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    equals          reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    not_equals      reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    +               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    minus           reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    ;               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    and             reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    or              reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    )               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    ,               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    ]               reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    to              reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)
    do              reduce using rule 50 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP * SEM_ADD_TIMES FACTOR SEM_PENDING_TERMINO_OP .)


state 275

    (51) TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .

    *               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    /               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    >               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    <               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    equals          reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    not_equals      reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    +               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    minus           reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    ;               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    and             reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    or              reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    )               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    ,               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    ]               reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    to              reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)
    do              reduce using rule 51 (TERMINO -> TERMINO SEM_PENDING_TERMINO_OP / SEM_ADD_DIVISION FACTOR SEM_PENDING_TERMINO_OP .)


state 276

    (68) LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .

    *               reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    /               reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    >               reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    <               reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    equals          reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    not_equals      reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    +               reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    minus           reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    ;               reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    and             reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    or              reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    )               reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    ,               reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    ]               reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    to              reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)
    do              reduce using rule 68 (LLAMADA -> SEM_VERIFY_FUNC_CALL ( LLAMADA_OPTS SEM_RESET_PARAM_COUNT ) SEM_ADD_GOSUB .)


state 277

    (70) LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION SEM_VERIFY_PARAM .

    ,               reduce using rule 70 (LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION SEM_VERIFY_PARAM .)
    )               reduce using rule 70 (LLAMADA_OPTS -> LLAMADA_OPTS , EXPRESION SEM_VERIFY_PARAM .)


state 278

    (73) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE . SEM_FILL_GOTO_ANYKIND
    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE . else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (118) SEM_FILL_GOTO_ANYKIND -> .

    else            shift and go to state 282
    return          reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    }               reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    /               reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    if              reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    while           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    for             reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    read            reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    write           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    id              reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    point           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    circle          reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    penup           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    pendown         reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    color           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    size            reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    clear           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)

    SEM_FILL_GOTO_ANYKIND          shift and go to state 281

state 279

    (75) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do . BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 283

state 280

    (76) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do . BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 284

state 281

    (73) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .

    return          reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    }               reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    /               reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    if              reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    while           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    for             reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    read            reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    write           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    id              reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    point           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    circle          reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    penup           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    pendown         reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    color           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    size            reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)
    clear           reduce using rule 73 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE SEM_FILL_GOTO_ANYKIND .)


state 282

    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else . SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND
    (119) SEM_ADD_GOTO_SIMPLE -> .

    {               reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)

    SEM_ADD_GOTO_SIMPLE            shift and go to state 285

state 283

    (75) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE . SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (119) SEM_ADD_GOTO_SIMPLE -> .

    return          reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    }               reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    /               reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    if              reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    while           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    for             reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    read            reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    write           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    id              reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    point           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    circle          reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    penup           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    pendown         reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    color           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    size            reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    clear           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)

    SEM_ADD_GOTO_SIMPLE            shift and go to state 286

state 284

    (76) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE . SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX
    (119) SEM_ADD_GOTO_SIMPLE -> .

    return          reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    }               reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    /               reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    if              reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    while           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    for             reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    read            reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    write           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    id              reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    point           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    circle          reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    penup           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    pendown         reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    color           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    size            reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)
    clear           reduce using rule 119 (SEM_ADD_GOTO_SIMPLE -> .)

    SEM_ADD_GOTO_SIMPLE            shift and go to state 287

state 285

    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE . BLOQUE SEM_FILL_GOTO_ANYKIND
    (33) BLOQUE -> . { LOOP_ESTATUTO return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (34) BLOQUE -> . { LOOP_ESTATUTO }
    (35) BLOQUE -> . { return EXPRESION SEM_VERIFY_RETURN_FUNC ; }
    (36) BLOQUE -> . { }

    {               shift and go to state 61

    BLOQUE                         shift and go to state 288

state 286

    (75) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE . SEM_FILL_GOTO_COND_INDEX
    (121) SEM_FILL_GOTO_COND_INDEX -> .

    return          reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    }               reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    /               reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    if              reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    while           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    for             reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    read            reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    write           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    id              reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    point           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    circle          reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    penup           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    pendown         reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    color           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    size            reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    clear           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)

    SEM_FILL_GOTO_COND_INDEX       shift and go to state 289

state 287

    (76) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE . SEM_FILL_GOTO_COND_INDEX
    (121) SEM_FILL_GOTO_COND_INDEX -> .

    return          reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    }               reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    /               reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    if              reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    while           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    for             reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    read            reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    write           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    id              reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    point           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    circle          reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    penup           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    pendown         reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    color           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    size            reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)
    clear           reduce using rule 121 (SEM_FILL_GOTO_COND_INDEX -> .)

    SEM_FILL_GOTO_COND_INDEX       shift and go to state 290

state 288

    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE . SEM_FILL_GOTO_ANYKIND
    (118) SEM_FILL_GOTO_ANYKIND -> .

    return          reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    }               reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    /               reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    if              reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    while           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    for             reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    read            reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    write           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    id              reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    point           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    circle          reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    penup           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    pendown         reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    color           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    size            reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)
    clear           reduce using rule 118 (SEM_FILL_GOTO_ANYKIND -> .)

    SEM_FILL_GOTO_ANYKIND          shift and go to state 291

state 289

    (75) WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .

    return          reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    }               reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    /               reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    if              reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    while           reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    for             reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    read            reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    write           reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    id              reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    point           reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    circle          reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    penup           reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    pendown         reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    color           reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    size            reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    clear           reduce using rule 75 (WHILE -> while SEM_ADD_COND_INDEX ( EXPRESION ) SEM_ADD_GOTOF do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)


state 290

    (76) FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .

    return          reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    }               reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    /               reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    if              reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    while           reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    for             reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    read            reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    write           reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    id              reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    point           reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    circle          reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    penup           reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    pendown         reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    color           reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    size            reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)
    clear           reduce using rule 76 (FOR -> for ASIGNACION to SEM_ADD_COND_INDEX EXPRESION SEM_ADD_GOTOV do BLOQUE SEM_ADD_GOTO_SIMPLE SEM_FILL_GOTO_COND_INDEX .)


state 291

    (74) CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .

    return          reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    }               reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    /               reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    if              reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    while           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    for             reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    read            reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    write           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    id              reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    point           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    circle          reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    penup           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    pendown         reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    color           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    size            reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)
    clear           reduce using rule 74 (CONDICION -> if ( EXPRESION ) SEM_ADD_GOTOF then BLOQUE else SEM_ADD_GOTO_SIMPLE BLOQUE SEM_FILL_GOTO_ANYKIND .)

